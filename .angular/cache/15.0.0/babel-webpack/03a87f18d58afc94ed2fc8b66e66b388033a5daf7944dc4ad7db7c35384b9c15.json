{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OTLPTraceExporter = void 0;\nconst core_1 = require(\"@opentelemetry/core\");\nconst grpc_js_1 = require(\"@grpc/grpc-js\");\nconst otlp_grpc_exporter_base_1 = require(\"@opentelemetry/otlp-grpc-exporter-base\");\nconst otlp_transformer_1 = require(\"@opentelemetry/otlp-transformer\");\n/**\n * OTLP Trace Exporter for Node\n */\nclass OTLPTraceExporter extends otlp_grpc_exporter_base_1.OTLPGRPCExporterNodeBase {\n  constructor(config = {}) {\n    super(config);\n    const headers = core_1.baggageUtils.parseKeyPairsIntoRecord((0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_HEADERS);\n    this.metadata || (this.metadata = new grpc_js_1.Metadata());\n    for (const [k, v] of Object.entries(headers)) {\n      this.metadata.set(k, v);\n    }\n  }\n  convert(spans) {\n    return (0, otlp_transformer_1.createExportTraceServiceRequest)(spans);\n  }\n  getDefaultUrl(config) {\n    return (0, otlp_grpc_exporter_base_1.validateAndNormalizeUrl)(this.getUrlFromConfig(config));\n  }\n  getServiceClientType() {\n    return otlp_grpc_exporter_base_1.ServiceClientType.SPANS;\n  }\n  getServiceProtoPath() {\n    return 'opentelemetry/proto/collector/trace/v1/trace_service.proto';\n  }\n  getUrlFromConfig(config) {\n    if (typeof config.url === 'string') {\n      return config.url;\n    }\n    return (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT || (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_ENDPOINT || otlp_grpc_exporter_base_1.DEFAULT_COLLECTOR_URL;\n  }\n}\nexports.OTLPTraceExporter = OTLPTraceExporter;","map":{"version":3,"names":["Object","defineProperty","exports","value","OTLPTraceExporter","core_1","require","grpc_js_1","otlp_grpc_exporter_base_1","otlp_transformer_1","OTLPGRPCExporterNodeBase","constructor","config","headers","baggageUtils","parseKeyPairsIntoRecord","getEnv","OTEL_EXPORTER_OTLP_TRACES_HEADERS","metadata","Metadata","k","v","entries","set","convert","spans","createExportTraceServiceRequest","getDefaultUrl","validateAndNormalizeUrl","getUrlFromConfig","getServiceClientType","ServiceClientType","SPANS","getServiceProtoPath","url","OTEL_EXPORTER_OTLP_TRACES_ENDPOINT","OTEL_EXPORTER_OTLP_ENDPOINT","DEFAULT_COLLECTOR_URL"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/exporter-trace-otlp-grpc/build/src/OTLPTraceExporter.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OTLPTraceExporter = void 0;\nconst core_1 = require(\"@opentelemetry/core\");\nconst grpc_js_1 = require(\"@grpc/grpc-js\");\nconst otlp_grpc_exporter_base_1 = require(\"@opentelemetry/otlp-grpc-exporter-base\");\nconst otlp_transformer_1 = require(\"@opentelemetry/otlp-transformer\");\n/**\n * OTLP Trace Exporter for Node\n */\nclass OTLPTraceExporter extends otlp_grpc_exporter_base_1.OTLPGRPCExporterNodeBase {\n    constructor(config = {}) {\n        super(config);\n        const headers = core_1.baggageUtils.parseKeyPairsIntoRecord((0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_HEADERS);\n        this.metadata || (this.metadata = new grpc_js_1.Metadata());\n        for (const [k, v] of Object.entries(headers)) {\n            this.metadata.set(k, v);\n        }\n    }\n    convert(spans) {\n        return (0, otlp_transformer_1.createExportTraceServiceRequest)(spans);\n    }\n    getDefaultUrl(config) {\n        return (0, otlp_grpc_exporter_base_1.validateAndNormalizeUrl)(this.getUrlFromConfig(config));\n    }\n    getServiceClientType() {\n        return otlp_grpc_exporter_base_1.ServiceClientType.SPANS;\n    }\n    getServiceProtoPath() {\n        return 'opentelemetry/proto/collector/trace/v1/trace_service.proto';\n    }\n    getUrlFromConfig(config) {\n        if (typeof config.url === 'string') {\n            return config.url;\n        }\n        return (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT ||\n            (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_ENDPOINT ||\n            otlp_grpc_exporter_base_1.DEFAULT_COLLECTOR_URL;\n    }\n}\nexports.OTLPTraceExporter = OTLPTraceExporter;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAG,KAAK,CAAC;AAClC,MAAMC,MAAM,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAC7C,MAAMC,SAAS,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC1C,MAAME,yBAAyB,GAAGF,OAAO,CAAC,wCAAwC,CAAC;AACnF,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,iCAAiC,CAAC;AACrE;AACA;AACA;AACA,MAAMF,iBAAiB,SAASI,yBAAyB,CAACE,wBAAwB,CAAC;EAC/EC,WAAW,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACrB,KAAK,CAACA,MAAM,CAAC;IACb,MAAMC,OAAO,GAAGR,MAAM,CAACS,YAAY,CAACC,uBAAuB,CAAC,CAAC,CAAC,EAAEV,MAAM,CAACW,MAAM,GAAG,CAACC,iCAAiC,CAAC;IACnH,IAAI,CAACC,QAAQ,KAAK,IAAI,CAACA,QAAQ,GAAG,IAAIX,SAAS,CAACY,QAAQ,EAAE,CAAC;IAC3D,KAAK,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,IAAIrB,MAAM,CAACsB,OAAO,CAACT,OAAO,CAAC,EAAE;MAC1C,IAAI,CAACK,QAAQ,CAACK,GAAG,CAACH,CAAC,EAAEC,CAAC,CAAC;IAC3B;EACJ;EACAG,OAAO,CAACC,KAAK,EAAE;IACX,OAAO,CAAC,CAAC,EAAEhB,kBAAkB,CAACiB,+BAA+B,EAAED,KAAK,CAAC;EACzE;EACAE,aAAa,CAACf,MAAM,EAAE;IAClB,OAAO,CAAC,CAAC,EAAEJ,yBAAyB,CAACoB,uBAAuB,EAAE,IAAI,CAACC,gBAAgB,CAACjB,MAAM,CAAC,CAAC;EAChG;EACAkB,oBAAoB,GAAG;IACnB,OAAOtB,yBAAyB,CAACuB,iBAAiB,CAACC,KAAK;EAC5D;EACAC,mBAAmB,GAAG;IAClB,OAAO,4DAA4D;EACvE;EACAJ,gBAAgB,CAACjB,MAAM,EAAE;IACrB,IAAI,OAAOA,MAAM,CAACsB,GAAG,KAAK,QAAQ,EAAE;MAChC,OAAOtB,MAAM,CAACsB,GAAG;IACrB;IACA,OAAO,CAAC,CAAC,EAAE7B,MAAM,CAACW,MAAM,GAAG,CAACmB,kCAAkC,IAC1D,CAAC,CAAC,EAAE9B,MAAM,CAACW,MAAM,GAAG,CAACoB,2BAA2B,IAChD5B,yBAAyB,CAAC6B,qBAAqB;EACvD;AACJ;AACAnC,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}