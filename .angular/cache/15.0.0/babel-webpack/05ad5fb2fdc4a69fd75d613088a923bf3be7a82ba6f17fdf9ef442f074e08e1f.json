{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AggregatorKind } from './types';\n/** Basic aggregator for None which keeps no recorded value. */\nvar DropAggregator = /** @class */function () {\n  function DropAggregator() {\n    this.kind = AggregatorKind.DROP;\n  }\n  DropAggregator.prototype.createAccumulation = function () {\n    return undefined;\n  };\n  DropAggregator.prototype.merge = function (_previous, _delta) {\n    return undefined;\n  };\n  DropAggregator.prototype.diff = function (_previous, _current) {\n    return undefined;\n  };\n  DropAggregator.prototype.toMetricData = function (_descriptor, _aggregationTemporality, _accumulationByAttributes, _endTime) {\n    return undefined;\n  };\n  return DropAggregator;\n}();\nexport { DropAggregator };","map":{"version":3,"names":["AggregatorKind","DropAggregator","kind","DROP","prototype","createAccumulation","undefined","merge","_previous","_delta","diff","_current","toMetricData","_descriptor","_aggregationTemporality","_accumulationByAttributes","_endTime"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/sdk-metrics/build/esm/aggregator/Drop.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AggregatorKind, } from './types';\n/** Basic aggregator for None which keeps no recorded value. */\nvar DropAggregator = /** @class */ (function () {\n    function DropAggregator() {\n        this.kind = AggregatorKind.DROP;\n    }\n    DropAggregator.prototype.createAccumulation = function () {\n        return undefined;\n    };\n    DropAggregator.prototype.merge = function (_previous, _delta) {\n        return undefined;\n    };\n    DropAggregator.prototype.diff = function (_previous, _current) {\n        return undefined;\n    };\n    DropAggregator.prototype.toMetricData = function (_descriptor, _aggregationTemporality, _accumulationByAttributes, _endTime) {\n        return undefined;\n    };\n    return DropAggregator;\n}());\nexport { DropAggregator };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAc,QAAS,SAAS;AACzC;AACA,IAAIC,cAAc,GAAG,aAAe,YAAY;EAC5C,SAASA,cAAc,GAAG;IACtB,IAAI,CAACC,IAAI,GAAGF,cAAc,CAACG,IAAI;EACnC;EACAF,cAAc,CAACG,SAAS,CAACC,kBAAkB,GAAG,YAAY;IACtD,OAAOC,SAAS;EACpB,CAAC;EACDL,cAAc,CAACG,SAAS,CAACG,KAAK,GAAG,UAAUC,SAAS,EAAEC,MAAM,EAAE;IAC1D,OAAOH,SAAS;EACpB,CAAC;EACDL,cAAc,CAACG,SAAS,CAACM,IAAI,GAAG,UAAUF,SAAS,EAAEG,QAAQ,EAAE;IAC3D,OAAOL,SAAS;EACpB,CAAC;EACDL,cAAc,CAACG,SAAS,CAACQ,YAAY,GAAG,UAAUC,WAAW,EAAEC,uBAAuB,EAAEC,yBAAyB,EAAEC,QAAQ,EAAE;IACzH,OAAOV,SAAS;EACpB,CAAC;EACD,OAAOL,cAAc;AACzB,CAAC,EAAG;AACJ,SAASA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}