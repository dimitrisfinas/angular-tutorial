{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler() {\n  return function (ex) {\n    diag.error(stringifyException(ex));\n  };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n  if (typeof ex === 'string') {\n    return ex;\n  } else {\n    return JSON.stringify(flattenException(ex));\n  }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n  var result = {};\n  var current = ex;\n  while (current !== null) {\n    Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n      if (result[propertyName]) return;\n      var value = current[propertyName];\n      if (value) {\n        result[propertyName] = String(value);\n      }\n    });\n    current = Object.getPrototypeOf(current);\n  }\n  return result;\n}","map":{"version":3,"names":["diag","loggingErrorHandler","ex","error","stringifyException","JSON","stringify","flattenException","result","current","Object","getOwnPropertyNames","forEach","propertyName","value","String","getPrototypeOf"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler() {\n    return function (ex) {\n        diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    var result = {};\n    var current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n            if (result[propertyName])\n                return;\n            var value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAI,QAAQ,oBAAoB;AACzC;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmB,GAAG;EAClC,OAAO,UAAUC,EAAE,EAAE;IACjBF,IAAI,CAACG,KAAK,CAACC,kBAAkB,CAACF,EAAE,CAAC,CAAC;EACtC,CAAC;AACL;AACA;AACA;AACA;AACA;AACA,SAASE,kBAAkB,CAACF,EAAE,EAAE;EAC5B,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;IACxB,OAAOA,EAAE;EACb,CAAC,MACI;IACD,OAAOG,IAAI,CAACC,SAAS,CAACC,gBAAgB,CAACL,EAAE,CAAC,CAAC;EAC/C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,gBAAgB,CAACL,EAAE,EAAE;EAC1B,IAAIM,MAAM,GAAG,CAAC,CAAC;EACf,IAAIC,OAAO,GAAGP,EAAE;EAChB,OAAOO,OAAO,KAAK,IAAI,EAAE;IACrBC,MAAM,CAACC,mBAAmB,CAACF,OAAO,CAAC,CAACG,OAAO,CAAC,UAAUC,YAAY,EAAE;MAChE,IAAIL,MAAM,CAACK,YAAY,CAAC,EACpB;MACJ,IAAIC,KAAK,GAAGL,OAAO,CAACI,YAAY,CAAC;MACjC,IAAIC,KAAK,EAAE;QACPN,MAAM,CAACK,YAAY,CAAC,GAAGE,MAAM,CAACD,KAAK,CAAC;MACxC;IACJ,CAAC,CAAC;IACFL,OAAO,GAAGC,MAAM,CAACM,cAAc,CAACP,OAAO,CAAC;EAC5C;EACA,OAAOD,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}