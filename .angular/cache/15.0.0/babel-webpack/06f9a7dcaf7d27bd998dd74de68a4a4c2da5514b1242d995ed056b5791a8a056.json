{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FilterStackFactory = exports.FilterStack = void 0;\nclass FilterStack {\n  constructor(filters) {\n    this.filters = filters;\n  }\n  sendMetadata(metadata) {\n    let result = metadata;\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMetadata(result);\n    }\n    return result;\n  }\n  receiveMetadata(metadata) {\n    let result = metadata;\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMetadata(result);\n    }\n    return result;\n  }\n  sendMessage(message) {\n    let result = message;\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMessage(result);\n    }\n    return result;\n  }\n  receiveMessage(message) {\n    let result = message;\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMessage(result);\n    }\n    return result;\n  }\n  receiveTrailers(status) {\n    let result = status;\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveTrailers(result);\n    }\n    return result;\n  }\n  refresh() {\n    for (const filter of this.filters) {\n      filter.refresh();\n    }\n  }\n  push(filters) {\n    this.filters.unshift(...filters);\n  }\n  getFilters() {\n    return this.filters;\n  }\n}\nexports.FilterStack = FilterStack;\nclass FilterStackFactory {\n  constructor(factories) {\n    this.factories = factories;\n  }\n  push(filterFactories) {\n    this.factories.unshift(...filterFactories);\n  }\n  createFilter(callStream) {\n    return new FilterStack(this.factories.map(factory => factory.createFilter(callStream)));\n  }\n}\nexports.FilterStackFactory = FilterStackFactory;\n//# sourceMappingURL=filter-stack.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}