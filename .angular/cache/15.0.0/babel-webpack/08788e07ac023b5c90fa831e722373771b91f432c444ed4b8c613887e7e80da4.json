{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'metrics';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function MetricsAPI() {}\n  /** Get the singleton instance of the Metrics API */\n  MetricsAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current global meter provider.\n   * Returns true if the meter provider was successfully registered, else false.\n   */\n  MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n    return registerGlobal(API_NAME, provider, DiagAPI.instance());\n  };\n  /**\n   * Returns the global meter provider.\n   */\n  MetricsAPI.prototype.getMeterProvider = function () {\n    return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n  };\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  MetricsAPI.prototype.getMeter = function (name, version, options) {\n    return this.getMeterProvider().getMeter(name, version, options);\n  };\n  /** Remove the global meter provider */\n  MetricsAPI.prototype.disable = function () {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  };\n  return MetricsAPI;\n}();\nexport { MetricsAPI };","map":{"version":3,"names":["NOOP_METER_PROVIDER","getGlobal","registerGlobal","unregisterGlobal","DiagAPI","API_NAME","MetricsAPI","getInstance","_instance","prototype","setGlobalMeterProvider","provider","instance","getMeterProvider","getMeter","name","version","options","disable"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/api/build/esm/api/metrics.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER_PROVIDER } from '../metrics/NoopMeterProvider';\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'metrics';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function MetricsAPI() {\n    }\n    /** Get the singleton instance of the Metrics API */\n    MetricsAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new MetricsAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global meter provider.\n     * Returns true if the meter provider was successfully registered, else false.\n     */\n    MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n        return registerGlobal(API_NAME, provider, DiagAPI.instance());\n    };\n    /**\n     * Returns the global meter provider.\n     */\n    MetricsAPI.prototype.getMeterProvider = function () {\n        return getGlobal(API_NAME) || NOOP_METER_PROVIDER;\n    };\n    /**\n     * Returns a meter from the global meter provider.\n     */\n    MetricsAPI.prototype.getMeter = function (name, version, options) {\n        return this.getMeterProvider().getMeter(name, version, options);\n    };\n    /** Remove the global meter provider */\n    MetricsAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    return MetricsAPI;\n}());\nexport { MetricsAPI };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,mBAAmB,QAAQ,8BAA8B;AAClE,SAASC,SAAS,EAAEC,cAAc,EAAEC,gBAAgB,QAAQ,0BAA0B;AACtF,SAASC,OAAO,QAAQ,QAAQ;AAChC,IAAIC,QAAQ,GAAG,SAAS;AACxB;AACA;AACA;AACA,IAAIC,UAAU,GAAG,aAAe,YAAY;EACxC;EACA,SAASA,UAAU,GAAG,CACtB;EACA;EACAA,UAAU,CAACC,WAAW,GAAG,YAAY;IACjC,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAG,IAAIF,UAAU,EAAE;IACrC;IACA,OAAO,IAAI,CAACE,SAAS;EACzB,CAAC;EACD;AACJ;AACA;AACA;EACIF,UAAU,CAACG,SAAS,CAACC,sBAAsB,GAAG,UAAUC,QAAQ,EAAE;IAC9D,OAAOT,cAAc,CAACG,QAAQ,EAAEM,QAAQ,EAAEP,OAAO,CAACQ,QAAQ,EAAE,CAAC;EACjE,CAAC;EACD;AACJ;AACA;EACIN,UAAU,CAACG,SAAS,CAACI,gBAAgB,GAAG,YAAY;IAChD,OAAOZ,SAAS,CAACI,QAAQ,CAAC,IAAIL,mBAAmB;EACrD,CAAC;EACD;AACJ;AACA;EACIM,UAAU,CAACG,SAAS,CAACK,QAAQ,GAAG,UAAUC,IAAI,EAAEC,OAAO,EAAEC,OAAO,EAAE;IAC9D,OAAO,IAAI,CAACJ,gBAAgB,EAAE,CAACC,QAAQ,CAACC,IAAI,EAAEC,OAAO,EAAEC,OAAO,CAAC;EACnE,CAAC;EACD;EACAX,UAAU,CAACG,SAAS,CAACS,OAAO,GAAG,YAAY;IACvCf,gBAAgB,CAACE,QAAQ,EAAED,OAAO,CAACQ,QAAQ,EAAE,CAAC;EAClD,CAAC;EACD,OAAON,UAAU;AACrB,CAAC,EAAG;AACJ,SAASA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}