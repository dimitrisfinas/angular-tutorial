{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nvar diag = DiagAPI.instance();\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(entries) {\n  if (entries === void 0) {\n    entries = {};\n  }\n  return new BaggageImpl(new Map(Object.entries(entries)));\n}\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(str) {\n  if (typeof str !== 'string') {\n    diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n    str = '';\n  }\n  return {\n    __TYPE__: baggageEntryMetadataSymbol,\n    toString: function () {\n      return str;\n    }\n  };\n}","map":{"version":3,"names":["DiagAPI","BaggageImpl","baggageEntryMetadataSymbol","diag","instance","createBaggage","entries","Map","Object","baggageEntryMetadataFromString","str","error","__TYPE__","toString"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/api/build/esm/baggage/utils.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagAPI } from '../api/diag';\nimport { BaggageImpl } from './internal/baggage-impl';\nimport { baggageEntryMetadataSymbol } from './internal/symbol';\nvar diag = DiagAPI.instance();\n/**\n * Create a new Baggage with optional entries\n *\n * @param entries An array of baggage entries the new baggage should contain\n */\nexport function createBaggage(entries) {\n    if (entries === void 0) { entries = {}; }\n    return new BaggageImpl(new Map(Object.entries(entries)));\n}\n/**\n * Create a serializable BaggageEntryMetadata object from a string.\n *\n * @param str string metadata. Format is currently not defined by the spec and has no special meaning.\n *\n */\nexport function baggageEntryMetadataFromString(str) {\n    if (typeof str !== 'string') {\n        diag.error(\"Cannot create baggage metadata from unknown type: \" + typeof str);\n        str = '';\n    }\n    return {\n        __TYPE__: baggageEntryMetadataSymbol,\n        toString: function () {\n            return str;\n        },\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,aAAa;AACrC,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,0BAA0B,QAAQ,mBAAmB;AAC9D,IAAIC,IAAI,GAAGH,OAAO,CAACI,QAAQ,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAa,CAACC,OAAO,EAAE;EACnC,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,CAAC,CAAC;EAAE;EACxC,OAAO,IAAIL,WAAW,CAAC,IAAIM,GAAG,CAACC,MAAM,CAACF,OAAO,CAACA,OAAO,CAAC,CAAC,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,8BAA8B,CAACC,GAAG,EAAE;EAChD,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzBP,IAAI,CAACQ,KAAK,CAAC,oDAAoD,GAAG,OAAOD,GAAG,CAAC;IAC7EA,GAAG,GAAG,EAAE;EACZ;EACA,OAAO;IACHE,QAAQ,EAAEV,0BAA0B;IACpCW,QAAQ,EAAE,YAAY;MAClB,OAAOH,GAAG;IACd;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}