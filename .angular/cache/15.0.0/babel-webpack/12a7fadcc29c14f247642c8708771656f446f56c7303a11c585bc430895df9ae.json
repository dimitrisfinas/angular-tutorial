{"ast":null,"code":"var SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n */\nvar RandomIdGenerator = /** @class */function () {\n  function RandomIdGenerator() {\n    /**\n     * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n     * characters corresponding to 128 bits.\n     */\n    this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n    /**\n     * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n     * characters corresponding to 64 bits.\n     */\n    this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n  }\n  return RandomIdGenerator;\n}();\nexport { RandomIdGenerator };\nvar SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes) {\n  return function generateId() {\n    for (var i = 0; i < bytes * 2; i++) {\n      SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n      // valid hex characters in the range 48-57 and 97-102\n      if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n        SHARED_CHAR_CODES_ARRAY[i] += 39;\n      }\n    }\n    return String.fromCharCode.apply(null, SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));\n  };\n}","map":{"version":3,"names":["SPAN_ID_BYTES","TRACE_ID_BYTES","RandomIdGenerator","generateTraceId","getIdGenerator","generateSpanId","SHARED_CHAR_CODES_ARRAY","Array","bytes","generateId","i","Math","floor","random","String","fromCharCode","apply","slice"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/core/build/esm/platform/browser/RandomIdGenerator.js"],"sourcesContent":["var SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\n/**\n * @deprecated Use the one defined in @opentelemetry/sdk-trace-base instead.\n */\nvar RandomIdGenerator = /** @class */ (function () {\n    function RandomIdGenerator() {\n        /**\n         * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n         * characters corresponding to 128 bits.\n         */\n        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n        /**\n         * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n         * characters corresponding to 64 bits.\n         */\n        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n    }\n    return RandomIdGenerator;\n}());\nexport { RandomIdGenerator };\nvar SHARED_CHAR_CODES_ARRAY = Array(32);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (var i = 0; i < bytes * 2; i++) {\n            SHARED_CHAR_CODES_ARRAY[i] = Math.floor(Math.random() * 16) + 48;\n            // valid hex characters in the range 48-57 and 97-102\n            if (SHARED_CHAR_CODES_ARRAY[i] >= 58) {\n                SHARED_CHAR_CODES_ARRAY[i] += 39;\n            }\n        }\n        return String.fromCharCode.apply(null, SHARED_CHAR_CODES_ARRAY.slice(0, bytes * 2));\n    };\n}\n"],"mappings":"AAAA,IAAIA,aAAa,GAAG,CAAC;AACrB,IAAIC,cAAc,GAAG,EAAE;AACvB;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG,aAAe,YAAY;EAC/C,SAASA,iBAAiB,GAAG;IACzB;AACR;AACA;AACA;IACQ,IAAI,CAACC,eAAe,GAAGC,cAAc,CAACH,cAAc,CAAC;IACrD;AACR;AACA;AACA;IACQ,IAAI,CAACI,cAAc,GAAGD,cAAc,CAACJ,aAAa,CAAC;EACvD;EACA,OAAOE,iBAAiB;AAC5B,CAAC,EAAG;AACJ,SAASA,iBAAiB;AAC1B,IAAII,uBAAuB,GAAGC,KAAK,CAAC,EAAE,CAAC;AACvC,SAASH,cAAc,CAACI,KAAK,EAAE;EAC3B,OAAO,SAASC,UAAU,GAAG;IACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,GAAG,CAAC,EAAEE,CAAC,EAAE,EAAE;MAChCJ,uBAAuB,CAACI,CAAC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE;MAChE;MACA,IAAIP,uBAAuB,CAACI,CAAC,CAAC,IAAI,EAAE,EAAE;QAClCJ,uBAAuB,CAACI,CAAC,CAAC,IAAI,EAAE;MACpC;IACJ;IACA,OAAOI,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAEV,uBAAuB,CAACW,KAAK,CAAC,CAAC,EAAET,KAAK,GAAG,CAAC,CAAC,CAAC;EACvF,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}