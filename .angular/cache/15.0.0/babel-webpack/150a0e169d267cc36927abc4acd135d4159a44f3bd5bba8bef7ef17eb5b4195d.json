{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_NUMBERS_KEYS = ['OTEL_BSP_EXPORT_TIMEOUT', 'OTEL_BSP_MAX_EXPORT_BATCH_SIZE', 'OTEL_BSP_MAX_QUEUE_SIZE', 'OTEL_BSP_SCHEDULE_DELAY', 'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT', 'OTEL_ATTRIBUTE_COUNT_LIMIT', 'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT', 'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT', 'OTEL_SPAN_EVENT_COUNT_LIMIT', 'OTEL_SPAN_LINK_COUNT_LIMIT', 'OTEL_EXPORTER_JAEGER_AGENT_PORT'];\nfunction isEnvVarANumber(key) {\n  return ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1;\n}\nvar ENVIRONMENT_LISTS_KEYS = ['OTEL_NO_PATCH_MODULES', 'OTEL_PROPAGATORS'];\nfunction isEnvVarAList(key) {\n  return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\nexport var DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\nexport var DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n/**\n * Default environment variables\n */\nexport var DEFAULT_ENVIRONMENT = {\n  CONTAINER_NAME: '',\n  ECS_CONTAINER_METADATA_URI_V4: '',\n  ECS_CONTAINER_METADATA_URI: '',\n  HOSTNAME: '',\n  KUBERNETES_SERVICE_HOST: '',\n  NAMESPACE: '',\n  OTEL_BSP_EXPORT_TIMEOUT: 30000,\n  OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n  OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n  OTEL_BSP_SCHEDULE_DELAY: 5000,\n  OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n  OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n  OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n  OTEL_EXPORTER_JAEGER_PASSWORD: '',\n  OTEL_EXPORTER_JAEGER_USER: '',\n  OTEL_EXPORTER_OTLP_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n  OTEL_EXPORTER_OTLP_HEADERS: '',\n  OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n  OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n  OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n  OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n  OTEL_NO_PATCH_MODULES: [],\n  OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n  OTEL_RESOURCE_ATTRIBUTES: '',\n  OTEL_SERVICE_NAME: '',\n  OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n  OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n  OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n  OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n  OTEL_TRACES_EXPORTER: 'none',\n  OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n  OTEL_TRACES_SAMPLER_ARG: '',\n  OTEL_EXPORTER_OTLP_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n  OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: ''\n};\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n  if (min === void 0) {\n    min = -Infinity;\n  }\n  if (max === void 0) {\n    max = Infinity;\n  }\n  if (typeof values[name] !== 'undefined') {\n    var value = Number(values[name]);\n    if (!isNaN(value)) {\n      if (value < min) {\n        environment[name] = min;\n      } else if (value > max) {\n        environment[name] = max;\n      } else {\n        environment[name] = value;\n      }\n    }\n  }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n  if (separator === void 0) {\n    separator = DEFAULT_LIST_SEPARATOR;\n  }\n  var givenValue = input[name];\n  if (typeof givenValue === 'string') {\n    output[name] = givenValue.split(separator).map(function (v) {\n      return v.trim();\n    });\n  }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n  ALL: DiagLogLevel.ALL,\n  VERBOSE: DiagLogLevel.VERBOSE,\n  DEBUG: DiagLogLevel.DEBUG,\n  INFO: DiagLogLevel.INFO,\n  WARN: DiagLogLevel.WARN,\n  ERROR: DiagLogLevel.ERROR,\n  NONE: DiagLogLevel.NONE\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n  var value = values[key];\n  if (typeof value === 'string') {\n    var theLevel = logLevelMap[value.toUpperCase()];\n    if (theLevel != null) {\n      environment[key] = theLevel;\n    }\n  }\n}\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values) {\n  var environment = {};\n  for (var env in DEFAULT_ENVIRONMENT) {\n    var key = env;\n    switch (key) {\n      case 'OTEL_LOG_LEVEL':\n        setLogLevelFromEnv(key, environment, values);\n        break;\n      default:\n        if (isEnvVarANumber(key)) {\n          parseNumber(key, environment, values);\n        } else if (isEnvVarAList(key)) {\n          parseStringList(key, environment, values);\n        } else {\n          var value = values[key];\n          if (typeof value !== 'undefined' && value !== null) {\n            environment[key] = String(value);\n          }\n        }\n    }\n  }\n  return environment;\n}","map":{"version":3,"names":["DiagLogLevel","TracesSamplerValues","DEFAULT_LIST_SEPARATOR","ENVIRONMENT_NUMBERS_KEYS","isEnvVarANumber","key","indexOf","ENVIRONMENT_LISTS_KEYS","isEnvVarAList","DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT","Infinity","DEFAULT_ATTRIBUTE_COUNT_LIMIT","DEFAULT_ENVIRONMENT","CONTAINER_NAME","ECS_CONTAINER_METADATA_URI_V4","ECS_CONTAINER_METADATA_URI","HOSTNAME","KUBERNETES_SERVICE_HOST","NAMESPACE","OTEL_BSP_EXPORT_TIMEOUT","OTEL_BSP_MAX_EXPORT_BATCH_SIZE","OTEL_BSP_MAX_QUEUE_SIZE","OTEL_BSP_SCHEDULE_DELAY","OTEL_EXPORTER_JAEGER_AGENT_HOST","OTEL_EXPORTER_JAEGER_AGENT_PORT","OTEL_EXPORTER_JAEGER_ENDPOINT","OTEL_EXPORTER_JAEGER_PASSWORD","OTEL_EXPORTER_JAEGER_USER","OTEL_EXPORTER_OTLP_ENDPOINT","OTEL_EXPORTER_OTLP_TRACES_ENDPOINT","OTEL_EXPORTER_OTLP_METRICS_ENDPOINT","OTEL_EXPORTER_OTLP_HEADERS","OTEL_EXPORTER_OTLP_TRACES_HEADERS","OTEL_EXPORTER_OTLP_METRICS_HEADERS","OTEL_EXPORTER_ZIPKIN_ENDPOINT","OTEL_LOG_LEVEL","INFO","OTEL_NO_PATCH_MODULES","OTEL_PROPAGATORS","OTEL_RESOURCE_ATTRIBUTES","OTEL_SERVICE_NAME","OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_EVENT_COUNT_LIMIT","OTEL_SPAN_LINK_COUNT_LIMIT","OTEL_TRACES_EXPORTER","OTEL_TRACES_SAMPLER","ParentBasedAlwaysOn","OTEL_TRACES_SAMPLER_ARG","OTEL_EXPORTER_OTLP_COMPRESSION","OTEL_EXPORTER_OTLP_TRACES_COMPRESSION","OTEL_EXPORTER_OTLP_METRICS_COMPRESSION","parseNumber","name","environment","values","min","max","value","Number","isNaN","parseStringList","output","input","separator","givenValue","split","map","v","trim","logLevelMap","ALL","VERBOSE","DEBUG","WARN","ERROR","NONE","setLogLevelFromEnv","theLevel","toUpperCase","parseEnvironment","env","String"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/core/build/esm/utils/environment.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_NUMBERS_KEYS = [\n    'OTEL_BSP_EXPORT_TIMEOUT',\n    'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BSP_MAX_QUEUE_SIZE',\n    'OTEL_BSP_SCHEDULE_DELAY',\n    'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_LINK_COUNT_LIMIT',\n    'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n];\nfunction isEnvVarANumber(key) {\n    return (ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_LISTS_KEYS = [\n    'OTEL_NO_PATCH_MODULES',\n    'OTEL_PROPAGATORS',\n];\nfunction isEnvVarAList(key) {\n    return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\nexport var DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\nexport var DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n/**\n * Default environment variables\n */\nexport var DEFAULT_ENVIRONMENT = {\n    CONTAINER_NAME: '',\n    ECS_CONTAINER_METADATA_URI_V4: '',\n    ECS_CONTAINER_METADATA_URI: '',\n    HOSTNAME: '',\n    KUBERNETES_SERVICE_HOST: '',\n    NAMESPACE: '',\n    OTEL_BSP_EXPORT_TIMEOUT: 30000,\n    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BSP_SCHEDULE_DELAY: 5000,\n    OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n    OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n    OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n    OTEL_EXPORTER_JAEGER_PASSWORD: '',\n    OTEL_EXPORTER_JAEGER_USER: '',\n    OTEL_EXPORTER_OTLP_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n    OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n    OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n    OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n    OTEL_NO_PATCH_MODULES: [],\n    OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n    OTEL_RESOURCE_ATTRIBUTES: '',\n    OTEL_SERVICE_NAME: '',\n    OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n    OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n    OTEL_TRACES_EXPORTER: 'none',\n    OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n    OTEL_TRACES_SAMPLER_ARG: '',\n    OTEL_EXPORTER_OTLP_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: ''\n};\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n    if (min === void 0) { min = -Infinity; }\n    if (max === void 0) { max = Infinity; }\n    if (typeof values[name] !== 'undefined') {\n        var value = Number(values[name]);\n        if (!isNaN(value)) {\n            if (value < min) {\n                environment[name] = min;\n            }\n            else if (value > max) {\n                environment[name] = max;\n            }\n            else {\n                environment[name] = value;\n            }\n        }\n    }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n    if (separator === void 0) { separator = DEFAULT_LIST_SEPARATOR; }\n    var givenValue = input[name];\n    if (typeof givenValue === 'string') {\n        output[name] = givenValue.split(separator).map(function (v) { return v.trim(); });\n    }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n    ALL: DiagLogLevel.ALL,\n    VERBOSE: DiagLogLevel.VERBOSE,\n    DEBUG: DiagLogLevel.DEBUG,\n    INFO: DiagLogLevel.INFO,\n    WARN: DiagLogLevel.WARN,\n    ERROR: DiagLogLevel.ERROR,\n    NONE: DiagLogLevel.NONE,\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n    var value = values[key];\n    if (typeof value === 'string') {\n        var theLevel = logLevelMap[value.toUpperCase()];\n        if (theLevel != null) {\n            environment[key] = theLevel;\n        }\n    }\n}\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values) {\n    var environment = {};\n    for (var env in DEFAULT_ENVIRONMENT) {\n        var key = env;\n        switch (key) {\n            case 'OTEL_LOG_LEVEL':\n                setLogLevelFromEnv(key, environment, values);\n                break;\n            default:\n                if (isEnvVarANumber(key)) {\n                    parseNumber(key, environment, values);\n                }\n                else if (isEnvVarAList(key)) {\n                    parseStringList(key, environment, values);\n                }\n                else {\n                    var value = values[key];\n                    if (typeof value !== 'undefined' && value !== null) {\n                        environment[key] = String(value);\n                    }\n                }\n        }\n    }\n    return environment;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}