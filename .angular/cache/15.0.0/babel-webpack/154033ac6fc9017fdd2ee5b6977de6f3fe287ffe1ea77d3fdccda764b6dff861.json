{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PatternPredicate } from './Predicate';\nimport { AttributesProcessor, FilteringAttributesProcessor } from './AttributesProcessor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { Aggregation } from './Aggregation';\nfunction isSelectorNotProvided(options) {\n  return options.instrumentName == null && options.instrumentType == null && options.meterName == null && options.meterVersion == null && options.meterSchemaUrl == null;\n}\n/**\n * Can be passed to a {@link MeterProvider} to select instruments and alter their metric stream.\n */\nvar View = /** @class */function () {\n  /**\n   * Create a new {@link View} instance.\n   *\n   * Parameters can be categorized as two types:\n   *  Instrument selection criteria: Used to describe the instrument(s) this view will be applied to.\n   *  Will be treated as additive (the Instrument has to meet all the provided criteria to be selected).\n   *\n   *  Metric stream altering: Alter the metric stream of instruments selected by instrument selection criteria.\n   *\n   * @param viewOptions {@link ViewOptions} for altering the metric stream and instrument selection.\n   * @param viewOptions.name\n   * Alters the metric stream:\n   *  This will be used as the name of the metrics stream.\n   *  If not provided, the original Instrument name will be used.\n   * @param viewOptions.description\n   * Alters the metric stream:\n   *  This will be used as the description of the metrics stream.\n   *  If not provided, the original Instrument description will be used by default.\n   * @param viewOptions.attributeKeys\n   * Alters the metric stream:\n   *  If provided, the attributes that are not in the list will be ignored.\n   *  If not provided, all attribute keys will be used by default.\n   * @param viewOptions.aggregation\n   * Alters the metric stream:\n   *  Alters the {@link Aggregation} of the metric stream.\n   * @param viewOptions.instrumentName\n   * Instrument selection criteria:\n   *  Original name of the Instrument(s) with wildcard support.\n   * @param viewOptions.instrumentType\n   * Instrument selection criteria:\n   *  The original type of the Instrument(s).\n   * @param viewOptions.meterName\n   * Instrument selection criteria:\n   *  The name of the Meter. No wildcard support, name must match the meter exactly.\n   * @param viewOptions.meterVersion\n   * Instrument selection criteria:\n   *  The version of the Meter. No wildcard support, version must match exactly.\n   * @param viewOptions.meterSchemaUrl\n   * Instrument selection criteria:\n   *  The schema URL of the Meter. No wildcard support, schema URL must match exactly.\n   *\n   * @example\n   * // Create a view that changes the Instrument 'my.instrument' to use to an\n   * // ExplicitBucketHistogramAggregation with the boundaries [20, 30, 40]\n   * new View({\n   *   aggregation: new ExplicitBucketHistogramAggregation([20, 30, 40]),\n   *   instrumentName: 'my.instrument'\n   * })\n   */\n  function View(viewOptions) {\n    var _a;\n    // If no criteria is provided, the SDK SHOULD treat it as an error.\n    // It is recommended that the SDK implementations fail fast.\n    if (isSelectorNotProvided(viewOptions)) {\n      throw new Error('Cannot create view with no selector arguments supplied');\n    }\n    // the SDK SHOULD NOT allow Views with a specified name to be declared with instrument selectors that\n    // may select more than one instrument (e.g. wild card instrument name) in the same Meter.\n    if (viewOptions.name != null && ((viewOptions === null || viewOptions === void 0 ? void 0 : viewOptions.instrumentName) == null || PatternPredicate.hasWildcard(viewOptions.instrumentName))) {\n      throw new Error('Views with a specified name must be declared with an instrument selector that selects at most one instrument per meter.');\n    }\n    // Create AttributesProcessor if attributeKeys are defined set.\n    if (viewOptions.attributeKeys != null) {\n      this.attributesProcessor = new FilteringAttributesProcessor(viewOptions.attributeKeys);\n    } else {\n      this.attributesProcessor = AttributesProcessor.Noop();\n    }\n    this.name = viewOptions.name;\n    this.description = viewOptions.description;\n    this.aggregation = (_a = viewOptions.aggregation) !== null && _a !== void 0 ? _a : Aggregation.Default();\n    this.instrumentSelector = new InstrumentSelector({\n      name: viewOptions.instrumentName,\n      type: viewOptions.instrumentType\n    });\n    this.meterSelector = new MeterSelector({\n      name: viewOptions.meterName,\n      version: viewOptions.meterVersion,\n      schemaUrl: viewOptions.meterSchemaUrl\n    });\n  }\n  return View;\n}();\nexport { View };","map":{"version":3,"names":["PatternPredicate","AttributesProcessor","FilteringAttributesProcessor","InstrumentSelector","MeterSelector","Aggregation","isSelectorNotProvided","options","instrumentName","instrumentType","meterName","meterVersion","meterSchemaUrl","View","viewOptions","_a","Error","name","hasWildcard","attributeKeys","attributesProcessor","Noop","description","aggregation","Default","instrumentSelector","type","meterSelector","version","schemaUrl"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/sdk-metrics/build/esm/view/View.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { PatternPredicate } from './Predicate';\nimport { AttributesProcessor, FilteringAttributesProcessor } from './AttributesProcessor';\nimport { InstrumentSelector } from './InstrumentSelector';\nimport { MeterSelector } from './MeterSelector';\nimport { Aggregation } from './Aggregation';\nfunction isSelectorNotProvided(options) {\n    return (options.instrumentName == null &&\n        options.instrumentType == null &&\n        options.meterName == null &&\n        options.meterVersion == null &&\n        options.meterSchemaUrl == null);\n}\n/**\n * Can be passed to a {@link MeterProvider} to select instruments and alter their metric stream.\n */\nvar View = /** @class */ (function () {\n    /**\n     * Create a new {@link View} instance.\n     *\n     * Parameters can be categorized as two types:\n     *  Instrument selection criteria: Used to describe the instrument(s) this view will be applied to.\n     *  Will be treated as additive (the Instrument has to meet all the provided criteria to be selected).\n     *\n     *  Metric stream altering: Alter the metric stream of instruments selected by instrument selection criteria.\n     *\n     * @param viewOptions {@link ViewOptions} for altering the metric stream and instrument selection.\n     * @param viewOptions.name\n     * Alters the metric stream:\n     *  This will be used as the name of the metrics stream.\n     *  If not provided, the original Instrument name will be used.\n     * @param viewOptions.description\n     * Alters the metric stream:\n     *  This will be used as the description of the metrics stream.\n     *  If not provided, the original Instrument description will be used by default.\n     * @param viewOptions.attributeKeys\n     * Alters the metric stream:\n     *  If provided, the attributes that are not in the list will be ignored.\n     *  If not provided, all attribute keys will be used by default.\n     * @param viewOptions.aggregation\n     * Alters the metric stream:\n     *  Alters the {@link Aggregation} of the metric stream.\n     * @param viewOptions.instrumentName\n     * Instrument selection criteria:\n     *  Original name of the Instrument(s) with wildcard support.\n     * @param viewOptions.instrumentType\n     * Instrument selection criteria:\n     *  The original type of the Instrument(s).\n     * @param viewOptions.meterName\n     * Instrument selection criteria:\n     *  The name of the Meter. No wildcard support, name must match the meter exactly.\n     * @param viewOptions.meterVersion\n     * Instrument selection criteria:\n     *  The version of the Meter. No wildcard support, version must match exactly.\n     * @param viewOptions.meterSchemaUrl\n     * Instrument selection criteria:\n     *  The schema URL of the Meter. No wildcard support, schema URL must match exactly.\n     *\n     * @example\n     * // Create a view that changes the Instrument 'my.instrument' to use to an\n     * // ExplicitBucketHistogramAggregation with the boundaries [20, 30, 40]\n     * new View({\n     *   aggregation: new ExplicitBucketHistogramAggregation([20, 30, 40]),\n     *   instrumentName: 'my.instrument'\n     * })\n     */\n    function View(viewOptions) {\n        var _a;\n        // If no criteria is provided, the SDK SHOULD treat it as an error.\n        // It is recommended that the SDK implementations fail fast.\n        if (isSelectorNotProvided(viewOptions)) {\n            throw new Error('Cannot create view with no selector arguments supplied');\n        }\n        // the SDK SHOULD NOT allow Views with a specified name to be declared with instrument selectors that\n        // may select more than one instrument (e.g. wild card instrument name) in the same Meter.\n        if (viewOptions.name != null &&\n            ((viewOptions === null || viewOptions === void 0 ? void 0 : viewOptions.instrumentName) == null ||\n                PatternPredicate.hasWildcard(viewOptions.instrumentName))) {\n            throw new Error('Views with a specified name must be declared with an instrument selector that selects at most one instrument per meter.');\n        }\n        // Create AttributesProcessor if attributeKeys are defined set.\n        if (viewOptions.attributeKeys != null) {\n            this.attributesProcessor = new FilteringAttributesProcessor(viewOptions.attributeKeys);\n        }\n        else {\n            this.attributesProcessor = AttributesProcessor.Noop();\n        }\n        this.name = viewOptions.name;\n        this.description = viewOptions.description;\n        this.aggregation = (_a = viewOptions.aggregation) !== null && _a !== void 0 ? _a : Aggregation.Default();\n        this.instrumentSelector = new InstrumentSelector({\n            name: viewOptions.instrumentName,\n            type: viewOptions.instrumentType,\n        });\n        this.meterSelector = new MeterSelector({\n            name: viewOptions.meterName,\n            version: viewOptions.meterVersion,\n            schemaUrl: viewOptions.meterSchemaUrl\n        });\n    }\n    return View;\n}());\nexport { View };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAgB,QAAQ,aAAa;AAC9C,SAASC,mBAAmB,EAAEC,4BAA4B,QAAQ,uBAAuB;AACzF,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,qBAAqB,CAACC,OAAO,EAAE;EACpC,OAAQA,OAAO,CAACC,cAAc,IAAI,IAAI,IAClCD,OAAO,CAACE,cAAc,IAAI,IAAI,IAC9BF,OAAO,CAACG,SAAS,IAAI,IAAI,IACzBH,OAAO,CAACI,YAAY,IAAI,IAAI,IAC5BJ,OAAO,CAACK,cAAc,IAAI,IAAI;AACtC;AACA;AACA;AACA;AACA,IAAIC,IAAI,GAAG,aAAe,YAAY;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,IAAI,CAACC,WAAW,EAAE;IACvB,IAAIC,EAAE;IACN;IACA;IACA,IAAIT,qBAAqB,CAACQ,WAAW,CAAC,EAAE;MACpC,MAAM,IAAIE,KAAK,CAAC,wDAAwD,CAAC;IAC7E;IACA;IACA;IACA,IAAIF,WAAW,CAACG,IAAI,IAAI,IAAI,KACvB,CAACH,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACN,cAAc,KAAK,IAAI,IAC3FR,gBAAgB,CAACkB,WAAW,CAACJ,WAAW,CAACN,cAAc,CAAC,CAAC,EAAE;MAC/D,MAAM,IAAIQ,KAAK,CAAC,yHAAyH,CAAC;IAC9I;IACA;IACA,IAAIF,WAAW,CAACK,aAAa,IAAI,IAAI,EAAE;MACnC,IAAI,CAACC,mBAAmB,GAAG,IAAIlB,4BAA4B,CAACY,WAAW,CAACK,aAAa,CAAC;IAC1F,CAAC,MACI;MACD,IAAI,CAACC,mBAAmB,GAAGnB,mBAAmB,CAACoB,IAAI,EAAE;IACzD;IACA,IAAI,CAACJ,IAAI,GAAGH,WAAW,CAACG,IAAI;IAC5B,IAAI,CAACK,WAAW,GAAGR,WAAW,CAACQ,WAAW;IAC1C,IAAI,CAACC,WAAW,GAAG,CAACR,EAAE,GAAGD,WAAW,CAACS,WAAW,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGV,WAAW,CAACmB,OAAO,EAAE;IACxG,IAAI,CAACC,kBAAkB,GAAG,IAAItB,kBAAkB,CAAC;MAC7Cc,IAAI,EAAEH,WAAW,CAACN,cAAc;MAChCkB,IAAI,EAAEZ,WAAW,CAACL;IACtB,CAAC,CAAC;IACF,IAAI,CAACkB,aAAa,GAAG,IAAIvB,aAAa,CAAC;MACnCa,IAAI,EAAEH,WAAW,CAACJ,SAAS;MAC3BkB,OAAO,EAAEd,WAAW,CAACH,YAAY;MACjCkB,SAAS,EAAEf,WAAW,CAACF;IAC3B,CAAC,CAAC;EACN;EACA,OAAOC,IAAI;AACf,CAAC,EAAG;AACJ,SAASA,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}