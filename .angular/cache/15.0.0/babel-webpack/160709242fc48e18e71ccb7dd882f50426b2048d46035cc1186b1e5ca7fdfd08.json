{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _globalThis } from '../platform';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\nvar major = VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = _globalThis;\nexport function registerGlobal(type, instance, diag, allowOverride) {\n  var _a;\n  if (allowOverride === void 0) {\n    allowOverride = false;\n  }\n  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n    version: VERSION\n  };\n  if (!allowOverride && api[type]) {\n    // already registered an API of this type\n    var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n    diag.error(err.stack || err.message);\n    return false;\n  }\n  if (api.version !== VERSION) {\n    // All registered APIs must be of the same version exactly\n    var err = new Error('@opentelemetry/api: All API registration versions must match');\n    diag.error(err.stack || err.message);\n    return false;\n  }\n  api[type] = instance;\n  diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + VERSION + \".\");\n  return true;\n}\nexport function getGlobal(type) {\n  var _a, _b;\n  var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n  if (!globalVersion || !isCompatible(globalVersion)) {\n    return;\n  }\n  return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nexport function unregisterGlobal(type, diag) {\n  diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + VERSION + \".\");\n  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n  if (api) {\n    delete api[type];\n  }\n}","map":{"version":3,"names":["_globalThis","VERSION","isCompatible","major","split","GLOBAL_OPENTELEMETRY_API_KEY","Symbol","for","_global","registerGlobal","type","instance","diag","allowOverride","_a","api","version","err","Error","error","stack","message","debug","getGlobal","_b","globalVersion","unregisterGlobal"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/api/build/esm/internal/global-utils.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _globalThis } from '../platform';\nimport { VERSION } from '../version';\nimport { isCompatible } from './semver';\nvar major = VERSION.split('.')[0];\nvar GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for(\"opentelemetry.js.api.\" + major);\nvar _global = _globalThis;\nexport function registerGlobal(type, instance, diag, allowOverride) {\n    var _a;\n    if (allowOverride === void 0) { allowOverride = false; }\n    var api = (_global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {\n        version: VERSION,\n    });\n    if (!allowOverride && api[type]) {\n        // already registered an API of this type\n        var err = new Error(\"@opentelemetry/api: Attempted duplicate registration of API: \" + type);\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    if (api.version !== VERSION) {\n        // All registered APIs must be of the same version exactly\n        var err = new Error('@opentelemetry/api: All API registration versions must match');\n        diag.error(err.stack || err.message);\n        return false;\n    }\n    api[type] = instance;\n    diag.debug(\"@opentelemetry/api: Registered a global for \" + type + \" v\" + VERSION + \".\");\n    return true;\n}\nexport function getGlobal(type) {\n    var _a, _b;\n    var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;\n    if (!globalVersion || !isCompatible(globalVersion)) {\n        return;\n    }\n    return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];\n}\nexport function unregisterGlobal(type, diag) {\n    diag.debug(\"@opentelemetry/api: Unregistering a global for \" + type + \" v\" + VERSION + \".\");\n    var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];\n    if (api) {\n        delete api[type];\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,OAAO,QAAQ,YAAY;AACpC,SAASC,YAAY,QAAQ,UAAU;AACvC,IAAIC,KAAK,GAAGF,OAAO,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACjC,IAAIC,4BAA4B,GAAGC,MAAM,CAACC,GAAG,CAAC,uBAAuB,GAAGJ,KAAK,CAAC;AAC9E,IAAIK,OAAO,GAAGR,WAAW;AACzB,OAAO,SAASS,cAAc,CAACC,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,aAAa,EAAE;EAChE,IAAIC,EAAE;EACN,IAAID,aAAa,KAAK,KAAK,CAAC,EAAE;IAAEA,aAAa,GAAG,KAAK;EAAE;EACvD,IAAIE,GAAG,GAAIP,OAAO,CAACH,4BAA4B,CAAC,GAAG,CAACS,EAAE,GAAGN,OAAO,CAACH,4BAA4B,CAAC,MAAM,IAAI,IAAIS,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG;IAC7HE,OAAO,EAAEf;EACb,CAAE;EACF,IAAI,CAACY,aAAa,IAAIE,GAAG,CAACL,IAAI,CAAC,EAAE;IAC7B;IACA,IAAIO,GAAG,GAAG,IAAIC,KAAK,CAAC,+DAA+D,GAAGR,IAAI,CAAC;IAC3FE,IAAI,CAACO,KAAK,CAACF,GAAG,CAACG,KAAK,IAAIH,GAAG,CAACI,OAAO,CAAC;IACpC,OAAO,KAAK;EAChB;EACA,IAAIN,GAAG,CAACC,OAAO,KAAKf,OAAO,EAAE;IACzB;IACA,IAAIgB,GAAG,GAAG,IAAIC,KAAK,CAAC,8DAA8D,CAAC;IACnFN,IAAI,CAACO,KAAK,CAACF,GAAG,CAACG,KAAK,IAAIH,GAAG,CAACI,OAAO,CAAC;IACpC,OAAO,KAAK;EAChB;EACAN,GAAG,CAACL,IAAI,CAAC,GAAGC,QAAQ;EACpBC,IAAI,CAACU,KAAK,CAAC,8CAA8C,GAAGZ,IAAI,GAAG,IAAI,GAAGT,OAAO,GAAG,GAAG,CAAC;EACxF,OAAO,IAAI;AACf;AACA,OAAO,SAASsB,SAAS,CAACb,IAAI,EAAE;EAC5B,IAAII,EAAE,EAAEU,EAAE;EACV,IAAIC,aAAa,GAAG,CAACX,EAAE,GAAGN,OAAO,CAACH,4BAA4B,CAAC,MAAM,IAAI,IAAIS,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,OAAO;EAChH,IAAI,CAACS,aAAa,IAAI,CAACvB,YAAY,CAACuB,aAAa,CAAC,EAAE;IAChD;EACJ;EACA,OAAO,CAACD,EAAE,GAAGhB,OAAO,CAACH,4BAA4B,CAAC,MAAM,IAAI,IAAImB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACd,IAAI,CAAC;AACrG;AACA,OAAO,SAASgB,gBAAgB,CAAChB,IAAI,EAAEE,IAAI,EAAE;EACzCA,IAAI,CAACU,KAAK,CAAC,iDAAiD,GAAGZ,IAAI,GAAG,IAAI,GAAGT,OAAO,GAAG,GAAG,CAAC;EAC3F,IAAIc,GAAG,GAAGP,OAAO,CAACH,4BAA4B,CAAC;EAC/C,IAAIU,GAAG,EAAE;IACL,OAAOA,GAAG,CAACL,IAAI,CAAC;EACpB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}