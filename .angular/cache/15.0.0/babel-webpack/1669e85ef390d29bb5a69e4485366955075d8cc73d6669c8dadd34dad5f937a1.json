{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n  return to;\n};\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function ContextAPI() {}\n  /** Get the singleton instance of the Context API */\n  ContextAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new ContextAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current context manager.\n   *\n   * @returns true if the context manager was successfully registered, else false\n   */\n  ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n    return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n  };\n  /**\n   * Get the currently active context\n   */\n  ContextAPI.prototype.active = function () {\n    return this._getContextManager().active();\n  };\n  /**\n   * Execute a function with an active context\n   *\n   * @param context context to be active during function execution\n   * @param fn function to execute in a context\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  ContextAPI.prototype.with = function (context, fn, thisArg) {\n    var _a;\n    var args = [];\n    for (var _i = 3; _i < arguments.length; _i++) {\n      args[_i - 3] = arguments[_i];\n    }\n    return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], args));\n  };\n  /**\n   * Bind a context to a target function or event emitter\n   *\n   * @param context context to bind to the event emitter or function. Defaults to the currently active context\n   * @param target function or event emitter to bind\n   */\n  ContextAPI.prototype.bind = function (context, target) {\n    return this._getContextManager().bind(context, target);\n  };\n  ContextAPI.prototype._getContextManager = function () {\n    return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n  };\n  /** Disable and remove the global context manager */\n  ContextAPI.prototype.disable = function () {\n    this._getContextManager().disable();\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  };\n  return ContextAPI;\n}();\nexport { ContextAPI };","map":{"version":3,"names":["__spreadArray","to","from","i","il","length","j","NoopContextManager","getGlobal","registerGlobal","unregisterGlobal","DiagAPI","API_NAME","NOOP_CONTEXT_MANAGER","ContextAPI","getInstance","_instance","prototype","setGlobalContextManager","contextManager","instance","active","_getContextManager","with","context","fn","thisArg","_a","args","_i","arguments","apply","bind","target","disable"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/api/build/esm/api/context.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nimport { NoopContextManager } from '../context/NoopContextManager';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'context';\nvar NOOP_CONTEXT_MANAGER = new NoopContextManager();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Context API\n */\nvar ContextAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function ContextAPI() {\n    }\n    /** Get the singleton instance of the Context API */\n    ContextAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new ContextAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current context manager.\n     *\n     * @returns true if the context manager was successfully registered, else false\n     */\n    ContextAPI.prototype.setGlobalContextManager = function (contextManager) {\n        return registerGlobal(API_NAME, contextManager, DiagAPI.instance());\n    };\n    /**\n     * Get the currently active context\n     */\n    ContextAPI.prototype.active = function () {\n        return this._getContextManager().active();\n    };\n    /**\n     * Execute a function with an active context\n     *\n     * @param context context to be active during function execution\n     * @param fn function to execute in a context\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    ContextAPI.prototype.with = function (context, fn, thisArg) {\n        var _a;\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        return (_a = this._getContextManager()).with.apply(_a, __spreadArray([context, fn, thisArg], args));\n    };\n    /**\n     * Bind a context to a target function or event emitter\n     *\n     * @param context context to bind to the event emitter or function. Defaults to the currently active context\n     * @param target function or event emitter to bind\n     */\n    ContextAPI.prototype.bind = function (context, target) {\n        return this._getContextManager().bind(context, target);\n    };\n    ContextAPI.prototype._getContextManager = function () {\n        return getGlobal(API_NAME) || NOOP_CONTEXT_MANAGER;\n    };\n    /** Disable and remove the global context manager */\n    ContextAPI.prototype.disable = function () {\n        this._getContextManager().disable();\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    return ContextAPI;\n}());\nexport { ContextAPI };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}