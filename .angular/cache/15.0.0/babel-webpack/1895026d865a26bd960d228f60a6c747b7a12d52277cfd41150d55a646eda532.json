{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { getGlobal } from '../internal/global-utils';\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */function () {\n  function DiagComponentLogger(props) {\n    this._namespace = props.namespace || 'DiagComponentLogger';\n  }\n  DiagComponentLogger.prototype.debug = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('debug', this._namespace, args);\n  };\n  DiagComponentLogger.prototype.error = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('error', this._namespace, args);\n  };\n  DiagComponentLogger.prototype.info = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('info', this._namespace, args);\n  };\n  DiagComponentLogger.prototype.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('warn', this._namespace, args);\n  };\n  DiagComponentLogger.prototype.verbose = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return logProxy('verbose', this._namespace, args);\n  };\n  return DiagComponentLogger;\n}();\nexport { DiagComponentLogger };\nfunction logProxy(funcName, namespace, args) {\n  var logger = getGlobal('diag');\n  // shortcut if logger not set\n  if (!logger) {\n    return;\n  }\n  args.unshift(namespace);\n  return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n}","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","__spreadArray","to","from","pack","arguments","length","l","Array","prototype","slice","concat","getGlobal","DiagComponentLogger","props","_namespace","namespace","debug","args","_i","logProxy","info","warn","verbose","funcName","logger","unshift","apply"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { getGlobal } from '../internal/global-utils';\n/**\n * Component Logger which is meant to be used as part of any component which\n * will add automatically additional namespace in front of the log message.\n * It will then forward all message to global diag logger\n * @example\n * const cLogger = diag.createComponentLogger({ namespace: '@opentelemetry/instrumentation-http' });\n * cLogger.debug('test');\n * // @opentelemetry/instrumentation-http test\n */\nvar DiagComponentLogger = /** @class */ (function () {\n    function DiagComponentLogger(props) {\n        this._namespace = props.namespace || 'DiagComponentLogger';\n    }\n    DiagComponentLogger.prototype.debug = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('debug', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.error = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('error', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.info = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('info', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.warn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('warn', this._namespace, args);\n    };\n    DiagComponentLogger.prototype.verbose = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return logProxy('verbose', this._namespace, args);\n    };\n    return DiagComponentLogger;\n}());\nexport { DiagComponentLogger };\nfunction logProxy(funcName, namespace, args) {\n    var logger = getGlobal('diag');\n    // shortcut if logger not set\n    if (!logger) {\n        return;\n    }\n    args.unshift(namespace);\n    return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}