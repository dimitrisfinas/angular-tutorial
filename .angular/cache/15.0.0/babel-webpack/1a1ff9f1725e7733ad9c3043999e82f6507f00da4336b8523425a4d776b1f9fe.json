{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = exports.PickFirstLoadBalancer = exports.PickFirstLoadBalancingConfig = void 0;\nconst load_balancer_1 = require(\"./load-balancer\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst picker_1 = require(\"./picker\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst logging = require(\"./logging\");\nconst constants_1 = require(\"./constants\");\nconst TRACER_NAME = 'pick_first';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = 'pick_first';\n/**\n * Delay after starting a connection on a subchannel before starting a\n * connection on the next subchannel in the list, for Happy Eyeballs algorithm.\n */\nconst CONNECTION_DELAY_INTERVAL_MS = 250;\nclass PickFirstLoadBalancingConfig {\n  getLoadBalancerName() {\n    return TYPE_NAME;\n  }\n  constructor() {}\n  toJsonObject() {\n    return {\n      [TYPE_NAME]: {}\n    };\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static createFromJson(obj) {\n    return new PickFirstLoadBalancingConfig();\n  }\n}\nexports.PickFirstLoadBalancingConfig = PickFirstLoadBalancingConfig;\n/**\n * Picker for a `PickFirstLoadBalancer` in the READY state. Always returns the\n * picked subchannel.\n */\nclass PickFirstPicker {\n  constructor(subchannel) {\n    this.subchannel = subchannel;\n  }\n  pick(pickArgs) {\n    return {\n      pickResultType: picker_1.PickResultType.COMPLETE,\n      subchannel: this.subchannel,\n      status: null,\n      extraFilterFactories: [],\n      onCallStarted: null\n    };\n  }\n}\nclass PickFirstLoadBalancer {\n  /**\n   * Load balancer that attempts to connect to each backend in the address list\n   * in order, and picks the first one that connects, using it for every\n   * request.\n   * @param channelControlHelper `ChannelControlHelper` instance provided by\n   *     this load balancer's owner.\n   */\n  constructor(channelControlHelper) {\n    this.channelControlHelper = channelControlHelper;\n    /**\n     * The list of backend addresses most recently passed to `updateAddressList`.\n     */\n    this.latestAddressList = [];\n    /**\n     * The list of subchannels this load balancer is currently attempting to\n     * connect to.\n     */\n    this.subchannels = [];\n    /**\n     * The current connectivity state of the load balancer.\n     */\n    this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n    /**\n     * The index within the `subchannels` array of the subchannel with the most\n     * recently started connection attempt.\n     */\n    this.currentSubchannelIndex = 0;\n    /**\n     * The currently picked subchannel used for making calls. Populated if\n     * and only if the load balancer's current state is READY. In that case,\n     * the subchannel's current state is also READY.\n     */\n    this.currentPick = null;\n    this.triedAllSubchannels = false;\n    this.subchannelStateCounts = {\n      [connectivity_state_1.ConnectivityState.CONNECTING]: 0,\n      [connectivity_state_1.ConnectivityState.IDLE]: 0,\n      [connectivity_state_1.ConnectivityState.READY]: 0,\n      [connectivity_state_1.ConnectivityState.SHUTDOWN]: 0,\n      [connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE]: 0\n    };\n    this.subchannelStateListener = (subchannel, previousState, newState) => {\n      this.subchannelStateCounts[previousState] -= 1;\n      this.subchannelStateCounts[newState] += 1;\n      /* If the subchannel we most recently attempted to start connecting\n       * to goes into TRANSIENT_FAILURE, immediately try to start\n       * connecting to the next one instead of waiting for the connection\n       * delay timer. */\n      if (subchannel === this.subchannels[this.currentSubchannelIndex] && newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n        this.startNextSubchannelConnecting();\n      }\n      if (newState === connectivity_state_1.ConnectivityState.READY) {\n        this.pickSubchannel(subchannel);\n        return;\n      } else {\n        if (this.triedAllSubchannels && this.subchannelStateCounts[connectivity_state_1.ConnectivityState.IDLE] === this.subchannels.length) {\n          /* If all of the subchannels are IDLE we should go back to a\n           * basic IDLE state where there is no subchannel list to avoid\n           * holding unused resources. We do not reset triedAllSubchannels\n           * because that is a reminder to request reresolution the next time\n           * this LB policy needs to connect. */\n          this.resetSubchannelList(false);\n          this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\n          return;\n        }\n        if (this.currentPick === null) {\n          if (this.triedAllSubchannels) {\n            let newLBState;\n            if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.CONNECTING] > 0) {\n              newLBState = connectivity_state_1.ConnectivityState.CONNECTING;\n            } else if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE] > 0) {\n              newLBState = connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE;\n            } else {\n              newLBState = connectivity_state_1.ConnectivityState.IDLE;\n            }\n            if (newLBState !== this.currentState) {\n              if (newLBState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n                this.updateState(newLBState, new picker_1.UnavailablePicker());\n              } else {\n                this.updateState(newLBState, new picker_1.QueuePicker(this));\n              }\n            }\n          } else {\n            this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n          }\n        }\n      }\n    };\n    this.pickedSubchannelStateListener = (subchannel, previousState, newState) => {\n      if (newState !== connectivity_state_1.ConnectivityState.READY) {\n        this.currentPick = null;\n        subchannel.unref();\n        subchannel.removeConnectivityStateListener(this.pickedSubchannelStateListener);\n        this.channelControlHelper.removeChannelzChild(subchannel.getChannelzRef());\n        if (this.subchannels.length > 0) {\n          if (this.triedAllSubchannels) {\n            let newLBState;\n            if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.CONNECTING] > 0) {\n              newLBState = connectivity_state_1.ConnectivityState.CONNECTING;\n            } else if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE] > 0) {\n              newLBState = connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE;\n            } else {\n              newLBState = connectivity_state_1.ConnectivityState.IDLE;\n            }\n            if (newLBState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n              this.updateState(newLBState, new picker_1.UnavailablePicker());\n            } else {\n              this.updateState(newLBState, new picker_1.QueuePicker(this));\n            }\n          } else {\n            this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n          }\n        } else {\n          /* We don't need to backoff here because this only happens if a\n           * subchannel successfully connects then disconnects, so it will not\n           * create a loop of attempting to connect to an unreachable backend\n           */\n          this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\n        }\n      }\n    };\n    this.connectionDelayTimeout = setTimeout(() => {}, 0);\n    clearTimeout(this.connectionDelayTimeout);\n  }\n  startNextSubchannelConnecting() {\n    if (this.triedAllSubchannels) {\n      return;\n    }\n    for (const [index, subchannel] of this.subchannels.entries()) {\n      if (index > this.currentSubchannelIndex) {\n        const subchannelState = subchannel.getConnectivityState();\n        if (subchannelState === connectivity_state_1.ConnectivityState.IDLE || subchannelState === connectivity_state_1.ConnectivityState.CONNECTING) {\n          this.startConnecting(index);\n          return;\n        }\n      }\n    }\n    this.triedAllSubchannels = true;\n  }\n  /**\n   * Have a single subchannel in the `subchannels` list start connecting.\n   * @param subchannelIndex The index into the `subchannels` list.\n   */\n  startConnecting(subchannelIndex) {\n    clearTimeout(this.connectionDelayTimeout);\n    this.currentSubchannelIndex = subchannelIndex;\n    if (this.subchannels[subchannelIndex].getConnectivityState() === connectivity_state_1.ConnectivityState.IDLE) {\n      trace('Start connecting to subchannel with address ' + this.subchannels[subchannelIndex].getAddress());\n      process.nextTick(() => {\n        this.subchannels[subchannelIndex].startConnecting();\n      });\n    }\n    this.connectionDelayTimeout = setTimeout(() => {\n      this.startNextSubchannelConnecting();\n    }, CONNECTION_DELAY_INTERVAL_MS);\n  }\n  pickSubchannel(subchannel) {\n    trace('Pick subchannel with address ' + subchannel.getAddress());\n    if (this.currentPick !== null) {\n      this.currentPick.unref();\n      this.currentPick.removeConnectivityStateListener(this.pickedSubchannelStateListener);\n    }\n    this.currentPick = subchannel;\n    this.updateState(connectivity_state_1.ConnectivityState.READY, new PickFirstPicker(subchannel));\n    subchannel.addConnectivityStateListener(this.pickedSubchannelStateListener);\n    subchannel.ref();\n    this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n    this.resetSubchannelList();\n    clearTimeout(this.connectionDelayTimeout);\n  }\n  updateState(newState, picker) {\n    trace(connectivity_state_1.ConnectivityState[this.currentState] + ' -> ' + connectivity_state_1.ConnectivityState[newState]);\n    this.currentState = newState;\n    this.channelControlHelper.updateState(newState, picker);\n  }\n  resetSubchannelList(resetTriedAllSubchannels = true) {\n    for (const subchannel of this.subchannels) {\n      subchannel.removeConnectivityStateListener(this.subchannelStateListener);\n      subchannel.unref();\n      this.channelControlHelper.removeChannelzChild(subchannel.getChannelzRef());\n    }\n    this.currentSubchannelIndex = 0;\n    this.subchannelStateCounts = {\n      [connectivity_state_1.ConnectivityState.CONNECTING]: 0,\n      [connectivity_state_1.ConnectivityState.IDLE]: 0,\n      [connectivity_state_1.ConnectivityState.READY]: 0,\n      [connectivity_state_1.ConnectivityState.SHUTDOWN]: 0,\n      [connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE]: 0\n    };\n    this.subchannels = [];\n    if (resetTriedAllSubchannels) {\n      this.triedAllSubchannels = false;\n    }\n  }\n  /**\n   * Start connecting to the address list most recently passed to\n   * `updateAddressList`.\n   */\n  connectToAddressList() {\n    this.resetSubchannelList();\n    trace('Connect to address list ' + this.latestAddressList.map(address => subchannel_address_1.subchannelAddressToString(address)));\n    this.subchannels = this.latestAddressList.map(address => this.channelControlHelper.createSubchannel(address, {}));\n    for (const subchannel of this.subchannels) {\n      subchannel.ref();\n      this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n    }\n    for (const subchannel of this.subchannels) {\n      subchannel.addConnectivityStateListener(this.subchannelStateListener);\n      this.subchannelStateCounts[subchannel.getConnectivityState()] += 1;\n      if (subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY) {\n        this.pickSubchannel(subchannel);\n        this.resetSubchannelList();\n        return;\n      }\n    }\n    for (const [index, subchannel] of this.subchannels.entries()) {\n      const subchannelState = subchannel.getConnectivityState();\n      if (subchannelState === connectivity_state_1.ConnectivityState.IDLE || subchannelState === connectivity_state_1.ConnectivityState.CONNECTING) {\n        this.startConnecting(index);\n        if (this.currentPick === null) {\n          this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n        }\n        return;\n      }\n    }\n    // If the code reaches this point, every subchannel must be in TRANSIENT_FAILURE\n    if (this.currentPick === null) {\n      this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker());\n    }\n  }\n  updateAddressList(addressList, lbConfig) {\n    // lbConfig has no useful information for pick first load balancing\n    /* To avoid unnecessary churn, we only do something with this address list\n     * if we're not currently trying to establish a connection, or if the new\n     * address list is different from the existing one */\n    if (this.subchannels.length === 0 || !this.latestAddressList.every((value, index) => addressList[index] === value)) {\n      this.latestAddressList = addressList;\n      this.connectToAddressList();\n    }\n  }\n  exitIdle() {\n    if (this.currentState === connectivity_state_1.ConnectivityState.IDLE || this.triedAllSubchannels) {\n      this.channelControlHelper.requestReresolution();\n    }\n    for (const subchannel of this.subchannels) {\n      subchannel.startConnecting();\n    }\n    if (this.currentState === connectivity_state_1.ConnectivityState.IDLE) {\n      if (this.latestAddressList.length > 0) {\n        this.connectToAddressList();\n      }\n    }\n  }\n  resetBackoff() {\n    /* The pick first load balancer does not have a connection backoff, so this\n     * does nothing */\n  }\n  destroy() {\n    this.resetSubchannelList();\n    if (this.currentPick !== null) {\n      /* Unref can cause a state change, which can cause a change in the value\n       * of this.currentPick, so we hold a local reference to make sure that\n       * does not impact this function. */\n      const currentPick = this.currentPick;\n      currentPick.unref();\n      currentPick.removeConnectivityStateListener(this.pickedSubchannelStateListener);\n      this.channelControlHelper.removeChannelzChild(currentPick.getChannelzRef());\n    }\n  }\n  getTypeName() {\n    return TYPE_NAME;\n  }\n}\nexports.PickFirstLoadBalancer = PickFirstLoadBalancer;\nfunction setup() {\n  load_balancer_1.registerLoadBalancerType(TYPE_NAME, PickFirstLoadBalancer, PickFirstLoadBalancingConfig);\n  load_balancer_1.registerDefaultLoadBalancerType(TYPE_NAME);\n}\nexports.setup = setup;\n//# sourceMappingURL=load-balancer-pick-first.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}