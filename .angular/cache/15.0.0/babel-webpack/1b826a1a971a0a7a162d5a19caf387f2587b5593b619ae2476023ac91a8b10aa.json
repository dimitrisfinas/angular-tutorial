{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringToSubchannelAddress = exports.subchannelAddressToString = exports.subchannelAddressEqual = exports.isTcpSubchannelAddress = void 0;\nconst net_1 = require(\"net\");\nfunction isTcpSubchannelAddress(address) {\n  return 'port' in address;\n}\nexports.isTcpSubchannelAddress = isTcpSubchannelAddress;\nfunction subchannelAddressEqual(address1, address2) {\n  if (isTcpSubchannelAddress(address1)) {\n    return isTcpSubchannelAddress(address2) && address1.host === address2.host && address1.port === address2.port;\n  } else {\n    return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\n  }\n}\nexports.subchannelAddressEqual = subchannelAddressEqual;\nfunction subchannelAddressToString(address) {\n  if (isTcpSubchannelAddress(address)) {\n    return address.host + ':' + address.port;\n  } else {\n    return address.path;\n  }\n}\nexports.subchannelAddressToString = subchannelAddressToString;\nconst DEFAULT_PORT = 443;\nfunction stringToSubchannelAddress(addressString, port) {\n  if (net_1.isIP(addressString)) {\n    return {\n      host: addressString,\n      port: port !== null && port !== void 0 ? port : DEFAULT_PORT\n    };\n  } else {\n    return {\n      path: addressString\n    };\n  }\n}\nexports.stringToSubchannelAddress = stringToSubchannelAddress;","map":{"version":3,"names":["Object","defineProperty","exports","value","stringToSubchannelAddress","subchannelAddressToString","subchannelAddressEqual","isTcpSubchannelAddress","net_1","require","address","address1","address2","host","port","path","DEFAULT_PORT","addressString","isIP"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@grpc/grpc-js/build/src/subchannel-address.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringToSubchannelAddress = exports.subchannelAddressToString = exports.subchannelAddressEqual = exports.isTcpSubchannelAddress = void 0;\nconst net_1 = require(\"net\");\nfunction isTcpSubchannelAddress(address) {\n    return 'port' in address;\n}\nexports.isTcpSubchannelAddress = isTcpSubchannelAddress;\nfunction subchannelAddressEqual(address1, address2) {\n    if (isTcpSubchannelAddress(address1)) {\n        return (isTcpSubchannelAddress(address2) &&\n            address1.host === address2.host &&\n            address1.port === address2.port);\n    }\n    else {\n        return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\n    }\n}\nexports.subchannelAddressEqual = subchannelAddressEqual;\nfunction subchannelAddressToString(address) {\n    if (isTcpSubchannelAddress(address)) {\n        return address.host + ':' + address.port;\n    }\n    else {\n        return address.path;\n    }\n}\nexports.subchannelAddressToString = subchannelAddressToString;\nconst DEFAULT_PORT = 443;\nfunction stringToSubchannelAddress(addressString, port) {\n    if (net_1.isIP(addressString)) {\n        return {\n            host: addressString,\n            port: port !== null && port !== void 0 ? port : DEFAULT_PORT\n        };\n    }\n    else {\n        return {\n            path: addressString\n        };\n    }\n}\nexports.stringToSubchannelAddress = stringToSubchannelAddress;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,yBAAyB,GAAGF,OAAO,CAACG,yBAAyB,GAAGH,OAAO,CAACI,sBAAsB,GAAGJ,OAAO,CAACK,sBAAsB,GAAG,KAAK,CAAC;AAChJ,MAAMC,KAAK,GAAGC,OAAO,CAAC,KAAK,CAAC;AAC5B,SAASF,sBAAsB,CAACG,OAAO,EAAE;EACrC,OAAO,MAAM,IAAIA,OAAO;AAC5B;AACAR,OAAO,CAACK,sBAAsB,GAAGA,sBAAsB;AACvD,SAASD,sBAAsB,CAACK,QAAQ,EAAEC,QAAQ,EAAE;EAChD,IAAIL,sBAAsB,CAACI,QAAQ,CAAC,EAAE;IAClC,OAAQJ,sBAAsB,CAACK,QAAQ,CAAC,IACpCD,QAAQ,CAACE,IAAI,KAAKD,QAAQ,CAACC,IAAI,IAC/BF,QAAQ,CAACG,IAAI,KAAKF,QAAQ,CAACE,IAAI;EACvC,CAAC,MACI;IACD,OAAO,CAACP,sBAAsB,CAACK,QAAQ,CAAC,IAAID,QAAQ,CAACI,IAAI,KAAKH,QAAQ,CAACG,IAAI;EAC/E;AACJ;AACAb,OAAO,CAACI,sBAAsB,GAAGA,sBAAsB;AACvD,SAASD,yBAAyB,CAACK,OAAO,EAAE;EACxC,IAAIH,sBAAsB,CAACG,OAAO,CAAC,EAAE;IACjC,OAAOA,OAAO,CAACG,IAAI,GAAG,GAAG,GAAGH,OAAO,CAACI,IAAI;EAC5C,CAAC,MACI;IACD,OAAOJ,OAAO,CAACK,IAAI;EACvB;AACJ;AACAb,OAAO,CAACG,yBAAyB,GAAGA,yBAAyB;AAC7D,MAAMW,YAAY,GAAG,GAAG;AACxB,SAASZ,yBAAyB,CAACa,aAAa,EAAEH,IAAI,EAAE;EACpD,IAAIN,KAAK,CAACU,IAAI,CAACD,aAAa,CAAC,EAAE;IAC3B,OAAO;MACHJ,IAAI,EAAEI,aAAa;MACnBH,IAAI,EAAEA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,GAAGE;IACpD,CAAC;EACL,CAAC,MACI;IACD,OAAO;MACHD,IAAI,EAAEE;IACV,CAAC;EACL;AACJ;AACAf,OAAO,CAACE,yBAAyB,GAAGA,yBAAyB"},"metadata":{},"sourceType":"script","externalDependencies":[]}