{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nvar NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */function () {\n  function ProxyTracerProvider() {}\n  /**\n   * Get a {@link ProxyTracer}\n   */\n  ProxyTracerProvider.prototype.getTracer = function (name, version) {\n    var _a;\n    return (_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new ProxyTracer(this, name, version);\n  };\n  ProxyTracerProvider.prototype.getDelegate = function () {\n    var _a;\n    return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n  };\n  /**\n   * Set the delegate tracer provider\n   */\n  ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n    this._delegate = delegate;\n  };\n  ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {\n    var _a;\n    return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);\n  };\n  return ProxyTracerProvider;\n}();\nexport { ProxyTracerProvider };","map":{"version":3,"names":["ProxyTracer","NoopTracerProvider","NOOP_TRACER_PROVIDER","ProxyTracerProvider","prototype","getTracer","name","version","_a","getDelegateTracer","getDelegate","_delegate","setDelegate","delegate"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ProxyTracer } from './ProxyTracer';\nimport { NoopTracerProvider } from './NoopTracerProvider';\nvar NOOP_TRACER_PROVIDER = new NoopTracerProvider();\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new ProxyTracer(this, name, version));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);\n    };\n    return ProxyTracerProvider;\n}());\nexport { ProxyTracerProvider };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,eAAe;AAC3C,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,IAAIC,oBAAoB,GAAG,IAAID,kBAAkB,EAAE;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIE,mBAAmB,GAAG,aAAe,YAAY;EACjD,SAASA,mBAAmB,GAAG,CAC/B;EACA;AACJ;AACA;EACIA,mBAAmB,CAACC,SAAS,CAACC,SAAS,GAAG,UAAUC,IAAI,EAAEC,OAAO,EAAE;IAC/D,IAAIC,EAAE;IACN,OAAQ,CAACA,EAAE,GAAG,IAAI,CAACC,iBAAiB,CAACH,IAAI,EAAEC,OAAO,CAAC,MAAM,IAAI,IAAIC,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAIR,WAAW,CAAC,IAAI,EAAEM,IAAI,EAAEC,OAAO,CAAC;EAC9H,CAAC;EACDJ,mBAAmB,CAACC,SAAS,CAACM,WAAW,GAAG,YAAY;IACpD,IAAIF,EAAE;IACN,OAAO,CAACA,EAAE,GAAG,IAAI,CAACG,SAAS,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGN,oBAAoB;EACtF,CAAC;EACD;AACJ;AACA;EACIC,mBAAmB,CAACC,SAAS,CAACQ,WAAW,GAAG,UAAUC,QAAQ,EAAE;IAC5D,IAAI,CAACF,SAAS,GAAGE,QAAQ;EAC7B,CAAC;EACDV,mBAAmB,CAACC,SAAS,CAACK,iBAAiB,GAAG,UAAUH,IAAI,EAAEC,OAAO,EAAE;IACvE,IAAIC,EAAE;IACN,OAAO,CAACA,EAAE,GAAG,IAAI,CAACG,SAAS,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACH,SAAS,CAACC,IAAI,EAAEC,OAAO,CAAC;EACjG,CAAC;EACD,OAAOJ,mBAAmB;AAC9B,CAAC,EAAG;AACJ,SAASA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}