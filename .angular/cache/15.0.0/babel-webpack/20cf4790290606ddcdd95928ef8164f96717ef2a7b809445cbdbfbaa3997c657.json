{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance } from '@opentelemetry/core';\nimport { hasKey, PerformanceTimingNames as PTN } from '@opentelemetry/sdk-trace-web';\nimport { EventNames } from './enums/EventNames';\nexport var getPerformanceNavigationEntries = function () {\n  var _a, _b;\n  var entries = {};\n  var performanceNavigationTiming = (_b = (_a = otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'navigation')[0];\n  if (performanceNavigationTiming) {\n    var keys = Object.values(PTN);\n    keys.forEach(function (key) {\n      if (hasKey(performanceNavigationTiming, key)) {\n        var value = performanceNavigationTiming[key];\n        if (typeof value === 'number') {\n          entries[key] = value;\n        }\n      }\n    });\n  } else {\n    // // fallback to previous version\n    var perf = otperformance;\n    var performanceTiming_1 = perf.timing;\n    if (performanceTiming_1) {\n      var keys = Object.values(PTN);\n      keys.forEach(function (key) {\n        if (hasKey(performanceTiming_1, key)) {\n          var value = performanceTiming_1[key];\n          if (typeof value === 'number') {\n            entries[key] = value;\n          }\n        }\n      });\n    }\n  }\n  return entries;\n};\nvar performancePaintNames = {\n  'first-paint': EventNames.FIRST_PAINT,\n  'first-contentful-paint': EventNames.FIRST_CONTENTFUL_PAINT\n};\nexport var addSpanPerformancePaintEvents = function (span) {\n  var _a, _b;\n  var performancePaintTiming = (_b = (_a = otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'paint');\n  if (performancePaintTiming) {\n    performancePaintTiming.forEach(function (_a) {\n      var name = _a.name,\n        startTime = _a.startTime;\n      if (hasKey(performancePaintNames, name)) {\n        span.addEvent(performancePaintNames[name], startTime);\n      }\n    });\n  }\n};","map":{"version":3,"names":["otperformance","hasKey","PerformanceTimingNames","PTN","EventNames","getPerformanceNavigationEntries","_a","_b","entries","performanceNavigationTiming","getEntriesByType","call","keys","Object","values","forEach","key","value","perf","performanceTiming_1","timing","performancePaintNames","FIRST_PAINT","FIRST_CONTENTFUL_PAINT","addSpanPerformancePaintEvents","span","performancePaintTiming","name","startTime","addEvent"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/instrumentation-document-load/build/esm/utils.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance } from '@opentelemetry/core';\nimport { hasKey, PerformanceTimingNames as PTN, } from '@opentelemetry/sdk-trace-web';\nimport { EventNames } from './enums/EventNames';\nexport var getPerformanceNavigationEntries = function () {\n    var _a, _b;\n    var entries = {};\n    var performanceNavigationTiming = (_b = (_a = otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'navigation')[0];\n    if (performanceNavigationTiming) {\n        var keys = Object.values(PTN);\n        keys.forEach(function (key) {\n            if (hasKey(performanceNavigationTiming, key)) {\n                var value = performanceNavigationTiming[key];\n                if (typeof value === 'number') {\n                    entries[key] = value;\n                }\n            }\n        });\n    }\n    else {\n        // // fallback to previous version\n        var perf = otperformance;\n        var performanceTiming_1 = perf.timing;\n        if (performanceTiming_1) {\n            var keys = Object.values(PTN);\n            keys.forEach(function (key) {\n                if (hasKey(performanceTiming_1, key)) {\n                    var value = performanceTiming_1[key];\n                    if (typeof value === 'number') {\n                        entries[key] = value;\n                    }\n                }\n            });\n        }\n    }\n    return entries;\n};\nvar performancePaintNames = {\n    'first-paint': EventNames.FIRST_PAINT,\n    'first-contentful-paint': EventNames.FIRST_CONTENTFUL_PAINT,\n};\nexport var addSpanPerformancePaintEvents = function (span) {\n    var _a, _b;\n    var performancePaintTiming = (_b = (_a = otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'paint');\n    if (performancePaintTiming) {\n        performancePaintTiming.forEach(function (_a) {\n            var name = _a.name, startTime = _a.startTime;\n            if (hasKey(performancePaintNames, name)) {\n                span.addEvent(performancePaintNames[name], startTime);\n            }\n        });\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,qBAAqB;AACnD,SAASC,MAAM,EAAEC,sBAAsB,IAAIC,GAAG,QAAS,8BAA8B;AACrF,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,OAAO,IAAIC,+BAA+B,GAAG,YAAY;EACrD,IAAIC,EAAE,EAAEC,EAAE;EACV,IAAIC,OAAO,GAAG,CAAC,CAAC;EAChB,IAAIC,2BAA2B,GAAG,CAACF,EAAE,GAAG,CAACD,EAAE,GAAGN,aAAa,EAAEU,gBAAgB,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,IAAI,CAACL,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;EAChJ,IAAIG,2BAA2B,EAAE;IAC7B,IAAIG,IAAI,GAAGC,MAAM,CAACC,MAAM,CAACX,GAAG,CAAC;IAC7BS,IAAI,CAACG,OAAO,CAAC,UAAUC,GAAG,EAAE;MACxB,IAAIf,MAAM,CAACQ,2BAA2B,EAAEO,GAAG,CAAC,EAAE;QAC1C,IAAIC,KAAK,GAAGR,2BAA2B,CAACO,GAAG,CAAC;QAC5C,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;UAC3BT,OAAO,CAACQ,GAAG,CAAC,GAAGC,KAAK;QACxB;MACJ;IACJ,CAAC,CAAC;EACN,CAAC,MACI;IACD;IACA,IAAIC,IAAI,GAAGlB,aAAa;IACxB,IAAImB,mBAAmB,GAAGD,IAAI,CAACE,MAAM;IACrC,IAAID,mBAAmB,EAAE;MACrB,IAAIP,IAAI,GAAGC,MAAM,CAACC,MAAM,CAACX,GAAG,CAAC;MAC7BS,IAAI,CAACG,OAAO,CAAC,UAAUC,GAAG,EAAE;QACxB,IAAIf,MAAM,CAACkB,mBAAmB,EAAEH,GAAG,CAAC,EAAE;UAClC,IAAIC,KAAK,GAAGE,mBAAmB,CAACH,GAAG,CAAC;UACpC,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;YAC3BT,OAAO,CAACQ,GAAG,CAAC,GAAGC,KAAK;UACxB;QACJ;MACJ,CAAC,CAAC;IACN;EACJ;EACA,OAAOT,OAAO;AAClB,CAAC;AACD,IAAIa,qBAAqB,GAAG;EACxB,aAAa,EAAEjB,UAAU,CAACkB,WAAW;EACrC,wBAAwB,EAAElB,UAAU,CAACmB;AACzC,CAAC;AACD,OAAO,IAAIC,6BAA6B,GAAG,UAAUC,IAAI,EAAE;EACvD,IAAInB,EAAE,EAAEC,EAAE;EACV,IAAImB,sBAAsB,GAAG,CAACnB,EAAE,GAAG,CAACD,EAAE,GAAGN,aAAa,EAAEU,gBAAgB,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,IAAI,CAACL,EAAE,EAAE,OAAO,CAAC;EACnI,IAAIoB,sBAAsB,EAAE;IACxBA,sBAAsB,CAACX,OAAO,CAAC,UAAUT,EAAE,EAAE;MACzC,IAAIqB,IAAI,GAAGrB,EAAE,CAACqB,IAAI;QAAEC,SAAS,GAAGtB,EAAE,CAACsB,SAAS;MAC5C,IAAI3B,MAAM,CAACoB,qBAAqB,EAAEM,IAAI,CAAC,EAAE;QACrCF,IAAI,CAACI,QAAQ,CAACR,qBAAqB,CAACM,IAAI,CAAC,EAAEC,SAAS,CAAC;MACzD;IACJ,CAAC,CAAC;EACN;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}