{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ROOT_CONTEXT } from '@opentelemetry/api';\n/**\n * Stack Context Manager for managing the state in web\n * it doesn't fully support the async calls though\n */\nvar StackContextManager = /** @class */function () {\n  function StackContextManager() {\n    /**\n     * whether the context manager is enabled or not\n     */\n    this._enabled = false;\n    /**\n     * Keeps the reference to current context\n     */\n    this._currentContext = ROOT_CONTEXT;\n  }\n  /**\n   *\n   * @param context\n   * @param target Function to be executed within the context\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  StackContextManager.prototype._bindFunction = function (context, target) {\n    if (context === void 0) {\n      context = ROOT_CONTEXT;\n    }\n    var manager = this;\n    var contextWrapper = function () {\n      var _this = this;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return manager.with(context, function () {\n        return target.apply(_this, args);\n      });\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length\n    });\n    return contextWrapper;\n  };\n  /**\n   * Returns the active context\n   */\n  StackContextManager.prototype.active = function () {\n    return this._currentContext;\n  };\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  StackContextManager.prototype.bind = function (context, target) {\n    // if no specific context to propagate is given, we use the current one\n    if (context === undefined) {\n      context = this.active();\n    }\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  };\n  /**\n   * Disable the context manager (clears the current context)\n   */\n  StackContextManager.prototype.disable = function () {\n    this._currentContext = ROOT_CONTEXT;\n    this._enabled = false;\n    return this;\n  };\n  /**\n   * Enables the context manager and creates a default(root) context\n   */\n  StackContextManager.prototype.enable = function () {\n    if (this._enabled) {\n      return this;\n    }\n    this._enabled = true;\n    this._currentContext = ROOT_CONTEXT;\n    return this;\n  };\n  /**\n   * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n   * The context will be set as active\n   * @param context\n   * @param fn Callback function\n   * @param thisArg optional receiver to be used for calling fn\n   * @param args optional arguments forwarded to fn\n   */\n  StackContextManager.prototype.with = function (context, fn, thisArg) {\n    var args = [];\n    for (var _i = 3; _i < arguments.length; _i++) {\n      args[_i - 3] = arguments[_i];\n    }\n    var previousContext = this._currentContext;\n    this._currentContext = context || ROOT_CONTEXT;\n    try {\n      return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));\n    } finally {\n      this._currentContext = previousContext;\n    }\n  };\n  return StackContextManager;\n}();\nexport { StackContextManager };","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","__spreadArray","to","from","pack","arguments","length","l","Array","prototype","slice","concat","ROOT_CONTEXT","StackContextManager","_enabled","_currentContext","_bindFunction","context","target","manager","contextWrapper","_this","args","_i","with","apply","Object","defineProperty","enumerable","configurable","writable","active","bind","undefined","disable","enable","fn","thisArg","previousContext"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/sdk-trace-web/build/esm/StackContextManager.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ROOT_CONTEXT } from '@opentelemetry/api';\n/**\n * Stack Context Manager for managing the state in web\n * it doesn't fully support the async calls though\n */\nvar StackContextManager = /** @class */ (function () {\n    function StackContextManager() {\n        /**\n         * whether the context manager is enabled or not\n         */\n        this._enabled = false;\n        /**\n         * Keeps the reference to current context\n         */\n        this._currentContext = ROOT_CONTEXT;\n    }\n    /**\n     *\n     * @param context\n     * @param target Function to be executed within the context\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    StackContextManager.prototype._bindFunction = function (context, target) {\n        if (context === void 0) { context = ROOT_CONTEXT; }\n        var manager = this;\n        var contextWrapper = function () {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return manager.with(context, function () { return target.apply(_this, args); });\n        };\n        Object.defineProperty(contextWrapper, 'length', {\n            enumerable: false,\n            configurable: true,\n            writable: false,\n            value: target.length,\n        });\n        return contextWrapper;\n    };\n    /**\n     * Returns the active context\n     */\n    StackContextManager.prototype.active = function () {\n        return this._currentContext;\n    };\n    /**\n     * Binds a the certain context or the active one to the target function and then returns the target\n     * @param context A context (span) to be bind to target\n     * @param target a function or event emitter. When target or one of its callbacks is called,\n     *  the provided context will be used as the active context for the duration of the call.\n     */\n    StackContextManager.prototype.bind = function (context, target) {\n        // if no specific context to propagate is given, we use the current one\n        if (context === undefined) {\n            context = this.active();\n        }\n        if (typeof target === 'function') {\n            return this._bindFunction(context, target);\n        }\n        return target;\n    };\n    /**\n     * Disable the context manager (clears the current context)\n     */\n    StackContextManager.prototype.disable = function () {\n        this._currentContext = ROOT_CONTEXT;\n        this._enabled = false;\n        return this;\n    };\n    /**\n     * Enables the context manager and creates a default(root) context\n     */\n    StackContextManager.prototype.enable = function () {\n        if (this._enabled) {\n            return this;\n        }\n        this._enabled = true;\n        this._currentContext = ROOT_CONTEXT;\n        return this;\n    };\n    /**\n     * Calls the callback function [fn] with the provided [context]. If [context] is undefined then it will use the window.\n     * The context will be set as active\n     * @param context\n     * @param fn Callback function\n     * @param thisArg optional receiver to be used for calling fn\n     * @param args optional arguments forwarded to fn\n     */\n    StackContextManager.prototype.with = function (context, fn, thisArg) {\n        var args = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            args[_i - 3] = arguments[_i];\n        }\n        var previousContext = this._currentContext;\n        this._currentContext = context || ROOT_CONTEXT;\n        try {\n            return fn.call.apply(fn, __spreadArray([thisArg], __read(args), false));\n        }\n        finally {\n            this._currentContext = previousContext;\n        }\n    };\n    return StackContextManager;\n}());\nexport { StackContextManager };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}