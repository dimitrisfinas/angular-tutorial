{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport { isSpanContextValid, wrapSpanContext } from '../trace/spancontext-utils';\nimport { deleteSpan, getSpan, getSpanContext, setSpan, setSpanContext } from '../trace/context-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function TraceAPI() {\n    this._proxyTracerProvider = new ProxyTracerProvider();\n    this.wrapSpanContext = wrapSpanContext;\n    this.isSpanContextValid = isSpanContextValid;\n    this.deleteSpan = deleteSpan;\n    this.getSpan = getSpan;\n    this.getSpanContext = getSpanContext;\n    this.setSpan = setSpan;\n    this.setSpanContext = setSpanContext;\n  }\n  /** Get the singleton instance of the Trace API */\n  TraceAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new TraceAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current global tracer.\n   *\n   * @returns true if the tracer provider was successfully registered, else false\n   */\n  TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n    var success = registerGlobal(API_NAME, this._proxyTracerProvider, DiagAPI.instance());\n    if (success) {\n      this._proxyTracerProvider.setDelegate(provider);\n    }\n    return success;\n  };\n  /**\n   * Returns the global tracer provider.\n   */\n  TraceAPI.prototype.getTracerProvider = function () {\n    return getGlobal(API_NAME) || this._proxyTracerProvider;\n  };\n  /**\n   * Returns a tracer from the global tracer provider.\n   */\n  TraceAPI.prototype.getTracer = function (name, version) {\n    return this.getTracerProvider().getTracer(name, version);\n  };\n  /** Remove the global tracer provider */\n  TraceAPI.prototype.disable = function () {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n    this._proxyTracerProvider = new ProxyTracerProvider();\n  };\n  return TraceAPI;\n}();\nexport { TraceAPI };","map":{"version":3,"names":["getGlobal","registerGlobal","unregisterGlobal","ProxyTracerProvider","isSpanContextValid","wrapSpanContext","deleteSpan","getSpan","getSpanContext","setSpan","setSpanContext","DiagAPI","API_NAME","TraceAPI","_proxyTracerProvider","getInstance","_instance","prototype","setGlobalTracerProvider","provider","success","instance","setDelegate","getTracerProvider","getTracer","name","version","disable"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/api/build/esm/api/trace.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { ProxyTracerProvider } from '../trace/ProxyTracerProvider';\nimport { isSpanContextValid, wrapSpanContext, } from '../trace/spancontext-utils';\nimport { deleteSpan, getSpan, getSpanContext, setSpan, setSpanContext, } from '../trace/context-utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'trace';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Tracing API\n */\nvar TraceAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function TraceAPI() {\n        this._proxyTracerProvider = new ProxyTracerProvider();\n        this.wrapSpanContext = wrapSpanContext;\n        this.isSpanContextValid = isSpanContextValid;\n        this.deleteSpan = deleteSpan;\n        this.getSpan = getSpan;\n        this.getSpanContext = getSpanContext;\n        this.setSpan = setSpan;\n        this.setSpanContext = setSpanContext;\n    }\n    /** Get the singleton instance of the Trace API */\n    TraceAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new TraceAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global tracer.\n     *\n     * @returns true if the tracer provider was successfully registered, else false\n     */\n    TraceAPI.prototype.setGlobalTracerProvider = function (provider) {\n        var success = registerGlobal(API_NAME, this._proxyTracerProvider, DiagAPI.instance());\n        if (success) {\n            this._proxyTracerProvider.setDelegate(provider);\n        }\n        return success;\n    };\n    /**\n     * Returns the global tracer provider.\n     */\n    TraceAPI.prototype.getTracerProvider = function () {\n        return getGlobal(API_NAME) || this._proxyTracerProvider;\n    };\n    /**\n     * Returns a tracer from the global tracer provider.\n     */\n    TraceAPI.prototype.getTracer = function (name, version) {\n        return this.getTracerProvider().getTracer(name, version);\n    };\n    /** Remove the global tracer provider */\n    TraceAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n        this._proxyTracerProvider = new ProxyTracerProvider();\n    };\n    return TraceAPI;\n}());\nexport { TraceAPI };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAS,EAAEC,cAAc,EAAEC,gBAAgB,QAAS,0BAA0B;AACvF,SAASC,mBAAmB,QAAQ,8BAA8B;AAClE,SAASC,kBAAkB,EAAEC,eAAe,QAAS,4BAA4B;AACjF,SAASC,UAAU,EAAEC,OAAO,EAAEC,cAAc,EAAEC,OAAO,EAAEC,cAAc,QAAS,wBAAwB;AACtG,SAASC,OAAO,QAAQ,QAAQ;AAChC,IAAIC,QAAQ,GAAG,OAAO;AACtB;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,aAAe,YAAY;EACtC;EACA,SAASA,QAAQ,GAAG;IAChB,IAAI,CAACC,oBAAoB,GAAG,IAAIX,mBAAmB,EAAE;IACrD,IAAI,CAACE,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACD,kBAAkB,GAAGA,kBAAkB;IAC5C,IAAI,CAACE,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,cAAc,GAAGA,cAAc;EACxC;EACA;EACAG,QAAQ,CAACE,WAAW,GAAG,YAAY;IAC/B,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAG,IAAIH,QAAQ,EAAE;IACnC;IACA,OAAO,IAAI,CAACG,SAAS;EACzB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIH,QAAQ,CAACI,SAAS,CAACC,uBAAuB,GAAG,UAAUC,QAAQ,EAAE;IAC7D,IAAIC,OAAO,GAAGnB,cAAc,CAACW,QAAQ,EAAE,IAAI,CAACE,oBAAoB,EAAEH,OAAO,CAACU,QAAQ,EAAE,CAAC;IACrF,IAAID,OAAO,EAAE;MACT,IAAI,CAACN,oBAAoB,CAACQ,WAAW,CAACH,QAAQ,CAAC;IACnD;IACA,OAAOC,OAAO;EAClB,CAAC;EACD;AACJ;AACA;EACIP,QAAQ,CAACI,SAAS,CAACM,iBAAiB,GAAG,YAAY;IAC/C,OAAOvB,SAAS,CAACY,QAAQ,CAAC,IAAI,IAAI,CAACE,oBAAoB;EAC3D,CAAC;EACD;AACJ;AACA;EACID,QAAQ,CAACI,SAAS,CAACO,SAAS,GAAG,UAAUC,IAAI,EAAEC,OAAO,EAAE;IACpD,OAAO,IAAI,CAACH,iBAAiB,EAAE,CAACC,SAAS,CAACC,IAAI,EAAEC,OAAO,CAAC;EAC5D,CAAC;EACD;EACAb,QAAQ,CAACI,SAAS,CAACU,OAAO,GAAG,YAAY;IACrCzB,gBAAgB,CAACU,QAAQ,EAAED,OAAO,CAACU,QAAQ,EAAE,CAAC;IAC9C,IAAI,CAACP,oBAAoB,GAAG,IAAIX,mBAAmB,EAAE;EACzD,CAAC;EACD,OAAOU,QAAQ;AACnB,CAAC,EAAG;AACJ,SAASA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}