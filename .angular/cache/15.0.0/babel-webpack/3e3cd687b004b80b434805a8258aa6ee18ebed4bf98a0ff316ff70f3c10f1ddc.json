{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '@opentelemetry/api';\n/** Sampler that samples no traces. */\nvar AlwaysOffSampler = /** @class */function () {\n  function AlwaysOffSampler() {}\n  AlwaysOffSampler.prototype.shouldSample = function () {\n    return {\n      decision: SamplingDecision.NOT_RECORD\n    };\n  };\n  AlwaysOffSampler.prototype.toString = function () {\n    return 'AlwaysOffSampler';\n  };\n  return AlwaysOffSampler;\n}();\nexport { AlwaysOffSampler };","map":{"version":3,"names":["SamplingDecision","AlwaysOffSampler","prototype","shouldSample","decision","NOT_RECORD","toString"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOffSampler.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '@opentelemetry/api';\n/** Sampler that samples no traces. */\nvar AlwaysOffSampler = /** @class */ (function () {\n    function AlwaysOffSampler() {\n    }\n    AlwaysOffSampler.prototype.shouldSample = function () {\n        return {\n            decision: SamplingDecision.NOT_RECORD,\n        };\n    };\n    AlwaysOffSampler.prototype.toString = function () {\n        return 'AlwaysOffSampler';\n    };\n    return AlwaysOffSampler;\n}());\nexport { AlwaysOffSampler };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAgB,QAAQ,oBAAoB;AACrD;AACA,IAAIC,gBAAgB,GAAG,aAAe,YAAY;EAC9C,SAASA,gBAAgB,GAAG,CAC5B;EACAA,gBAAgB,CAACC,SAAS,CAACC,YAAY,GAAG,YAAY;IAClD,OAAO;MACHC,QAAQ,EAAEJ,gBAAgB,CAACK;IAC/B,CAAC;EACL,CAAC;EACDJ,gBAAgB,CAACC,SAAS,CAACI,QAAQ,GAAG,YAAY;IAC9C,OAAO,kBAAkB;EAC7B,CAAC;EACD,OAAOL,gBAAgB;AAC3B,CAAC,EAAG;AACJ,SAASA,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}