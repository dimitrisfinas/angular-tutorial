{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH } from './constants';\nexport function serializeKeyPairs(keyPairs) {\n  return keyPairs.reduce(function (hValue, current) {\n    var value = \"\" + hValue + (hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : '') + current;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, '');\n}\nexport function getKeyPairs(baggage) {\n  return baggage.getAllEntries().map(function (_a) {\n    var key = _a[0],\n      value = _a[1];\n    return encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n  });\n}\nexport function parsePairKeyValue(entry) {\n  var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0) return;\n  var keyPairPart = valueProps.shift();\n  if (!keyPairPart) return;\n  var keyPair = keyPairPart.split(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (keyPair.length !== 2) return;\n  var key = decodeURIComponent(keyPair[0].trim());\n  var value = decodeURIComponent(keyPair[1].trim());\n  var metadata;\n  if (valueProps.length > 0) {\n    metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n  }\n  return {\n    key: key,\n    value: value,\n    metadata: metadata\n  };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(value) {\n  if (typeof value !== 'string' || value.length === 0) return {};\n  return value.split(BAGGAGE_ITEMS_SEPARATOR).map(function (entry) {\n    return parsePairKeyValue(entry);\n  }).filter(function (keyPair) {\n    return keyPair !== undefined && keyPair.value.length > 0;\n  }).reduce(function (headers, keyPair) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    headers[keyPair.key] = keyPair.value;\n    return headers;\n  }, {});\n}","map":{"version":3,"names":["baggageEntryMetadataFromString","BAGGAGE_ITEMS_SEPARATOR","BAGGAGE_PROPERTIES_SEPARATOR","BAGGAGE_KEY_PAIR_SEPARATOR","BAGGAGE_MAX_TOTAL_LENGTH","serializeKeyPairs","keyPairs","reduce","hValue","current","value","length","getKeyPairs","baggage","getAllEntries","map","_a","key","encodeURIComponent","parsePairKeyValue","entry","valueProps","split","keyPairPart","shift","keyPair","decodeURIComponent","trim","metadata","join","parseKeyPairsIntoRecord","filter","undefined","headers"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/baggage/utils.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH, } from './constants';\nexport function serializeKeyPairs(keyPairs) {\n    return keyPairs.reduce(function (hValue, current) {\n        var value = \"\" + hValue + (hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : '') + current;\n        return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n}\nexport function getKeyPairs(baggage) {\n    return baggage\n        .getAllEntries()\n        .map(function (_a) {\n        var key = _a[0], value = _a[1];\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n    });\n}\nexport function parsePairKeyValue(entry) {\n    var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    var keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    var keyPair = keyPairPart.split(BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (keyPair.length !== 2)\n        return;\n    var key = decodeURIComponent(keyPair[0].trim());\n    var value = decodeURIComponent(keyPair[1].trim());\n    var metadata;\n    if (valueProps.length > 0) {\n        metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key: key, value: value, metadata: metadata };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(value) {\n    if (typeof value !== 'string' || value.length === 0)\n        return {};\n    return value\n        .split(BAGGAGE_ITEMS_SEPARATOR)\n        .map(function (entry) {\n        return parsePairKeyValue(entry);\n    })\n        .filter(function (keyPair) { return keyPair !== undefined && keyPair.value.length > 0; })\n        .reduce(function (headers, keyPair) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        headers[keyPair.key] = keyPair.value;\n        return headers;\n    }, {});\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,8BAA8B,QAAQ,oBAAoB;AACnE,SAASC,uBAAuB,EAAEC,4BAA4B,EAAEC,0BAA0B,EAAEC,wBAAwB,QAAS,aAAa;AAC1I,OAAO,SAASC,iBAAiB,CAACC,QAAQ,EAAE;EACxC,OAAOA,QAAQ,CAACC,MAAM,CAAC,UAAUC,MAAM,EAAEC,OAAO,EAAE;IAC9C,IAAIC,KAAK,GAAG,EAAE,GAAGF,MAAM,IAAIA,MAAM,KAAK,EAAE,GAAGP,uBAAuB,GAAG,EAAE,CAAC,GAAGQ,OAAO;IAClF,OAAOC,KAAK,CAACC,MAAM,GAAGP,wBAAwB,GAAGI,MAAM,GAAGE,KAAK;EACnE,CAAC,EAAE,EAAE,CAAC;AACV;AACA,OAAO,SAASE,WAAW,CAACC,OAAO,EAAE;EACjC,OAAOA,OAAO,CACTC,aAAa,EAAE,CACfC,GAAG,CAAC,UAAUC,EAAE,EAAE;IACnB,IAAIC,GAAG,GAAGD,EAAE,CAAC,CAAC,CAAC;MAAEN,KAAK,GAAGM,EAAE,CAAC,CAAC,CAAC;IAC9B,OAAOE,kBAAkB,CAACD,GAAG,CAAC,GAAG,GAAG,GAAGC,kBAAkB,CAACR,KAAK,CAACA,KAAK,CAAC;EAC1E,CAAC,CAAC;AACN;AACA,OAAO,SAASS,iBAAiB,CAACC,KAAK,EAAE;EACrC,IAAIC,UAAU,GAAGD,KAAK,CAACE,KAAK,CAACpB,4BAA4B,CAAC;EAC1D,IAAImB,UAAU,CAACV,MAAM,IAAI,CAAC,EACtB;EACJ,IAAIY,WAAW,GAAGF,UAAU,CAACG,KAAK,EAAE;EACpC,IAAI,CAACD,WAAW,EACZ;EACJ,IAAIE,OAAO,GAAGF,WAAW,CAACD,KAAK,CAACnB,0BAA0B,CAAC;EAC3D,IAAIsB,OAAO,CAACd,MAAM,KAAK,CAAC,EACpB;EACJ,IAAIM,GAAG,GAAGS,kBAAkB,CAACD,OAAO,CAAC,CAAC,CAAC,CAACE,IAAI,EAAE,CAAC;EAC/C,IAAIjB,KAAK,GAAGgB,kBAAkB,CAACD,OAAO,CAAC,CAAC,CAAC,CAACE,IAAI,EAAE,CAAC;EACjD,IAAIC,QAAQ;EACZ,IAAIP,UAAU,CAACV,MAAM,GAAG,CAAC,EAAE;IACvBiB,QAAQ,GAAG5B,8BAA8B,CAACqB,UAAU,CAACQ,IAAI,CAAC3B,4BAA4B,CAAC,CAAC;EAC5F;EACA,OAAO;IAAEe,GAAG,EAAEA,GAAG;IAAEP,KAAK,EAAEA,KAAK;IAAEkB,QAAQ,EAAEA;EAAS,CAAC;AACzD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,uBAAuB,CAACpB,KAAK,EAAE;EAC3C,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAC/C,OAAO,CAAC,CAAC;EACb,OAAOD,KAAK,CACPY,KAAK,CAACrB,uBAAuB,CAAC,CAC9Bc,GAAG,CAAC,UAAUK,KAAK,EAAE;IACtB,OAAOD,iBAAiB,CAACC,KAAK,CAAC;EACnC,CAAC,CAAC,CACGW,MAAM,CAAC,UAAUN,OAAO,EAAE;IAAE,OAAOA,OAAO,KAAKO,SAAS,IAAIP,OAAO,CAACf,KAAK,CAACC,MAAM,GAAG,CAAC;EAAE,CAAC,CAAC,CACxFJ,MAAM,CAAC,UAAU0B,OAAO,EAAER,OAAO,EAAE;IACpC;IACAQ,OAAO,CAACR,OAAO,CAACR,GAAG,CAAC,GAAGQ,OAAO,CAACf,KAAK;IACpC,OAAOuB,OAAO;EAClB,CAAC,EAAE,CAAC,CAAC,CAAC;AACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}