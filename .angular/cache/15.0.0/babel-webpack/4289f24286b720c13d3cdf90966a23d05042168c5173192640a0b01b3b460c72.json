{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createInstrumentDescriptor, InstrumentType } from './InstrumentDescriptor';\nimport { CounterInstrument, HistogramInstrument, ObservableCounterInstrument, ObservableGaugeInstrument, ObservableUpDownCounterInstrument, UpDownCounterInstrument } from './Instruments';\n/**\n * This class implements the {@link IMeter} interface.\n */\nvar Meter = /** @class */function () {\n  function Meter(_meterSharedState) {\n    this._meterSharedState = _meterSharedState;\n  }\n  /**\n   * Create a {@link Histogram} instrument.\n   */\n  Meter.prototype.createHistogram = function (name, options) {\n    var descriptor = createInstrumentDescriptor(name, InstrumentType.HISTOGRAM, options);\n    var storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new HistogramInstrument(storage, descriptor);\n  };\n  /**\n   * Create a {@link Counter} instrument.\n   */\n  Meter.prototype.createCounter = function (name, options) {\n    var descriptor = createInstrumentDescriptor(name, InstrumentType.COUNTER, options);\n    var storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new CounterInstrument(storage, descriptor);\n  };\n  /**\n   * Create a {@link UpDownCounter} instrument.\n   */\n  Meter.prototype.createUpDownCounter = function (name, options) {\n    var descriptor = createInstrumentDescriptor(name, InstrumentType.UP_DOWN_COUNTER, options);\n    var storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new UpDownCounterInstrument(storage, descriptor);\n  };\n  /**\n   * Create a {@link ObservableGauge} instrument.\n   */\n  Meter.prototype.createObservableGauge = function (name, options) {\n    var descriptor = createInstrumentDescriptor(name, InstrumentType.OBSERVABLE_GAUGE, options);\n    var storages = this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableGaugeInstrument(descriptor, storages, this._meterSharedState.observableRegistry);\n  };\n  /**\n   * Create a {@link ObservableCounter} instrument.\n   */\n  Meter.prototype.createObservableCounter = function (name, options) {\n    var descriptor = createInstrumentDescriptor(name, InstrumentType.OBSERVABLE_COUNTER, options);\n    var storages = this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableCounterInstrument(descriptor, storages, this._meterSharedState.observableRegistry);\n  };\n  /**\n   * Create a {@link ObservableUpDownCounter} instrument.\n   */\n  Meter.prototype.createObservableUpDownCounter = function (name, options) {\n    var descriptor = createInstrumentDescriptor(name, InstrumentType.OBSERVABLE_UP_DOWN_COUNTER, options);\n    var storages = this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableUpDownCounterInstrument(descriptor, storages, this._meterSharedState.observableRegistry);\n  };\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  Meter.prototype.addBatchObservableCallback = function (callback, observables) {\n    this._meterSharedState.observableRegistry.addBatchCallback(callback, observables);\n  };\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  Meter.prototype.removeBatchObservableCallback = function (callback, observables) {\n    this._meterSharedState.observableRegistry.removeBatchCallback(callback, observables);\n  };\n  return Meter;\n}();\nexport { Meter };","map":{"version":3,"names":["createInstrumentDescriptor","InstrumentType","CounterInstrument","HistogramInstrument","ObservableCounterInstrument","ObservableGaugeInstrument","ObservableUpDownCounterInstrument","UpDownCounterInstrument","Meter","_meterSharedState","prototype","createHistogram","name","options","descriptor","HISTOGRAM","storage","registerMetricStorage","createCounter","COUNTER","createUpDownCounter","UP_DOWN_COUNTER","createObservableGauge","OBSERVABLE_GAUGE","storages","registerAsyncMetricStorage","observableRegistry","createObservableCounter","OBSERVABLE_COUNTER","createObservableUpDownCounter","OBSERVABLE_UP_DOWN_COUNTER","addBatchObservableCallback","callback","observables","addBatchCallback","removeBatchObservableCallback","removeBatchCallback"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/sdk-metrics/build/esm/Meter.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createInstrumentDescriptor, InstrumentType } from './InstrumentDescriptor';\nimport { CounterInstrument, HistogramInstrument, ObservableCounterInstrument, ObservableGaugeInstrument, ObservableUpDownCounterInstrument, UpDownCounterInstrument, } from './Instruments';\n/**\n * This class implements the {@link IMeter} interface.\n */\nvar Meter = /** @class */ (function () {\n    function Meter(_meterSharedState) {\n        this._meterSharedState = _meterSharedState;\n    }\n    /**\n     * Create a {@link Histogram} instrument.\n     */\n    Meter.prototype.createHistogram = function (name, options) {\n        var descriptor = createInstrumentDescriptor(name, InstrumentType.HISTOGRAM, options);\n        var storage = this._meterSharedState.registerMetricStorage(descriptor);\n        return new HistogramInstrument(storage, descriptor);\n    };\n    /**\n     * Create a {@link Counter} instrument.\n     */\n    Meter.prototype.createCounter = function (name, options) {\n        var descriptor = createInstrumentDescriptor(name, InstrumentType.COUNTER, options);\n        var storage = this._meterSharedState.registerMetricStorage(descriptor);\n        return new CounterInstrument(storage, descriptor);\n    };\n    /**\n     * Create a {@link UpDownCounter} instrument.\n     */\n    Meter.prototype.createUpDownCounter = function (name, options) {\n        var descriptor = createInstrumentDescriptor(name, InstrumentType.UP_DOWN_COUNTER, options);\n        var storage = this._meterSharedState.registerMetricStorage(descriptor);\n        return new UpDownCounterInstrument(storage, descriptor);\n    };\n    /**\n     * Create a {@link ObservableGauge} instrument.\n     */\n    Meter.prototype.createObservableGauge = function (name, options) {\n        var descriptor = createInstrumentDescriptor(name, InstrumentType.OBSERVABLE_GAUGE, options);\n        var storages = this._meterSharedState.registerAsyncMetricStorage(descriptor);\n        return new ObservableGaugeInstrument(descriptor, storages, this._meterSharedState.observableRegistry);\n    };\n    /**\n     * Create a {@link ObservableCounter} instrument.\n     */\n    Meter.prototype.createObservableCounter = function (name, options) {\n        var descriptor = createInstrumentDescriptor(name, InstrumentType.OBSERVABLE_COUNTER, options);\n        var storages = this._meterSharedState.registerAsyncMetricStorage(descriptor);\n        return new ObservableCounterInstrument(descriptor, storages, this._meterSharedState.observableRegistry);\n    };\n    /**\n     * Create a {@link ObservableUpDownCounter} instrument.\n     */\n    Meter.prototype.createObservableUpDownCounter = function (name, options) {\n        var descriptor = createInstrumentDescriptor(name, InstrumentType.OBSERVABLE_UP_DOWN_COUNTER, options);\n        var storages = this._meterSharedState.registerAsyncMetricStorage(descriptor);\n        return new ObservableUpDownCounterInstrument(descriptor, storages, this._meterSharedState.observableRegistry);\n    };\n    /**\n     * @see {@link Meter.addBatchObservableCallback}\n     */\n    Meter.prototype.addBatchObservableCallback = function (callback, observables) {\n        this._meterSharedState.observableRegistry.addBatchCallback(callback, observables);\n    };\n    /**\n     * @see {@link Meter.removeBatchObservableCallback}\n     */\n    Meter.prototype.removeBatchObservableCallback = function (callback, observables) {\n        this._meterSharedState.observableRegistry.removeBatchCallback(callback, observables);\n    };\n    return Meter;\n}());\nexport { Meter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}