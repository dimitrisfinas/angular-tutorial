{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createInstrumentDescriptor, InstrumentType } from './InstrumentDescriptor';\nimport { CounterInstrument, HistogramInstrument, ObservableCounterInstrument, ObservableGaugeInstrument, ObservableUpDownCounterInstrument, UpDownCounterInstrument } from './Instruments';\n/**\n * This class implements the {@link IMeter} interface.\n */\nvar Meter = /** @class */function () {\n  function Meter(_meterSharedState) {\n    this._meterSharedState = _meterSharedState;\n  }\n  /**\n   * Create a {@link Histogram} instrument.\n   */\n  Meter.prototype.createHistogram = function (name, options) {\n    var descriptor = createInstrumentDescriptor(name, InstrumentType.HISTOGRAM, options);\n    var storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new HistogramInstrument(storage, descriptor);\n  };\n  /**\n   * Create a {@link Counter} instrument.\n   */\n  Meter.prototype.createCounter = function (name, options) {\n    var descriptor = createInstrumentDescriptor(name, InstrumentType.COUNTER, options);\n    var storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new CounterInstrument(storage, descriptor);\n  };\n  /**\n   * Create a {@link UpDownCounter} instrument.\n   */\n  Meter.prototype.createUpDownCounter = function (name, options) {\n    var descriptor = createInstrumentDescriptor(name, InstrumentType.UP_DOWN_COUNTER, options);\n    var storage = this._meterSharedState.registerMetricStorage(descriptor);\n    return new UpDownCounterInstrument(storage, descriptor);\n  };\n  /**\n   * Create a {@link ObservableGauge} instrument.\n   */\n  Meter.prototype.createObservableGauge = function (name, options) {\n    var descriptor = createInstrumentDescriptor(name, InstrumentType.OBSERVABLE_GAUGE, options);\n    var storages = this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableGaugeInstrument(descriptor, storages, this._meterSharedState.observableRegistry);\n  };\n  /**\n   * Create a {@link ObservableCounter} instrument.\n   */\n  Meter.prototype.createObservableCounter = function (name, options) {\n    var descriptor = createInstrumentDescriptor(name, InstrumentType.OBSERVABLE_COUNTER, options);\n    var storages = this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableCounterInstrument(descriptor, storages, this._meterSharedState.observableRegistry);\n  };\n  /**\n   * Create a {@link ObservableUpDownCounter} instrument.\n   */\n  Meter.prototype.createObservableUpDownCounter = function (name, options) {\n    var descriptor = createInstrumentDescriptor(name, InstrumentType.OBSERVABLE_UP_DOWN_COUNTER, options);\n    var storages = this._meterSharedState.registerAsyncMetricStorage(descriptor);\n    return new ObservableUpDownCounterInstrument(descriptor, storages, this._meterSharedState.observableRegistry);\n  };\n  /**\n   * @see {@link Meter.addBatchObservableCallback}\n   */\n  Meter.prototype.addBatchObservableCallback = function (callback, observables) {\n    this._meterSharedState.observableRegistry.addBatchCallback(callback, observables);\n  };\n  /**\n   * @see {@link Meter.removeBatchObservableCallback}\n   */\n  Meter.prototype.removeBatchObservableCallback = function (callback, observables) {\n    this._meterSharedState.observableRegistry.removeBatchCallback(callback, observables);\n  };\n  return Meter;\n}();\nexport { Meter };\n//# sourceMappingURL=Meter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}