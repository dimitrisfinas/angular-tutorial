{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractAndSelectServiceConfig = exports.validateServiceConfig = void 0;\n/* This file implements gRFC A2 and the service config spec:\n * https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md\n * https://github.com/grpc/grpc/blob/master/doc/service_config.md. Each\n * function here takes an object with unknown structure and returns its\n * specific object type if the input has the right structure, and throws an\n * error otherwise. */\n/* The any type is purposely used here. All functions validate their input at\n * runtime */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst os = require(\"os\");\nconst load_balancer_1 = require(\"./load-balancer\");\n/**\n * Recognizes a number with up to 9 digits after the decimal point, followed by\n * an \"s\", representing a number of seconds.\n */\nconst TIMEOUT_REGEX = /^\\d+(\\.\\d{1,9})?s$/;\n/**\n * Client language name used for determining whether this client matches a\n * `ServiceConfigCanaryConfig`'s `clientLanguage` list.\n */\nconst CLIENT_LANGUAGE_STRING = 'node';\nfunction validateName(obj) {\n  if (!('service' in obj) || typeof obj.service !== 'string') {\n    throw new Error('Invalid method config name: invalid service');\n  }\n  const result = {\n    service: obj.service\n  };\n  if ('method' in obj) {\n    if (typeof obj.method === 'string') {\n      result.method = obj.method;\n    } else {\n      throw new Error('Invalid method config name: invalid method');\n    }\n  }\n  return result;\n}\nfunction validateMethodConfig(obj) {\n  var _a;\n  const result = {\n    name: []\n  };\n  if (!('name' in obj) || !Array.isArray(obj.name)) {\n    throw new Error('Invalid method config: invalid name array');\n  }\n  for (const name of obj.name) {\n    result.name.push(validateName(name));\n  }\n  if ('waitForReady' in obj) {\n    if (typeof obj.waitForReady !== 'boolean') {\n      throw new Error('Invalid method config: invalid waitForReady');\n    }\n    result.waitForReady = obj.waitForReady;\n  }\n  if ('timeout' in obj) {\n    if (typeof obj.timeout === 'object') {\n      if (!('seconds' in obj.timeout) || !(typeof obj.timeout.seconds === 'number')) {\n        throw new Error('Invalid method config: invalid timeout.seconds');\n      }\n      if (!('nanos' in obj.timeout) || !(typeof obj.timeout.nanos === 'number')) {\n        throw new Error('Invalid method config: invalid timeout.nanos');\n      }\n      result.timeout = obj.timeout;\n    } else if (typeof obj.timeout === 'string' && TIMEOUT_REGEX.test(obj.timeout)) {\n      const timeoutParts = obj.timeout.substring(0, obj.timeout.length - 1).split('.');\n      result.timeout = {\n        seconds: timeoutParts[0] | 0,\n        nanos: ((_a = timeoutParts[1]) !== null && _a !== void 0 ? _a : 0) | 0\n      };\n    } else {\n      throw new Error('Invalid method config: invalid timeout');\n    }\n  }\n  if ('maxRequestBytes' in obj) {\n    if (typeof obj.maxRequestBytes !== 'number') {\n      throw new Error('Invalid method config: invalid maxRequestBytes');\n    }\n    result.maxRequestBytes = obj.maxRequestBytes;\n  }\n  if ('maxResponseBytes' in obj) {\n    if (typeof obj.maxResponseBytes !== 'number') {\n      throw new Error('Invalid method config: invalid maxRequestBytes');\n    }\n    result.maxResponseBytes = obj.maxResponseBytes;\n  }\n  return result;\n}\nfunction validateServiceConfig(obj) {\n  const result = {\n    loadBalancingConfig: [],\n    methodConfig: []\n  };\n  if ('loadBalancingPolicy' in obj) {\n    if (typeof obj.loadBalancingPolicy === 'string') {\n      result.loadBalancingPolicy = obj.loadBalancingPolicy;\n    } else {\n      throw new Error('Invalid service config: invalid loadBalancingPolicy');\n    }\n  }\n  if ('loadBalancingConfig' in obj) {\n    if (Array.isArray(obj.loadBalancingConfig)) {\n      for (const config of obj.loadBalancingConfig) {\n        result.loadBalancingConfig.push(load_balancer_1.validateLoadBalancingConfig(config));\n      }\n    } else {\n      throw new Error('Invalid service config: invalid loadBalancingConfig');\n    }\n  }\n  if ('methodConfig' in obj) {\n    if (Array.isArray(obj.methodConfig)) {\n      for (const methodConfig of obj.methodConfig) {\n        result.methodConfig.push(validateMethodConfig(methodConfig));\n      }\n    }\n  }\n  // Validate method name uniqueness\n  const seenMethodNames = [];\n  for (const methodConfig of result.methodConfig) {\n    for (const name of methodConfig.name) {\n      for (const seenName of seenMethodNames) {\n        if (name.service === seenName.service && name.method === seenName.method) {\n          throw new Error(`Invalid service config: duplicate name ${name.service}/${name.method}`);\n        }\n      }\n      seenMethodNames.push(name);\n    }\n  }\n  return result;\n}\nexports.validateServiceConfig = validateServiceConfig;\nfunction validateCanaryConfig(obj) {\n  if (!('serviceConfig' in obj)) {\n    throw new Error('Invalid service config choice: missing service config');\n  }\n  const result = {\n    serviceConfig: validateServiceConfig(obj.serviceConfig)\n  };\n  if ('clientLanguage' in obj) {\n    if (Array.isArray(obj.clientLanguage)) {\n      result.clientLanguage = [];\n      for (const lang of obj.clientLanguage) {\n        if (typeof lang === 'string') {\n          result.clientLanguage.push(lang);\n        } else {\n          throw new Error('Invalid service config choice: invalid clientLanguage');\n        }\n      }\n    } else {\n      throw new Error('Invalid service config choice: invalid clientLanguage');\n    }\n  }\n  if ('clientHostname' in obj) {\n    if (Array.isArray(obj.clientHostname)) {\n      result.clientHostname = [];\n      for (const lang of obj.clientHostname) {\n        if (typeof lang === 'string') {\n          result.clientHostname.push(lang);\n        } else {\n          throw new Error('Invalid service config choice: invalid clientHostname');\n        }\n      }\n    } else {\n      throw new Error('Invalid service config choice: invalid clientHostname');\n    }\n  }\n  if ('percentage' in obj) {\n    if (typeof obj.percentage === 'number' && 0 <= obj.percentage && obj.percentage <= 100) {\n      result.percentage = obj.percentage;\n    } else {\n      throw new Error('Invalid service config choice: invalid percentage');\n    }\n  }\n  // Validate that no unexpected fields are present\n  const allowedFields = ['clientLanguage', 'percentage', 'clientHostname', 'serviceConfig'];\n  for (const field in obj) {\n    if (!allowedFields.includes(field)) {\n      throw new Error(`Invalid service config choice: unexpected field ${field}`);\n    }\n  }\n  return result;\n}\nfunction validateAndSelectCanaryConfig(obj, percentage) {\n  if (!Array.isArray(obj)) {\n    throw new Error('Invalid service config list');\n  }\n  for (const config of obj) {\n    const validatedConfig = validateCanaryConfig(config);\n    /* For each field, we check if it is present, then only discard the\n     * config if the field value does not match the current client */\n    if (typeof validatedConfig.percentage === 'number' && percentage > validatedConfig.percentage) {\n      continue;\n    }\n    if (Array.isArray(validatedConfig.clientHostname)) {\n      let hostnameMatched = false;\n      for (const hostname of validatedConfig.clientHostname) {\n        if (hostname === os.hostname()) {\n          hostnameMatched = true;\n        }\n      }\n      if (!hostnameMatched) {\n        continue;\n      }\n    }\n    if (Array.isArray(validatedConfig.clientLanguage)) {\n      let languageMatched = false;\n      for (const language of validatedConfig.clientLanguage) {\n        if (language === CLIENT_LANGUAGE_STRING) {\n          languageMatched = true;\n        }\n      }\n      if (!languageMatched) {\n        continue;\n      }\n    }\n    return validatedConfig.serviceConfig;\n  }\n  throw new Error('No matching service config found');\n}\n/**\n * Find the \"grpc_config\" record among the TXT records, parse its value as JSON, validate its contents,\n * and select a service config with selection fields that all match this client. Most of these steps\n * can fail with an error; the caller must handle any errors thrown this way.\n * @param txtRecord The TXT record array that is output from a successful call to dns.resolveTxt\n * @param percentage A number chosen from the range [0, 100) that is used to select which config to use\n * @return The service configuration to use, given the percentage value, or null if the service config\n *     data has a valid format but none of the options match the current client.\n */\nfunction extractAndSelectServiceConfig(txtRecord, percentage) {\n  for (const record of txtRecord) {\n    if (record.length > 0 && record[0].startsWith('grpc_config=')) {\n      /* Treat the list of strings in this record as a single string and remove\n       * \"grpc_config=\" from the beginning. The rest should be a JSON string */\n      const recordString = record.join('').substring('grpc_config='.length);\n      const recordJson = JSON.parse(recordString);\n      return validateAndSelectCanaryConfig(recordJson, percentage);\n    }\n  }\n  return null;\n}\nexports.extractAndSelectServiceConfig = extractAndSelectServiceConfig;","map":{"version":3,"names":["Object","defineProperty","exports","value","extractAndSelectServiceConfig","validateServiceConfig","os","require","load_balancer_1","TIMEOUT_REGEX","CLIENT_LANGUAGE_STRING","validateName","obj","service","Error","result","method","validateMethodConfig","_a","name","Array","isArray","push","waitForReady","timeout","seconds","nanos","test","timeoutParts","substring","length","split","maxRequestBytes","maxResponseBytes","loadBalancingConfig","methodConfig","loadBalancingPolicy","config","validateLoadBalancingConfig","seenMethodNames","seenName","validateCanaryConfig","serviceConfig","clientLanguage","lang","clientHostname","percentage","allowedFields","field","includes","validateAndSelectCanaryConfig","validatedConfig","hostnameMatched","hostname","languageMatched","language","txtRecord","record","startsWith","recordString","join","recordJson","JSON","parse"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@grpc/grpc-js/build/src/service-config.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extractAndSelectServiceConfig = exports.validateServiceConfig = void 0;\n/* This file implements gRFC A2 and the service config spec:\n * https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md\n * https://github.com/grpc/grpc/blob/master/doc/service_config.md. Each\n * function here takes an object with unknown structure and returns its\n * specific object type if the input has the right structure, and throws an\n * error otherwise. */\n/* The any type is purposely used here. All functions validate their input at\n * runtime */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst os = require(\"os\");\nconst load_balancer_1 = require(\"./load-balancer\");\n/**\n * Recognizes a number with up to 9 digits after the decimal point, followed by\n * an \"s\", representing a number of seconds.\n */\nconst TIMEOUT_REGEX = /^\\d+(\\.\\d{1,9})?s$/;\n/**\n * Client language name used for determining whether this client matches a\n * `ServiceConfigCanaryConfig`'s `clientLanguage` list.\n */\nconst CLIENT_LANGUAGE_STRING = 'node';\nfunction validateName(obj) {\n    if (!('service' in obj) || typeof obj.service !== 'string') {\n        throw new Error('Invalid method config name: invalid service');\n    }\n    const result = {\n        service: obj.service,\n    };\n    if ('method' in obj) {\n        if (typeof obj.method === 'string') {\n            result.method = obj.method;\n        }\n        else {\n            throw new Error('Invalid method config name: invalid method');\n        }\n    }\n    return result;\n}\nfunction validateMethodConfig(obj) {\n    var _a;\n    const result = {\n        name: [],\n    };\n    if (!('name' in obj) || !Array.isArray(obj.name)) {\n        throw new Error('Invalid method config: invalid name array');\n    }\n    for (const name of obj.name) {\n        result.name.push(validateName(name));\n    }\n    if ('waitForReady' in obj) {\n        if (typeof obj.waitForReady !== 'boolean') {\n            throw new Error('Invalid method config: invalid waitForReady');\n        }\n        result.waitForReady = obj.waitForReady;\n    }\n    if ('timeout' in obj) {\n        if (typeof obj.timeout === 'object') {\n            if (!('seconds' in obj.timeout) ||\n                !(typeof obj.timeout.seconds === 'number')) {\n                throw new Error('Invalid method config: invalid timeout.seconds');\n            }\n            if (!('nanos' in obj.timeout) ||\n                !(typeof obj.timeout.nanos === 'number')) {\n                throw new Error('Invalid method config: invalid timeout.nanos');\n            }\n            result.timeout = obj.timeout;\n        }\n        else if (typeof obj.timeout === 'string' &&\n            TIMEOUT_REGEX.test(obj.timeout)) {\n            const timeoutParts = obj.timeout\n                .substring(0, obj.timeout.length - 1)\n                .split('.');\n            result.timeout = {\n                seconds: timeoutParts[0] | 0,\n                nanos: ((_a = timeoutParts[1]) !== null && _a !== void 0 ? _a : 0) | 0,\n            };\n        }\n        else {\n            throw new Error('Invalid method config: invalid timeout');\n        }\n    }\n    if ('maxRequestBytes' in obj) {\n        if (typeof obj.maxRequestBytes !== 'number') {\n            throw new Error('Invalid method config: invalid maxRequestBytes');\n        }\n        result.maxRequestBytes = obj.maxRequestBytes;\n    }\n    if ('maxResponseBytes' in obj) {\n        if (typeof obj.maxResponseBytes !== 'number') {\n            throw new Error('Invalid method config: invalid maxRequestBytes');\n        }\n        result.maxResponseBytes = obj.maxResponseBytes;\n    }\n    return result;\n}\nfunction validateServiceConfig(obj) {\n    const result = {\n        loadBalancingConfig: [],\n        methodConfig: [],\n    };\n    if ('loadBalancingPolicy' in obj) {\n        if (typeof obj.loadBalancingPolicy === 'string') {\n            result.loadBalancingPolicy = obj.loadBalancingPolicy;\n        }\n        else {\n            throw new Error('Invalid service config: invalid loadBalancingPolicy');\n        }\n    }\n    if ('loadBalancingConfig' in obj) {\n        if (Array.isArray(obj.loadBalancingConfig)) {\n            for (const config of obj.loadBalancingConfig) {\n                result.loadBalancingConfig.push(load_balancer_1.validateLoadBalancingConfig(config));\n            }\n        }\n        else {\n            throw new Error('Invalid service config: invalid loadBalancingConfig');\n        }\n    }\n    if ('methodConfig' in obj) {\n        if (Array.isArray(obj.methodConfig)) {\n            for (const methodConfig of obj.methodConfig) {\n                result.methodConfig.push(validateMethodConfig(methodConfig));\n            }\n        }\n    }\n    // Validate method name uniqueness\n    const seenMethodNames = [];\n    for (const methodConfig of result.methodConfig) {\n        for (const name of methodConfig.name) {\n            for (const seenName of seenMethodNames) {\n                if (name.service === seenName.service &&\n                    name.method === seenName.method) {\n                    throw new Error(`Invalid service config: duplicate name ${name.service}/${name.method}`);\n                }\n            }\n            seenMethodNames.push(name);\n        }\n    }\n    return result;\n}\nexports.validateServiceConfig = validateServiceConfig;\nfunction validateCanaryConfig(obj) {\n    if (!('serviceConfig' in obj)) {\n        throw new Error('Invalid service config choice: missing service config');\n    }\n    const result = {\n        serviceConfig: validateServiceConfig(obj.serviceConfig),\n    };\n    if ('clientLanguage' in obj) {\n        if (Array.isArray(obj.clientLanguage)) {\n            result.clientLanguage = [];\n            for (const lang of obj.clientLanguage) {\n                if (typeof lang === 'string') {\n                    result.clientLanguage.push(lang);\n                }\n                else {\n                    throw new Error('Invalid service config choice: invalid clientLanguage');\n                }\n            }\n        }\n        else {\n            throw new Error('Invalid service config choice: invalid clientLanguage');\n        }\n    }\n    if ('clientHostname' in obj) {\n        if (Array.isArray(obj.clientHostname)) {\n            result.clientHostname = [];\n            for (const lang of obj.clientHostname) {\n                if (typeof lang === 'string') {\n                    result.clientHostname.push(lang);\n                }\n                else {\n                    throw new Error('Invalid service config choice: invalid clientHostname');\n                }\n            }\n        }\n        else {\n            throw new Error('Invalid service config choice: invalid clientHostname');\n        }\n    }\n    if ('percentage' in obj) {\n        if (typeof obj.percentage === 'number' &&\n            0 <= obj.percentage &&\n            obj.percentage <= 100) {\n            result.percentage = obj.percentage;\n        }\n        else {\n            throw new Error('Invalid service config choice: invalid percentage');\n        }\n    }\n    // Validate that no unexpected fields are present\n    const allowedFields = [\n        'clientLanguage',\n        'percentage',\n        'clientHostname',\n        'serviceConfig',\n    ];\n    for (const field in obj) {\n        if (!allowedFields.includes(field)) {\n            throw new Error(`Invalid service config choice: unexpected field ${field}`);\n        }\n    }\n    return result;\n}\nfunction validateAndSelectCanaryConfig(obj, percentage) {\n    if (!Array.isArray(obj)) {\n        throw new Error('Invalid service config list');\n    }\n    for (const config of obj) {\n        const validatedConfig = validateCanaryConfig(config);\n        /* For each field, we check if it is present, then only discard the\n         * config if the field value does not match the current client */\n        if (typeof validatedConfig.percentage === 'number' &&\n            percentage > validatedConfig.percentage) {\n            continue;\n        }\n        if (Array.isArray(validatedConfig.clientHostname)) {\n            let hostnameMatched = false;\n            for (const hostname of validatedConfig.clientHostname) {\n                if (hostname === os.hostname()) {\n                    hostnameMatched = true;\n                }\n            }\n            if (!hostnameMatched) {\n                continue;\n            }\n        }\n        if (Array.isArray(validatedConfig.clientLanguage)) {\n            let languageMatched = false;\n            for (const language of validatedConfig.clientLanguage) {\n                if (language === CLIENT_LANGUAGE_STRING) {\n                    languageMatched = true;\n                }\n            }\n            if (!languageMatched) {\n                continue;\n            }\n        }\n        return validatedConfig.serviceConfig;\n    }\n    throw new Error('No matching service config found');\n}\n/**\n * Find the \"grpc_config\" record among the TXT records, parse its value as JSON, validate its contents,\n * and select a service config with selection fields that all match this client. Most of these steps\n * can fail with an error; the caller must handle any errors thrown this way.\n * @param txtRecord The TXT record array that is output from a successful call to dns.resolveTxt\n * @param percentage A number chosen from the range [0, 100) that is used to select which config to use\n * @return The service configuration to use, given the percentage value, or null if the service config\n *     data has a valid format but none of the options match the current client.\n */\nfunction extractAndSelectServiceConfig(txtRecord, percentage) {\n    for (const record of txtRecord) {\n        if (record.length > 0 && record[0].startsWith('grpc_config=')) {\n            /* Treat the list of strings in this record as a single string and remove\n             * \"grpc_config=\" from the beginning. The rest should be a JSON string */\n            const recordString = record.join('').substring('grpc_config='.length);\n            const recordJson = JSON.parse(recordString);\n            return validateAndSelectCanaryConfig(recordJson, percentage);\n        }\n    }\n    return null;\n}\nexports.extractAndSelectServiceConfig = extractAndSelectServiceConfig;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,6BAA6B,GAAGF,OAAO,CAACG,qBAAqB,GAAG,KAAK,CAAC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,eAAe,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAClD;AACA;AACA;AACA;AACA,MAAME,aAAa,GAAG,oBAAoB;AAC1C;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,MAAM;AACrC,SAASC,YAAY,CAACC,GAAG,EAAE;EACvB,IAAI,EAAE,SAAS,IAAIA,GAAG,CAAC,IAAI,OAAOA,GAAG,CAACC,OAAO,KAAK,QAAQ,EAAE;IACxD,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAClE;EACA,MAAMC,MAAM,GAAG;IACXF,OAAO,EAAED,GAAG,CAACC;EACjB,CAAC;EACD,IAAI,QAAQ,IAAID,GAAG,EAAE;IACjB,IAAI,OAAOA,GAAG,CAACI,MAAM,KAAK,QAAQ,EAAE;MAChCD,MAAM,CAACC,MAAM,GAAGJ,GAAG,CAACI,MAAM;IAC9B,CAAC,MACI;MACD,MAAM,IAAIF,KAAK,CAAC,4CAA4C,CAAC;IACjE;EACJ;EACA,OAAOC,MAAM;AACjB;AACA,SAASE,oBAAoB,CAACL,GAAG,EAAE;EAC/B,IAAIM,EAAE;EACN,MAAMH,MAAM,GAAG;IACXI,IAAI,EAAE;EACV,CAAC;EACD,IAAI,EAAE,MAAM,IAAIP,GAAG,CAAC,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACT,GAAG,CAACO,IAAI,CAAC,EAAE;IAC9C,MAAM,IAAIL,KAAK,CAAC,2CAA2C,CAAC;EAChE;EACA,KAAK,MAAMK,IAAI,IAAIP,GAAG,CAACO,IAAI,EAAE;IACzBJ,MAAM,CAACI,IAAI,CAACG,IAAI,CAACX,YAAY,CAACQ,IAAI,CAAC,CAAC;EACxC;EACA,IAAI,cAAc,IAAIP,GAAG,EAAE;IACvB,IAAI,OAAOA,GAAG,CAACW,YAAY,KAAK,SAAS,EAAE;MACvC,MAAM,IAAIT,KAAK,CAAC,6CAA6C,CAAC;IAClE;IACAC,MAAM,CAACQ,YAAY,GAAGX,GAAG,CAACW,YAAY;EAC1C;EACA,IAAI,SAAS,IAAIX,GAAG,EAAE;IAClB,IAAI,OAAOA,GAAG,CAACY,OAAO,KAAK,QAAQ,EAAE;MACjC,IAAI,EAAE,SAAS,IAAIZ,GAAG,CAACY,OAAO,CAAC,IAC3B,EAAE,OAAOZ,GAAG,CAACY,OAAO,CAACC,OAAO,KAAK,QAAQ,CAAC,EAAE;QAC5C,MAAM,IAAIX,KAAK,CAAC,gDAAgD,CAAC;MACrE;MACA,IAAI,EAAE,OAAO,IAAIF,GAAG,CAACY,OAAO,CAAC,IACzB,EAAE,OAAOZ,GAAG,CAACY,OAAO,CAACE,KAAK,KAAK,QAAQ,CAAC,EAAE;QAC1C,MAAM,IAAIZ,KAAK,CAAC,8CAA8C,CAAC;MACnE;MACAC,MAAM,CAACS,OAAO,GAAGZ,GAAG,CAACY,OAAO;IAChC,CAAC,MACI,IAAI,OAAOZ,GAAG,CAACY,OAAO,KAAK,QAAQ,IACpCf,aAAa,CAACkB,IAAI,CAACf,GAAG,CAACY,OAAO,CAAC,EAAE;MACjC,MAAMI,YAAY,GAAGhB,GAAG,CAACY,OAAO,CAC3BK,SAAS,CAAC,CAAC,EAAEjB,GAAG,CAACY,OAAO,CAACM,MAAM,GAAG,CAAC,CAAC,CACpCC,KAAK,CAAC,GAAG,CAAC;MACfhB,MAAM,CAACS,OAAO,GAAG;QACbC,OAAO,EAAEG,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC;QAC5BF,KAAK,EAAE,CAAC,CAACR,EAAE,GAAGU,YAAY,CAAC,CAAC,CAAC,MAAM,IAAI,IAAIV,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,IAAI;MACzE,CAAC;IACL,CAAC,MACI;MACD,MAAM,IAAIJ,KAAK,CAAC,wCAAwC,CAAC;IAC7D;EACJ;EACA,IAAI,iBAAiB,IAAIF,GAAG,EAAE;IAC1B,IAAI,OAAOA,GAAG,CAACoB,eAAe,KAAK,QAAQ,EAAE;MACzC,MAAM,IAAIlB,KAAK,CAAC,gDAAgD,CAAC;IACrE;IACAC,MAAM,CAACiB,eAAe,GAAGpB,GAAG,CAACoB,eAAe;EAChD;EACA,IAAI,kBAAkB,IAAIpB,GAAG,EAAE;IAC3B,IAAI,OAAOA,GAAG,CAACqB,gBAAgB,KAAK,QAAQ,EAAE;MAC1C,MAAM,IAAInB,KAAK,CAAC,gDAAgD,CAAC;IACrE;IACAC,MAAM,CAACkB,gBAAgB,GAAGrB,GAAG,CAACqB,gBAAgB;EAClD;EACA,OAAOlB,MAAM;AACjB;AACA,SAASV,qBAAqB,CAACO,GAAG,EAAE;EAChC,MAAMG,MAAM,GAAG;IACXmB,mBAAmB,EAAE,EAAE;IACvBC,YAAY,EAAE;EAClB,CAAC;EACD,IAAI,qBAAqB,IAAIvB,GAAG,EAAE;IAC9B,IAAI,OAAOA,GAAG,CAACwB,mBAAmB,KAAK,QAAQ,EAAE;MAC7CrB,MAAM,CAACqB,mBAAmB,GAAGxB,GAAG,CAACwB,mBAAmB;IACxD,CAAC,MACI;MACD,MAAM,IAAItB,KAAK,CAAC,qDAAqD,CAAC;IAC1E;EACJ;EACA,IAAI,qBAAqB,IAAIF,GAAG,EAAE;IAC9B,IAAIQ,KAAK,CAACC,OAAO,CAACT,GAAG,CAACsB,mBAAmB,CAAC,EAAE;MACxC,KAAK,MAAMG,MAAM,IAAIzB,GAAG,CAACsB,mBAAmB,EAAE;QAC1CnB,MAAM,CAACmB,mBAAmB,CAACZ,IAAI,CAACd,eAAe,CAAC8B,2BAA2B,CAACD,MAAM,CAAC,CAAC;MACxF;IACJ,CAAC,MACI;MACD,MAAM,IAAIvB,KAAK,CAAC,qDAAqD,CAAC;IAC1E;EACJ;EACA,IAAI,cAAc,IAAIF,GAAG,EAAE;IACvB,IAAIQ,KAAK,CAACC,OAAO,CAACT,GAAG,CAACuB,YAAY,CAAC,EAAE;MACjC,KAAK,MAAMA,YAAY,IAAIvB,GAAG,CAACuB,YAAY,EAAE;QACzCpB,MAAM,CAACoB,YAAY,CAACb,IAAI,CAACL,oBAAoB,CAACkB,YAAY,CAAC,CAAC;MAChE;IACJ;EACJ;EACA;EACA,MAAMI,eAAe,GAAG,EAAE;EAC1B,KAAK,MAAMJ,YAAY,IAAIpB,MAAM,CAACoB,YAAY,EAAE;IAC5C,KAAK,MAAMhB,IAAI,IAAIgB,YAAY,CAAChB,IAAI,EAAE;MAClC,KAAK,MAAMqB,QAAQ,IAAID,eAAe,EAAE;QACpC,IAAIpB,IAAI,CAACN,OAAO,KAAK2B,QAAQ,CAAC3B,OAAO,IACjCM,IAAI,CAACH,MAAM,KAAKwB,QAAQ,CAACxB,MAAM,EAAE;UACjC,MAAM,IAAIF,KAAK,CAAE,0CAAyCK,IAAI,CAACN,OAAQ,IAAGM,IAAI,CAACH,MAAO,EAAC,CAAC;QAC5F;MACJ;MACAuB,eAAe,CAACjB,IAAI,CAACH,IAAI,CAAC;IAC9B;EACJ;EACA,OAAOJ,MAAM;AACjB;AACAb,OAAO,CAACG,qBAAqB,GAAGA,qBAAqB;AACrD,SAASoC,oBAAoB,CAAC7B,GAAG,EAAE;EAC/B,IAAI,EAAE,eAAe,IAAIA,GAAG,CAAC,EAAE;IAC3B,MAAM,IAAIE,KAAK,CAAC,uDAAuD,CAAC;EAC5E;EACA,MAAMC,MAAM,GAAG;IACX2B,aAAa,EAAErC,qBAAqB,CAACO,GAAG,CAAC8B,aAAa;EAC1D,CAAC;EACD,IAAI,gBAAgB,IAAI9B,GAAG,EAAE;IACzB,IAAIQ,KAAK,CAACC,OAAO,CAACT,GAAG,CAAC+B,cAAc,CAAC,EAAE;MACnC5B,MAAM,CAAC4B,cAAc,GAAG,EAAE;MAC1B,KAAK,MAAMC,IAAI,IAAIhC,GAAG,CAAC+B,cAAc,EAAE;QACnC,IAAI,OAAOC,IAAI,KAAK,QAAQ,EAAE;UAC1B7B,MAAM,CAAC4B,cAAc,CAACrB,IAAI,CAACsB,IAAI,CAAC;QACpC,CAAC,MACI;UACD,MAAM,IAAI9B,KAAK,CAAC,uDAAuD,CAAC;QAC5E;MACJ;IACJ,CAAC,MACI;MACD,MAAM,IAAIA,KAAK,CAAC,uDAAuD,CAAC;IAC5E;EACJ;EACA,IAAI,gBAAgB,IAAIF,GAAG,EAAE;IACzB,IAAIQ,KAAK,CAACC,OAAO,CAACT,GAAG,CAACiC,cAAc,CAAC,EAAE;MACnC9B,MAAM,CAAC8B,cAAc,GAAG,EAAE;MAC1B,KAAK,MAAMD,IAAI,IAAIhC,GAAG,CAACiC,cAAc,EAAE;QACnC,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;UAC1B7B,MAAM,CAAC8B,cAAc,CAACvB,IAAI,CAACsB,IAAI,CAAC;QACpC,CAAC,MACI;UACD,MAAM,IAAI9B,KAAK,CAAC,uDAAuD,CAAC;QAC5E;MACJ;IACJ,CAAC,MACI;MACD,MAAM,IAAIA,KAAK,CAAC,uDAAuD,CAAC;IAC5E;EACJ;EACA,IAAI,YAAY,IAAIF,GAAG,EAAE;IACrB,IAAI,OAAOA,GAAG,CAACkC,UAAU,KAAK,QAAQ,IAClC,CAAC,IAAIlC,GAAG,CAACkC,UAAU,IACnBlC,GAAG,CAACkC,UAAU,IAAI,GAAG,EAAE;MACvB/B,MAAM,CAAC+B,UAAU,GAAGlC,GAAG,CAACkC,UAAU;IACtC,CAAC,MACI;MACD,MAAM,IAAIhC,KAAK,CAAC,mDAAmD,CAAC;IACxE;EACJ;EACA;EACA,MAAMiC,aAAa,GAAG,CAClB,gBAAgB,EAChB,YAAY,EACZ,gBAAgB,EAChB,eAAe,CAClB;EACD,KAAK,MAAMC,KAAK,IAAIpC,GAAG,EAAE;IACrB,IAAI,CAACmC,aAAa,CAACE,QAAQ,CAACD,KAAK,CAAC,EAAE;MAChC,MAAM,IAAIlC,KAAK,CAAE,mDAAkDkC,KAAM,EAAC,CAAC;IAC/E;EACJ;EACA,OAAOjC,MAAM;AACjB;AACA,SAASmC,6BAA6B,CAACtC,GAAG,EAAEkC,UAAU,EAAE;EACpD,IAAI,CAAC1B,KAAK,CAACC,OAAO,CAACT,GAAG,CAAC,EAAE;IACrB,MAAM,IAAIE,KAAK,CAAC,6BAA6B,CAAC;EAClD;EACA,KAAK,MAAMuB,MAAM,IAAIzB,GAAG,EAAE;IACtB,MAAMuC,eAAe,GAAGV,oBAAoB,CAACJ,MAAM,CAAC;IACpD;AACR;IACQ,IAAI,OAAOc,eAAe,CAACL,UAAU,KAAK,QAAQ,IAC9CA,UAAU,GAAGK,eAAe,CAACL,UAAU,EAAE;MACzC;IACJ;IACA,IAAI1B,KAAK,CAACC,OAAO,CAAC8B,eAAe,CAACN,cAAc,CAAC,EAAE;MAC/C,IAAIO,eAAe,GAAG,KAAK;MAC3B,KAAK,MAAMC,QAAQ,IAAIF,eAAe,CAACN,cAAc,EAAE;QACnD,IAAIQ,QAAQ,KAAK/C,EAAE,CAAC+C,QAAQ,EAAE,EAAE;UAC5BD,eAAe,GAAG,IAAI;QAC1B;MACJ;MACA,IAAI,CAACA,eAAe,EAAE;QAClB;MACJ;IACJ;IACA,IAAIhC,KAAK,CAACC,OAAO,CAAC8B,eAAe,CAACR,cAAc,CAAC,EAAE;MAC/C,IAAIW,eAAe,GAAG,KAAK;MAC3B,KAAK,MAAMC,QAAQ,IAAIJ,eAAe,CAACR,cAAc,EAAE;QACnD,IAAIY,QAAQ,KAAK7C,sBAAsB,EAAE;UACrC4C,eAAe,GAAG,IAAI;QAC1B;MACJ;MACA,IAAI,CAACA,eAAe,EAAE;QAClB;MACJ;IACJ;IACA,OAAOH,eAAe,CAACT,aAAa;EACxC;EACA,MAAM,IAAI5B,KAAK,CAAC,kCAAkC,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASV,6BAA6B,CAACoD,SAAS,EAAEV,UAAU,EAAE;EAC1D,KAAK,MAAMW,MAAM,IAAID,SAAS,EAAE;IAC5B,IAAIC,MAAM,CAAC3B,MAAM,GAAG,CAAC,IAAI2B,MAAM,CAAC,CAAC,CAAC,CAACC,UAAU,CAAC,cAAc,CAAC,EAAE;MAC3D;AACZ;MACY,MAAMC,YAAY,GAAGF,MAAM,CAACG,IAAI,CAAC,EAAE,CAAC,CAAC/B,SAAS,CAAC,cAAc,CAACC,MAAM,CAAC;MACrE,MAAM+B,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC;MAC3C,OAAOT,6BAA6B,CAACW,UAAU,EAAEf,UAAU,CAAC;IAChE;EACJ;EACA,OAAO,IAAI;AACf;AACA5C,OAAO,CAACE,6BAA6B,GAAGA,6BAA6B"},"metadata":{},"sourceType":"script","externalDependencies":[]}