{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode } from '@opentelemetry/core';\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nvar InMemorySpanExporter = /** @class */function () {\n  function InMemorySpanExporter() {\n    this._finishedSpans = [];\n    /**\n     * Indicates if the exporter has been \"shutdown.\"\n     * When false, exported spans will not be stored in-memory.\n     */\n    this._stopped = false;\n  }\n  InMemorySpanExporter.prototype.export = function (spans, resultCallback) {\n    var _a;\n    if (this._stopped) return resultCallback({\n      code: ExportResultCode.FAILED,\n      error: new Error('Exporter has been stopped')\n    });\n    (_a = this._finishedSpans).push.apply(_a, spans);\n    setTimeout(function () {\n      return resultCallback({\n        code: ExportResultCode.SUCCESS\n      });\n    }, 0);\n  };\n  InMemorySpanExporter.prototype.shutdown = function () {\n    this._stopped = true;\n    this._finishedSpans = [];\n    return Promise.resolve();\n  };\n  InMemorySpanExporter.prototype.reset = function () {\n    this._finishedSpans = [];\n  };\n  InMemorySpanExporter.prototype.getFinishedSpans = function () {\n    return this._finishedSpans;\n  };\n  return InMemorySpanExporter;\n}();\nexport { InMemorySpanExporter };","map":{"version":3,"names":["ExportResultCode","InMemorySpanExporter","_finishedSpans","_stopped","prototype","export","spans","resultCallback","_a","code","FAILED","error","Error","push","apply","setTimeout","SUCCESS","shutdown","Promise","resolve","reset","getFinishedSpans"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/InMemorySpanExporter.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ExportResultCode } from '@opentelemetry/core';\n/**\n * This class can be used for testing purposes. It stores the exported spans\n * in a list in memory that can be retrieved using the `getFinishedSpans()`\n * method.\n */\nvar InMemorySpanExporter = /** @class */ (function () {\n    function InMemorySpanExporter() {\n        this._finishedSpans = [];\n        /**\n         * Indicates if the exporter has been \"shutdown.\"\n         * When false, exported spans will not be stored in-memory.\n         */\n        this._stopped = false;\n    }\n    InMemorySpanExporter.prototype.export = function (spans, resultCallback) {\n        var _a;\n        if (this._stopped)\n            return resultCallback({\n                code: ExportResultCode.FAILED,\n                error: new Error('Exporter has been stopped'),\n            });\n        (_a = this._finishedSpans).push.apply(_a, spans);\n        setTimeout(function () { return resultCallback({ code: ExportResultCode.SUCCESS }); }, 0);\n    };\n    InMemorySpanExporter.prototype.shutdown = function () {\n        this._stopped = true;\n        this._finishedSpans = [];\n        return Promise.resolve();\n    };\n    InMemorySpanExporter.prototype.reset = function () {\n        this._finishedSpans = [];\n    };\n    InMemorySpanExporter.prototype.getFinishedSpans = function () {\n        return this._finishedSpans;\n    };\n    return InMemorySpanExporter;\n}());\nexport { InMemorySpanExporter };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAgB,QAAQ,qBAAqB;AACtD;AACA;AACA;AACA;AACA;AACA,IAAIC,oBAAoB,GAAG,aAAe,YAAY;EAClD,SAASA,oBAAoB,GAAG;IAC5B,IAAI,CAACC,cAAc,GAAG,EAAE;IACxB;AACR;AACA;AACA;IACQ,IAAI,CAACC,QAAQ,GAAG,KAAK;EACzB;EACAF,oBAAoB,CAACG,SAAS,CAACC,MAAM,GAAG,UAAUC,KAAK,EAAEC,cAAc,EAAE;IACrE,IAAIC,EAAE;IACN,IAAI,IAAI,CAACL,QAAQ,EACb,OAAOI,cAAc,CAAC;MAClBE,IAAI,EAAET,gBAAgB,CAACU,MAAM;MAC7BC,KAAK,EAAE,IAAIC,KAAK,CAAC,2BAA2B;IAChD,CAAC,CAAC;IACN,CAACJ,EAAE,GAAG,IAAI,CAACN,cAAc,EAAEW,IAAI,CAACC,KAAK,CAACN,EAAE,EAAEF,KAAK,CAAC;IAChDS,UAAU,CAAC,YAAY;MAAE,OAAOR,cAAc,CAAC;QAAEE,IAAI,EAAET,gBAAgB,CAACgB;MAAQ,CAAC,CAAC;IAAE,CAAC,EAAE,CAAC,CAAC;EAC7F,CAAC;EACDf,oBAAoB,CAACG,SAAS,CAACa,QAAQ,GAAG,YAAY;IAClD,IAAI,CAACd,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACD,cAAc,GAAG,EAAE;IACxB,OAAOgB,OAAO,CAACC,OAAO,EAAE;EAC5B,CAAC;EACDlB,oBAAoB,CAACG,SAAS,CAACgB,KAAK,GAAG,YAAY;IAC/C,IAAI,CAAClB,cAAc,GAAG,EAAE;EAC5B,CAAC;EACDD,oBAAoB,CAACG,SAAS,CAACiB,gBAAgB,GAAG,YAAY;IAC1D,OAAO,IAAI,CAACnB,cAAc;EAC9B,CAAC;EACD,OAAOD,oBAAoB;AAC/B,CAAC,EAAG;AACJ,SAASA,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}