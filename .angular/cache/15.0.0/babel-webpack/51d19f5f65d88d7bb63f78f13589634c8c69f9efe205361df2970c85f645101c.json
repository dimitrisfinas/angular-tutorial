{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { DocumentLoadInstrumentation } from '@opentelemetry/instrumentation-document-load';\nimport { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch';\nimport { UserInteractionInstrumentation } from '@opentelemetry/instrumentation-user-interaction';\nimport { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';\nvar InstrumentationMap = {\n  '@opentelemetry/instrumentation-document-load': DocumentLoadInstrumentation,\n  '@opentelemetry/instrumentation-fetch': FetchInstrumentation,\n  '@opentelemetry/instrumentation-user-interaction': UserInteractionInstrumentation,\n  '@opentelemetry/instrumentation-xml-http-request': XMLHttpRequestInstrumentation\n};\nexport function getWebAutoInstrumentations(inputConfigs) {\n  var _a;\n  if (inputConfigs === void 0) {\n    inputConfigs = {};\n  }\n  for (var _i = 0, _b = Object.keys(inputConfigs); _i < _b.length; _i++) {\n    var name_1 = _b[_i];\n    if (!Object.prototype.hasOwnProperty.call(InstrumentationMap, name_1)) {\n      diag.error(\"Provided instrumentation name \\\"\" + name_1 + \"\\\" not found\");\n      continue;\n    }\n  }\n  var instrumentations = [];\n  for (var _c = 0, _d = Object.keys(InstrumentationMap); _c < _d.length; _c++) {\n    var name_2 = _d[_c];\n    var Instance = InstrumentationMap[name_2];\n    // Defaults are defined by the instrumentation itself\n    var userConfig = (_a = inputConfigs[name_2]) !== null && _a !== void 0 ? _a : {};\n    if (userConfig.enabled === false) {\n      diag.debug(\"Disabling instrumentation for \" + name_2);\n      continue;\n    }\n    try {\n      diag.debug(\"Loading instrumentation for \" + name_2);\n      instrumentations.push(new Instance(userConfig));\n    } catch (e) {\n      diag.error(e);\n    }\n  }\n  return instrumentations;\n}","map":{"version":3,"names":["diag","DocumentLoadInstrumentation","FetchInstrumentation","UserInteractionInstrumentation","XMLHttpRequestInstrumentation","InstrumentationMap","getWebAutoInstrumentations","inputConfigs","_a","_i","_b","Object","keys","length","name_1","prototype","hasOwnProperty","call","error","instrumentations","_c","_d","name_2","Instance","userConfig","enabled","debug","push","e"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/auto-instrumentations-web/build/esm/utils.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { DocumentLoadInstrumentation } from '@opentelemetry/instrumentation-document-load';\nimport { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch';\nimport { UserInteractionInstrumentation } from '@opentelemetry/instrumentation-user-interaction';\nimport { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';\nvar InstrumentationMap = {\n    '@opentelemetry/instrumentation-document-load': DocumentLoadInstrumentation,\n    '@opentelemetry/instrumentation-fetch': FetchInstrumentation,\n    '@opentelemetry/instrumentation-user-interaction': UserInteractionInstrumentation,\n    '@opentelemetry/instrumentation-xml-http-request': XMLHttpRequestInstrumentation,\n};\nexport function getWebAutoInstrumentations(inputConfigs) {\n    var _a;\n    if (inputConfigs === void 0) { inputConfigs = {}; }\n    for (var _i = 0, _b = Object.keys(inputConfigs); _i < _b.length; _i++) {\n        var name_1 = _b[_i];\n        if (!Object.prototype.hasOwnProperty.call(InstrumentationMap, name_1)) {\n            diag.error(\"Provided instrumentation name \\\"\" + name_1 + \"\\\" not found\");\n            continue;\n        }\n    }\n    var instrumentations = [];\n    for (var _c = 0, _d = Object.keys(InstrumentationMap); _c < _d.length; _c++) {\n        var name_2 = _d[_c];\n        var Instance = InstrumentationMap[name_2];\n        // Defaults are defined by the instrumentation itself\n        var userConfig = (_a = inputConfigs[name_2]) !== null && _a !== void 0 ? _a : {};\n        if (userConfig.enabled === false) {\n            diag.debug(\"Disabling instrumentation for \" + name_2);\n            continue;\n        }\n        try {\n            diag.debug(\"Loading instrumentation for \" + name_2);\n            instrumentations.push(new Instance(userConfig));\n        }\n        catch (e) {\n            diag.error(e);\n        }\n    }\n    return instrumentations;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAI,QAAQ,oBAAoB;AACzC,SAASC,2BAA2B,QAAQ,8CAA8C;AAC1F,SAASC,oBAAoB,QAAQ,sCAAsC;AAC3E,SAASC,8BAA8B,QAAQ,iDAAiD;AAChG,SAASC,6BAA6B,QAAQ,iDAAiD;AAC/F,IAAIC,kBAAkB,GAAG;EACrB,8CAA8C,EAAEJ,2BAA2B;EAC3E,sCAAsC,EAAEC,oBAAoB;EAC5D,iDAAiD,EAAEC,8BAA8B;EACjF,iDAAiD,EAAEC;AACvD,CAAC;AACD,OAAO,SAASE,0BAA0B,CAACC,YAAY,EAAE;EACrD,IAAIC,EAAE;EACN,IAAID,YAAY,KAAK,KAAK,CAAC,EAAE;IAAEA,YAAY,GAAG,CAAC,CAAC;EAAE;EAClD,KAAK,IAAIE,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAGC,MAAM,CAACC,IAAI,CAACL,YAAY,CAAC,EAAEE,EAAE,GAAGC,EAAE,CAACG,MAAM,EAAEJ,EAAE,EAAE,EAAE;IACnE,IAAIK,MAAM,GAAGJ,EAAE,CAACD,EAAE,CAAC;IACnB,IAAI,CAACE,MAAM,CAACI,SAAS,CAACC,cAAc,CAACC,IAAI,CAACZ,kBAAkB,EAAES,MAAM,CAAC,EAAE;MACnEd,IAAI,CAACkB,KAAK,CAAC,kCAAkC,GAAGJ,MAAM,GAAG,cAAc,CAAC;MACxE;IACJ;EACJ;EACA,IAAIK,gBAAgB,GAAG,EAAE;EACzB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAGV,MAAM,CAACC,IAAI,CAACP,kBAAkB,CAAC,EAAEe,EAAE,GAAGC,EAAE,CAACR,MAAM,EAAEO,EAAE,EAAE,EAAE;IACzE,IAAIE,MAAM,GAAGD,EAAE,CAACD,EAAE,CAAC;IACnB,IAAIG,QAAQ,GAAGlB,kBAAkB,CAACiB,MAAM,CAAC;IACzC;IACA,IAAIE,UAAU,GAAG,CAAChB,EAAE,GAAGD,YAAY,CAACe,MAAM,CAAC,MAAM,IAAI,IAAId,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC;IAChF,IAAIgB,UAAU,CAACC,OAAO,KAAK,KAAK,EAAE;MAC9BzB,IAAI,CAAC0B,KAAK,CAAC,gCAAgC,GAAGJ,MAAM,CAAC;MACrD;IACJ;IACA,IAAI;MACAtB,IAAI,CAAC0B,KAAK,CAAC,8BAA8B,GAAGJ,MAAM,CAAC;MACnDH,gBAAgB,CAACQ,IAAI,CAAC,IAAIJ,QAAQ,CAACC,UAAU,CAAC,CAAC;IACnD,CAAC,CACD,OAAOI,CAAC,EAAE;MACN5B,IAAI,CAACkB,KAAK,CAACU,CAAC,CAAC;IACjB;EACJ;EACA,OAAOT,gBAAgB;AAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}