{"ast":null,"code":"import _asyncToGenerator from \"/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CompositePropagator, W3CBaggagePropagator, W3CTraceContextPropagator } from '@opentelemetry/core';\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\nimport { Resource } from '@opentelemetry/resources';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nimport { environment } from './../../environments/environment';\nconst FrontendTracer = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* () {\n    const {\n      ZoneContextManager\n    } = yield import('@opentelemetry/context-zone');\n    const provider = new WebTracerProvider({\n      resource: new Resource({\n        [SemanticResourceAttributes.SERVICE_NAME]: environment.OTEL_SERVICE_NAME\n      })\n    });\n    //const traceExporter = new ConsoleSpanExporter();\n    //const traceExporter = new OTLPTraceExporter();\n    const traceExporter = new OTLPTraceExporter({\n      url: environment.OTEL_EXPORTER_OTLP_ENDPOINT,\n      headers: {\n        'lightstep-access-token': 'dgWk8TFEi+CX+1fTzgWJdvljm9K20CjpWINXAyudQ8qXgyYCQpK3VgeH/0hdfOmcdukuMkk1/o4Mr7f0R5wyzDf8RaMXtGZY/lfzZVzm'\n      }\n    });\n    provider.addSpanProcessor(new SimpleSpanProcessor(traceExporter));\n    const contextManager = new ZoneContextManager();\n    provider.register({\n      contextManager,\n      propagator: new CompositePropagator({\n        propagators: [new W3CBaggagePropagator(), new W3CTraceContextPropagator()]\n      })\n    });\n    registerInstrumentations({\n      tracerProvider: provider,\n      instrumentations: [getWebAutoInstrumentations({\n        '@opentelemetry/instrumentation-fetch': {\n          propagateTraceHeaderCorsUrls: /.*/,\n          clearTimingResources: true\n        }\n      })]\n    });\n  });\n  return function FrontendTracer() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default FrontendTracer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}