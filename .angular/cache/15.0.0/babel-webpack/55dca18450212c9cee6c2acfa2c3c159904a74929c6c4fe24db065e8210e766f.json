{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport { defaultTextMapGetter, defaultTextMapSetter } from '../propagation/TextMapPropagator';\nimport { getBaggage, setBaggage, deleteBaggage } from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function PropagationAPI() {\n    this.createBaggage = createBaggage;\n    this.getBaggage = getBaggage;\n    this.setBaggage = setBaggage;\n    this.deleteBaggage = deleteBaggage;\n  }\n  /** Get the singleton instance of the Propagator API */\n  PropagationAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current propagator.\n   *\n   * @returns true if the propagator was successfully registered, else false\n   */\n  PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n    return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n  };\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n  PropagationAPI.prototype.inject = function (context, carrier, setter) {\n    if (setter === void 0) {\n      setter = defaultTextMapSetter;\n    }\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  };\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n  PropagationAPI.prototype.extract = function (context, carrier, getter) {\n    if (getter === void 0) {\n      getter = defaultTextMapGetter;\n    }\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  };\n  /**\n   * Return a list of all fields which may be used by the propagator.\n   */\n  PropagationAPI.prototype.fields = function () {\n    return this._getGlobalPropagator().fields();\n  };\n  /** Remove the global propagator */\n  PropagationAPI.prototype.disable = function () {\n    unregisterGlobal(API_NAME, DiagAPI.instance());\n  };\n  PropagationAPI.prototype._getGlobalPropagator = function () {\n    return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n  };\n  return PropagationAPI;\n}();\nexport { PropagationAPI };","map":{"version":3,"names":["getGlobal","registerGlobal","unregisterGlobal","NoopTextMapPropagator","defaultTextMapGetter","defaultTextMapSetter","getBaggage","setBaggage","deleteBaggage","createBaggage","DiagAPI","API_NAME","NOOP_TEXT_MAP_PROPAGATOR","PropagationAPI","getInstance","_instance","prototype","setGlobalPropagator","propagator","instance","inject","context","carrier","setter","_getGlobalPropagator","extract","getter","fields","disable"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/api/build/esm/api/propagation.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nimport { NoopTextMapPropagator } from '../propagation/NoopTextMapPropagator';\nimport { defaultTextMapGetter, defaultTextMapSetter, } from '../propagation/TextMapPropagator';\nimport { getBaggage, setBaggage, deleteBaggage, } from '../baggage/context-helpers';\nimport { createBaggage } from '../baggage/utils';\nimport { DiagAPI } from './diag';\nvar API_NAME = 'propagation';\nvar NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n        this.createBaggage = createBaggage;\n        this.getBaggage = getBaggage;\n        this.setBaggage = setBaggage;\n        this.deleteBaggage = deleteBaggage;\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator.\n     *\n     * @returns true if the propagator was successfully registered, else false\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        return registerGlobal(API_NAME, propagator, DiagAPI.instance());\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /**\n     * Return a list of all fields which may be used by the propagator.\n     */\n    PropagationAPI.prototype.fields = function () {\n        return this._getGlobalPropagator().fields();\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        unregisterGlobal(API_NAME, DiagAPI.instance());\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        return getGlobal(API_NAME) || NOOP_TEXT_MAP_PROPAGATOR;\n    };\n    return PropagationAPI;\n}());\nexport { PropagationAPI };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAS,EAAEC,cAAc,EAAEC,gBAAgB,QAAS,0BAA0B;AACvF,SAASC,qBAAqB,QAAQ,sCAAsC;AAC5E,SAASC,oBAAoB,EAAEC,oBAAoB,QAAS,kCAAkC;AAC9F,SAASC,UAAU,EAAEC,UAAU,EAAEC,aAAa,QAAS,4BAA4B;AACnF,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,OAAO,QAAQ,QAAQ;AAChC,IAAIC,QAAQ,GAAG,aAAa;AAC5B,IAAIC,wBAAwB,GAAG,IAAIT,qBAAqB,EAAE;AAC1D;AACA;AACA;AACA,IAAIU,cAAc,GAAG,aAAe,YAAY;EAC5C;EACA,SAASA,cAAc,GAAG;IACtB,IAAI,CAACJ,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACH,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,aAAa,GAAGA,aAAa;EACtC;EACA;EACAK,cAAc,CAACC,WAAW,GAAG,YAAY;IACrC,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAG,IAAIF,cAAc,EAAE;IACzC;IACA,OAAO,IAAI,CAACE,SAAS;EACzB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIF,cAAc,CAACG,SAAS,CAACC,mBAAmB,GAAG,UAAUC,UAAU,EAAE;IACjE,OAAOjB,cAAc,CAACU,QAAQ,EAAEO,UAAU,EAAER,OAAO,CAACS,QAAQ,EAAE,CAAC;EACnE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIN,cAAc,CAACG,SAAS,CAACI,MAAM,GAAG,UAAUC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAE;IAClE,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAGlB,oBAAoB;IAAE;IACxD,OAAO,IAAI,CAACmB,oBAAoB,EAAE,CAACJ,MAAM,CAACC,OAAO,EAAEC,OAAO,EAAEC,MAAM,CAAC;EACvE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIV,cAAc,CAACG,SAAS,CAACS,OAAO,GAAG,UAAUJ,OAAO,EAAEC,OAAO,EAAEI,MAAM,EAAE;IACnE,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAGtB,oBAAoB;IAAE;IACxD,OAAO,IAAI,CAACoB,oBAAoB,EAAE,CAACC,OAAO,CAACJ,OAAO,EAAEC,OAAO,EAAEI,MAAM,CAAC;EACxE,CAAC;EACD;AACJ;AACA;EACIb,cAAc,CAACG,SAAS,CAACW,MAAM,GAAG,YAAY;IAC1C,OAAO,IAAI,CAACH,oBAAoB,EAAE,CAACG,MAAM,EAAE;EAC/C,CAAC;EACD;EACAd,cAAc,CAACG,SAAS,CAACY,OAAO,GAAG,YAAY;IAC3C1B,gBAAgB,CAACS,QAAQ,EAAED,OAAO,CAACS,QAAQ,EAAE,CAAC;EAClD,CAAC;EACDN,cAAc,CAACG,SAAS,CAACQ,oBAAoB,GAAG,YAAY;IACxD,OAAOxB,SAAS,CAACW,QAAQ,CAAC,IAAIC,wBAAwB;EAC1D,CAAC;EACD,OAAOC,cAAc;AACzB,CAAC,EAAG;AACJ,SAASA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}