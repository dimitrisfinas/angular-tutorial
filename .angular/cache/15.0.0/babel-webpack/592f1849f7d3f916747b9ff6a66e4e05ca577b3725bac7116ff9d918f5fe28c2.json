{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, TraceFlags } from '@opentelemetry/api';\nimport { ExportResultCode, globalErrorHandler, suppressTracing } from '@opentelemetry/core';\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n */\nvar SimpleSpanProcessor = /** @class */function () {\n  function SimpleSpanProcessor(_exporter) {\n    this._exporter = _exporter;\n    this._isShutdown = false;\n    this._shuttingDownPromise = Promise.resolve();\n  }\n  SimpleSpanProcessor.prototype.forceFlush = function () {\n    // do nothing as all spans are being exported without waiting\n    return Promise.resolve();\n  };\n  // does nothing.\n  SimpleSpanProcessor.prototype.onStart = function (_span) {};\n  SimpleSpanProcessor.prototype.onEnd = function (span) {\n    var _this = this;\n    if (this._isShutdown) {\n      return;\n    }\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n    // prevent downstream exporter calls from generating spans\n    context.with(suppressTracing(context.active()), function () {\n      _this._exporter.export([span], function (result) {\n        var _a;\n        if (result.code !== ExportResultCode.SUCCESS) {\n          globalErrorHandler((_a = result.error) !== null && _a !== void 0 ? _a : new Error(\"SimpleSpanProcessor: span export failed (status \" + result + \")\"));\n        }\n      });\n    });\n  };\n  SimpleSpanProcessor.prototype.shutdown = function () {\n    var _this = this;\n    if (this._isShutdown) {\n      return this._shuttingDownPromise;\n    }\n    this._isShutdown = true;\n    this._shuttingDownPromise = new Promise(function (resolve, reject) {\n      Promise.resolve().then(function () {\n        return _this._exporter.shutdown();\n      }).then(resolve).catch(function (e) {\n        reject(e);\n      });\n    });\n    return this._shuttingDownPromise;\n  };\n  return SimpleSpanProcessor;\n}();\nexport { SimpleSpanProcessor };","map":{"version":3,"names":["context","TraceFlags","ExportResultCode","globalErrorHandler","suppressTracing","SimpleSpanProcessor","_exporter","_isShutdown","_shuttingDownPromise","Promise","resolve","prototype","forceFlush","onStart","_span","onEnd","span","_this","spanContext","traceFlags","SAMPLED","with","active","export","result","_a","code","SUCCESS","error","Error","shutdown","reject","then","catch","e"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, TraceFlags } from '@opentelemetry/api';\nimport { ExportResultCode, globalErrorHandler, suppressTracing, } from '@opentelemetry/core';\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n */\nvar SimpleSpanProcessor = /** @class */ (function () {\n    function SimpleSpanProcessor(_exporter) {\n        this._exporter = _exporter;\n        this._isShutdown = false;\n        this._shuttingDownPromise = Promise.resolve();\n    }\n    SimpleSpanProcessor.prototype.forceFlush = function () {\n        // do nothing as all spans are being exported without waiting\n        return Promise.resolve();\n    };\n    // does nothing.\n    SimpleSpanProcessor.prototype.onStart = function (_span) { };\n    SimpleSpanProcessor.prototype.onEnd = function (span) {\n        var _this = this;\n        if (this._isShutdown) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        // prevent downstream exporter calls from generating spans\n        context.with(suppressTracing(context.active()), function () {\n            _this._exporter.export([span], function (result) {\n                var _a;\n                if (result.code !== ExportResultCode.SUCCESS) {\n                    globalErrorHandler((_a = result.error) !== null && _a !== void 0 ? _a : new Error(\"SimpleSpanProcessor: span export failed (status \" + result + \")\"));\n                }\n            });\n        });\n    };\n    SimpleSpanProcessor.prototype.shutdown = function () {\n        var _this = this;\n        if (this._isShutdown) {\n            return this._shuttingDownPromise;\n        }\n        this._isShutdown = true;\n        this._shuttingDownPromise = new Promise(function (resolve, reject) {\n            Promise.resolve()\n                .then(function () {\n                return _this._exporter.shutdown();\n            })\n                .then(resolve)\n                .catch(function (e) {\n                reject(e);\n            });\n        });\n        return this._shuttingDownPromise;\n    };\n    return SimpleSpanProcessor;\n}());\nexport { SimpleSpanProcessor };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAO,EAAEC,UAAU,QAAQ,oBAAoB;AACxD,SAASC,gBAAgB,EAAEC,kBAAkB,EAAEC,eAAe,QAAS,qBAAqB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,mBAAmB,GAAG,aAAe,YAAY;EACjD,SAASA,mBAAmB,CAACC,SAAS,EAAE;IACpC,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,oBAAoB,GAAGC,OAAO,CAACC,OAAO,EAAE;EACjD;EACAL,mBAAmB,CAACM,SAAS,CAACC,UAAU,GAAG,YAAY;IACnD;IACA,OAAOH,OAAO,CAACC,OAAO,EAAE;EAC5B,CAAC;EACD;EACAL,mBAAmB,CAACM,SAAS,CAACE,OAAO,GAAG,UAAUC,KAAK,EAAE,CAAE,CAAC;EAC5DT,mBAAmB,CAACM,SAAS,CAACI,KAAK,GAAG,UAAUC,IAAI,EAAE;IAClD,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI,IAAI,CAACV,WAAW,EAAE;MAClB;IACJ;IACA,IAAI,CAACS,IAAI,CAACE,WAAW,EAAE,CAACC,UAAU,GAAGlB,UAAU,CAACmB,OAAO,MAAM,CAAC,EAAE;MAC5D;IACJ;IACA;IACApB,OAAO,CAACqB,IAAI,CAACjB,eAAe,CAACJ,OAAO,CAACsB,MAAM,EAAE,CAAC,EAAE,YAAY;MACxDL,KAAK,CAACX,SAAS,CAACiB,MAAM,CAAC,CAACP,IAAI,CAAC,EAAE,UAAUQ,MAAM,EAAE;QAC7C,IAAIC,EAAE;QACN,IAAID,MAAM,CAACE,IAAI,KAAKxB,gBAAgB,CAACyB,OAAO,EAAE;UAC1CxB,kBAAkB,CAAC,CAACsB,EAAE,GAAGD,MAAM,CAACI,KAAK,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAII,KAAK,CAAC,kDAAkD,GAAGL,MAAM,GAAG,GAAG,CAAC,CAAC;QACzJ;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDnB,mBAAmB,CAACM,SAAS,CAACmB,QAAQ,GAAG,YAAY;IACjD,IAAIb,KAAK,GAAG,IAAI;IAChB,IAAI,IAAI,CAACV,WAAW,EAAE;MAClB,OAAO,IAAI,CAACC,oBAAoB;IACpC;IACA,IAAI,CAACD,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,oBAAoB,GAAG,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAEqB,MAAM,EAAE;MAC/DtB,OAAO,CAACC,OAAO,EAAE,CACZsB,IAAI,CAAC,YAAY;QAClB,OAAOf,KAAK,CAACX,SAAS,CAACwB,QAAQ,EAAE;MACrC,CAAC,CAAC,CACGE,IAAI,CAACtB,OAAO,CAAC,CACbuB,KAAK,CAAC,UAAUC,CAAC,EAAE;QACpBH,MAAM,CAACG,CAAC,CAAC;MACb,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAO,IAAI,CAAC1B,oBAAoB;EACpC,CAAC;EACD,OAAOH,mBAAmB;AAC9B,CAAC,EAAG;AACJ,SAASA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}