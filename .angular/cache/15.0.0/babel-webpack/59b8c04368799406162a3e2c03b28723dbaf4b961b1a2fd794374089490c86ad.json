{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { OTLPExporterBase } from '../../OTLPExporterBase';\nimport { parseHeaders } from '../../util';\nimport { sendWithBeacon, sendWithXhr } from './util';\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, baggageUtils } from '@opentelemetry/core';\n/**\n * Collector Metric Exporter abstract base class\n */\nvar OTLPExporterBrowserBase = /** @class */function (_super) {\n  __extends(OTLPExporterBrowserBase, _super);\n  /**\n   * @param config\n   */\n  function OTLPExporterBrowserBase(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = _super.call(this, config) || this;\n    _this._useXHR = false;\n    _this._useXHR = !!config.headers || typeof navigator.sendBeacon !== 'function';\n    if (_this._useXHR) {\n      _this._headers = Object.assign({}, parseHeaders(config.headers), baggageUtils.parseKeyPairsIntoRecord(getEnv().OTEL_EXPORTER_OTLP_HEADERS));\n    } else {\n      _this._headers = {};\n    }\n    return _this;\n  }\n  OTLPExporterBrowserBase.prototype.onInit = function () {\n    window.addEventListener('unload', this.shutdown);\n  };\n  OTLPExporterBrowserBase.prototype.onShutdown = function () {\n    window.removeEventListener('unload', this.shutdown);\n  };\n  OTLPExporterBrowserBase.prototype.send = function (items, onSuccess, onError) {\n    var _this = this;\n    if (this._shutdownOnce.isCalled) {\n      diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    var serviceRequest = this.convert(items);\n    var body = JSON.stringify(serviceRequest);\n    var promise = new Promise(function (resolve, reject) {\n      if (_this._useXHR) {\n        sendWithXhr(body, _this.url, _this._headers, _this.timeoutMillis, resolve, reject);\n      } else {\n        sendWithBeacon(body, _this.url, {\n          type: 'application/json'\n        }, resolve, reject);\n      }\n    }).then(onSuccess, onError);\n    this._sendingPromises.push(promise);\n    var popPromise = function () {\n      var index = _this._sendingPromises.indexOf(promise);\n      _this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  };\n  return OTLPExporterBrowserBase;\n}(OTLPExporterBase);\nexport { OTLPExporterBrowserBase };\n//# sourceMappingURL=OTLPExporterBrowserBase.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}