{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { context, propagation, trace, ROOT_CONTEXT } from '@opentelemetry/api';\nimport { otperformance, TRACE_PARENT_HEADER } from '@opentelemetry/core';\nimport { addSpanNetworkEvent, addSpanNetworkEvents, hasKey, PerformanceTimingNames as PTN } from '@opentelemetry/sdk-trace-web';\nimport { InstrumentationBase } from '@opentelemetry/instrumentation';\nimport { AttributeNames } from './enums/AttributeNames';\nimport { VERSION } from './version';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { addSpanPerformancePaintEvents, getPerformanceNavigationEntries } from './utils';\n/**\n * This class represents a document load plugin\n */\nvar DocumentLoadInstrumentation = /** @class */function (_super) {\n  __extends(DocumentLoadInstrumentation, _super);\n  /**\n   *\n   * @param config\n   */\n  function DocumentLoadInstrumentation(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = _super.call(this, '@opentelemetry/instrumentation-document-load', VERSION, config) || this;\n    _this.component = 'document-load';\n    _this.version = '1';\n    _this.moduleName = _this.component;\n    return _this;\n  }\n  DocumentLoadInstrumentation.prototype.init = function () {};\n  /**\n   * callback to be executed when page is loaded\n   */\n  DocumentLoadInstrumentation.prototype._onDocumentLoaded = function () {\n    var _this = this;\n    // Timeout is needed as load event doesn't have yet the performance metrics for loadEnd.\n    // Support for event \"loadend\" is very limited and cannot be used\n    window.setTimeout(function () {\n      _this._collectPerformance();\n    });\n  };\n  /**\n   * Adds spans for all resources\n   * @param rootSpan\n   */\n  DocumentLoadInstrumentation.prototype._addResourcesSpans = function (rootSpan) {\n    var _this = this;\n    var _a, _b;\n    var resources = (_b = (_a = otperformance).getEntriesByType) === null || _b === void 0 ? void 0 : _b.call(_a, 'resource');\n    if (resources) {\n      resources.forEach(function (resource) {\n        _this._initResourceSpan(resource, rootSpan);\n      });\n    }\n  };\n  /**\n   * Collects information about performance and creates appropriate spans\n   */\n  DocumentLoadInstrumentation.prototype._collectPerformance = function () {\n    var _this = this;\n    var metaElement = Array.from(document.getElementsByTagName('meta')).find(function (e) {\n      return e.getAttribute('name') === TRACE_PARENT_HEADER;\n    });\n    var entries = getPerformanceNavigationEntries();\n    var traceparent = metaElement && metaElement.content || '';\n    context.with(propagation.extract(ROOT_CONTEXT, {\n      traceparent: traceparent\n    }), function () {\n      var rootSpan = _this._startSpan(AttributeNames.DOCUMENT_LOAD, PTN.FETCH_START, entries);\n      if (!rootSpan) {\n        return;\n      }\n      context.with(trace.setSpan(context.active(), rootSpan), function () {\n        var fetchSpan = _this._startSpan(AttributeNames.DOCUMENT_FETCH, PTN.FETCH_START, entries);\n        if (fetchSpan) {\n          fetchSpan.setAttribute(SemanticAttributes.HTTP_URL, location.href);\n          context.with(trace.setSpan(context.active(), fetchSpan), function () {\n            addSpanNetworkEvents(fetchSpan, entries);\n            _this._endSpan(fetchSpan, PTN.RESPONSE_END, entries);\n          });\n        }\n      });\n      rootSpan.setAttribute(SemanticAttributes.HTTP_URL, location.href);\n      rootSpan.setAttribute(SemanticAttributes.HTTP_USER_AGENT, navigator.userAgent);\n      _this._addResourcesSpans(rootSpan);\n      addSpanNetworkEvent(rootSpan, PTN.FETCH_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.UNLOAD_EVENT_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.UNLOAD_EVENT_END, entries);\n      addSpanNetworkEvent(rootSpan, PTN.DOM_INTERACTIVE, entries);\n      addSpanNetworkEvent(rootSpan, PTN.DOM_CONTENT_LOADED_EVENT_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.DOM_CONTENT_LOADED_EVENT_END, entries);\n      addSpanNetworkEvent(rootSpan, PTN.DOM_COMPLETE, entries);\n      addSpanNetworkEvent(rootSpan, PTN.LOAD_EVENT_START, entries);\n      addSpanNetworkEvent(rootSpan, PTN.LOAD_EVENT_END, entries);\n      addSpanPerformancePaintEvents(rootSpan);\n      _this._endSpan(rootSpan, PTN.LOAD_EVENT_END, entries);\n    });\n  };\n  /**\n   * Helper function for ending span\n   * @param span\n   * @param performanceName name of performance entry for time end\n   * @param entries\n   */\n  DocumentLoadInstrumentation.prototype._endSpan = function (span, performanceName, entries) {\n    // span can be undefined when entries are missing the certain performance - the span will not be created\n    if (span) {\n      if (hasKey(entries, performanceName)) {\n        span.end(entries[performanceName]);\n      } else {\n        // just end span\n        span.end();\n      }\n    }\n  };\n  /**\n   * Creates and ends a span with network information about resource added as timed events\n   * @param resource\n   * @param parentSpan\n   */\n  DocumentLoadInstrumentation.prototype._initResourceSpan = function (resource, parentSpan) {\n    var span = this._startSpan(AttributeNames.RESOURCE_FETCH, PTN.FETCH_START, resource, parentSpan);\n    if (span) {\n      span.setAttribute(SemanticAttributes.HTTP_URL, resource.name);\n      addSpanNetworkEvents(span, resource);\n      this._endSpan(span, PTN.RESPONSE_END, resource);\n    }\n  };\n  /**\n   * Helper function for starting a span\n   * @param spanName name of span\n   * @param performanceName name of performance entry for time start\n   * @param entries\n   * @param parentSpan\n   */\n  DocumentLoadInstrumentation.prototype._startSpan = function (spanName, performanceName, entries, parentSpan) {\n    if (hasKey(entries, performanceName) && typeof entries[performanceName] === 'number') {\n      var span = this.tracer.startSpan(spanName, {\n        startTime: entries[performanceName]\n      }, parentSpan ? trace.setSpan(context.active(), parentSpan) : undefined);\n      span.setAttribute(AttributeNames.COMPONENT, this.component);\n      return span;\n    }\n    return undefined;\n  };\n  /**\n   * executes callback {_onDocumentLoaded} when the page is loaded\n   */\n  DocumentLoadInstrumentation.prototype._waitForPageLoad = function () {\n    if (window.document.readyState === 'complete') {\n      this._onDocumentLoaded();\n    } else {\n      this._onDocumentLoaded = this._onDocumentLoaded.bind(this);\n      window.addEventListener('load', this._onDocumentLoaded);\n    }\n  };\n  /**\n   * implements enable function\n   */\n  DocumentLoadInstrumentation.prototype.enable = function () {\n    // remove previously attached load to avoid adding the same event twice\n    // in case of multiple enable calling.\n    window.removeEventListener('load', this._onDocumentLoaded);\n    this._waitForPageLoad();\n  };\n  /**\n   * implements disable function\n   */\n  DocumentLoadInstrumentation.prototype.disable = function () {\n    window.removeEventListener('load', this._onDocumentLoaded);\n  };\n  return DocumentLoadInstrumentation;\n}(InstrumentationBase);\nexport { DocumentLoadInstrumentation };\n//# sourceMappingURL=instrumentation.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}