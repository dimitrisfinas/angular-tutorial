{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\nvar NOOP_TRACER = new NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */function () {\n  function ProxyTracer(_provider, name, version) {\n    this._provider = _provider;\n    this.name = name;\n    this.version = version;\n  }\n  ProxyTracer.prototype.startSpan = function (name, options, context) {\n    return this._getTracer().startSpan(name, options, context);\n  };\n  ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n    var tracer = this._getTracer();\n    return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n  };\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n  ProxyTracer.prototype._getTracer = function () {\n    if (this._delegate) {\n      return this._delegate;\n    }\n    var tracer = this._provider.getDelegateTracer(this.name, this.version);\n    if (!tracer) {\n      return NOOP_TRACER;\n    }\n    this._delegate = tracer;\n    return this._delegate;\n  };\n  return ProxyTracer;\n}();\nexport { ProxyTracer };","map":{"version":3,"names":["NoopTracer","NOOP_TRACER","ProxyTracer","_provider","name","version","prototype","startSpan","options","context","_getTracer","startActiveSpan","_name","_options","_context","_fn","tracer","Reflect","apply","arguments","_delegate","getDelegateTracer"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NoopTracer } from './NoopTracer';\nvar NOOP_TRACER = new NoopTracer();\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n    }\n    ProxyTracer.prototype.startSpan = function (name, options, context) {\n        return this._getTracer().startSpan(name, options, context);\n    };\n    ProxyTracer.prototype.startActiveSpan = function (_name, _options, _context, _fn) {\n        var tracer = this._getTracer();\n        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version);\n        if (!tracer) {\n            return NOOP_TRACER;\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\nexport { ProxyTracer };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,cAAc;AACzC,IAAIC,WAAW,GAAG,IAAID,UAAU,EAAE;AAClC;AACA;AACA;AACA,IAAIE,WAAW,GAAG,aAAe,YAAY;EACzC,SAASA,WAAW,CAACC,SAAS,EAAEC,IAAI,EAAEC,OAAO,EAAE;IAC3C,IAAI,CAACF,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;EAC1B;EACAH,WAAW,CAACI,SAAS,CAACC,SAAS,GAAG,UAAUH,IAAI,EAAEI,OAAO,EAAEC,OAAO,EAAE;IAChE,OAAO,IAAI,CAACC,UAAU,EAAE,CAACH,SAAS,CAACH,IAAI,EAAEI,OAAO,EAAEC,OAAO,CAAC;EAC9D,CAAC;EACDP,WAAW,CAACI,SAAS,CAACK,eAAe,GAAG,UAAUC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,GAAG,EAAE;IAC9E,IAAIC,MAAM,GAAG,IAAI,CAACN,UAAU,EAAE;IAC9B,OAAOO,OAAO,CAACC,KAAK,CAACF,MAAM,CAACL,eAAe,EAAEK,MAAM,EAAEG,SAAS,CAAC;EACnE,CAAC;EACD;AACJ;AACA;AACA;EACIjB,WAAW,CAACI,SAAS,CAACI,UAAU,GAAG,YAAY;IAC3C,IAAI,IAAI,CAACU,SAAS,EAAE;MAChB,OAAO,IAAI,CAACA,SAAS;IACzB;IACA,IAAIJ,MAAM,GAAG,IAAI,CAACb,SAAS,CAACkB,iBAAiB,CAAC,IAAI,CAACjB,IAAI,EAAE,IAAI,CAACC,OAAO,CAAC;IACtE,IAAI,CAACW,MAAM,EAAE;MACT,OAAOf,WAAW;IACtB;IACA,IAAI,CAACmB,SAAS,GAAGJ,MAAM;IACvB,OAAO,IAAI,CAACI,SAAS;EACzB,CAAC;EACD,OAAOlB,WAAW;AACtB,CAAC,EAAG;AACJ,SAASA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}