{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TraceFlags } from '@opentelemetry/api';\nimport { internal, ExportResultCode, globalErrorHandler, BindOnceFuture } from '@opentelemetry/core';\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n */\nvar SimpleSpanProcessor = /** @class */function () {\n  function SimpleSpanProcessor(_exporter) {\n    this._exporter = _exporter;\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n  }\n  SimpleSpanProcessor.prototype.forceFlush = function () {\n    // do nothing as all spans are being exported without waiting\n    return Promise.resolve();\n  };\n  // does nothing.\n  SimpleSpanProcessor.prototype.onStart = function (_span, _parentContext) {};\n  SimpleSpanProcessor.prototype.onEnd = function (span) {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n    internal._export(this._exporter, [span]).then(function (result) {\n      var _a;\n      if (result.code !== ExportResultCode.SUCCESS) {\n        globalErrorHandler((_a = result.error) !== null && _a !== void 0 ? _a : new Error(\"SimpleSpanProcessor: span export failed (status \" + result + \")\"));\n      }\n    }).catch(function (error) {\n      globalErrorHandler(error);\n    });\n  };\n  SimpleSpanProcessor.prototype.shutdown = function () {\n    return this._shutdownOnce.call();\n  };\n  SimpleSpanProcessor.prototype._shutdown = function () {\n    return this._exporter.shutdown();\n  };\n  return SimpleSpanProcessor;\n}();\nexport { SimpleSpanProcessor };","map":{"version":3,"names":["TraceFlags","internal","ExportResultCode","globalErrorHandler","BindOnceFuture","SimpleSpanProcessor","_exporter","_shutdownOnce","_shutdown","prototype","forceFlush","Promise","resolve","onStart","_span","_parentContext","onEnd","span","isCalled","spanContext","traceFlags","SAMPLED","_export","then","result","_a","code","SUCCESS","error","Error","catch","shutdown","call"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/SimpleSpanProcessor.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TraceFlags } from '@opentelemetry/api';\nimport { internal, ExportResultCode, globalErrorHandler, BindOnceFuture } from '@opentelemetry/core';\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n */\nvar SimpleSpanProcessor = /** @class */ (function () {\n    function SimpleSpanProcessor(_exporter) {\n        this._exporter = _exporter;\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    }\n    SimpleSpanProcessor.prototype.forceFlush = function () {\n        // do nothing as all spans are being exported without waiting\n        return Promise.resolve();\n    };\n    // does nothing.\n    SimpleSpanProcessor.prototype.onStart = function (_span, _parentContext) { };\n    SimpleSpanProcessor.prototype.onEnd = function (span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        internal._export(this._exporter, [span]).then(function (result) {\n            var _a;\n            if (result.code !== ExportResultCode.SUCCESS) {\n                globalErrorHandler((_a = result.error) !== null && _a !== void 0 ? _a : new Error(\"SimpleSpanProcessor: span export failed (status \" + result + \")\"));\n            }\n        }).catch(function (error) {\n            globalErrorHandler(error);\n        });\n    };\n    SimpleSpanProcessor.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    SimpleSpanProcessor.prototype._shutdown = function () {\n        return this._exporter.shutdown();\n    };\n    return SimpleSpanProcessor;\n}());\nexport { SimpleSpanProcessor };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,QAAQ,EAAEC,gBAAgB,EAAEC,kBAAkB,EAAEC,cAAc,QAAQ,qBAAqB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,mBAAmB,GAAG,aAAe,YAAY;EACjD,SAASA,mBAAmB,CAACC,SAAS,EAAE;IACpC,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,aAAa,GAAG,IAAIH,cAAc,CAAC,IAAI,CAACI,SAAS,EAAE,IAAI,CAAC;EACjE;EACAH,mBAAmB,CAACI,SAAS,CAACC,UAAU,GAAG,YAAY;IACnD;IACA,OAAOC,OAAO,CAACC,OAAO,EAAE;EAC5B,CAAC;EACD;EACAP,mBAAmB,CAACI,SAAS,CAACI,OAAO,GAAG,UAAUC,KAAK,EAAEC,cAAc,EAAE,CAAE,CAAC;EAC5EV,mBAAmB,CAACI,SAAS,CAACO,KAAK,GAAG,UAAUC,IAAI,EAAE;IAClD,IAAI,IAAI,CAACV,aAAa,CAACW,QAAQ,EAAE;MAC7B;IACJ;IACA,IAAI,CAACD,IAAI,CAACE,WAAW,EAAE,CAACC,UAAU,GAAGpB,UAAU,CAACqB,OAAO,MAAM,CAAC,EAAE;MAC5D;IACJ;IACApB,QAAQ,CAACqB,OAAO,CAAC,IAAI,CAAChB,SAAS,EAAE,CAACW,IAAI,CAAC,CAAC,CAACM,IAAI,CAAC,UAAUC,MAAM,EAAE;MAC5D,IAAIC,EAAE;MACN,IAAID,MAAM,CAACE,IAAI,KAAKxB,gBAAgB,CAACyB,OAAO,EAAE;QAC1CxB,kBAAkB,CAAC,CAACsB,EAAE,GAAGD,MAAM,CAACI,KAAK,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAII,KAAK,CAAC,kDAAkD,GAAGL,MAAM,GAAG,GAAG,CAAC,CAAC;MACzJ;IACJ,CAAC,CAAC,CAACM,KAAK,CAAC,UAAUF,KAAK,EAAE;MACtBzB,kBAAkB,CAACyB,KAAK,CAAC;IAC7B,CAAC,CAAC;EACN,CAAC;EACDvB,mBAAmB,CAACI,SAAS,CAACsB,QAAQ,GAAG,YAAY;IACjD,OAAO,IAAI,CAACxB,aAAa,CAACyB,IAAI,EAAE;EACpC,CAAC;EACD3B,mBAAmB,CAACI,SAAS,CAACD,SAAS,GAAG,YAAY;IAClD,OAAO,IAAI,CAACF,SAAS,CAACyB,QAAQ,EAAE;EACpC,CAAC;EACD,OAAO1B,mBAAmB;AAC9B,CAAC,EAAG;AACJ,SAASA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}