{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TraceFlags } from '@opentelemetry/api';\nimport { internal, ExportResultCode, globalErrorHandler, BindOnceFuture } from '@opentelemetry/core';\n/**\n * An implementation of the {@link SpanProcessor} that converts the {@link Span}\n * to {@link ReadableSpan} and passes it to the configured exporter.\n *\n * Only spans that are sampled are converted.\n */\nvar SimpleSpanProcessor = /** @class */function () {\n  function SimpleSpanProcessor(_exporter) {\n    this._exporter = _exporter;\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n  }\n  SimpleSpanProcessor.prototype.forceFlush = function () {\n    // do nothing as all spans are being exported without waiting\n    return Promise.resolve();\n  };\n  // does nothing.\n  SimpleSpanProcessor.prototype.onStart = function (_span, _parentContext) {};\n  SimpleSpanProcessor.prototype.onEnd = function (span) {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n    internal._export(this._exporter, [span]).then(function (result) {\n      var _a;\n      if (result.code !== ExportResultCode.SUCCESS) {\n        globalErrorHandler((_a = result.error) !== null && _a !== void 0 ? _a : new Error(\"SimpleSpanProcessor: span export failed (status \" + result + \")\"));\n      }\n    }).catch(function (error) {\n      globalErrorHandler(error);\n    });\n  };\n  SimpleSpanProcessor.prototype.shutdown = function () {\n    return this._shutdownOnce.call();\n  };\n  SimpleSpanProcessor.prototype._shutdown = function () {\n    return this._exporter.shutdown();\n  };\n  return SimpleSpanProcessor;\n}();\nexport { SimpleSpanProcessor };\n//# sourceMappingURL=SimpleSpanProcessor.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}