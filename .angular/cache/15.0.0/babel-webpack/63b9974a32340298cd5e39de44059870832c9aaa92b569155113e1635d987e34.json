{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { instrumentationScopeId } from '../utils';\nimport { ViewRegistry } from '../view/ViewRegistry';\nimport { MeterSharedState } from './MeterSharedState';\n/**\n * An internal record for shared meter provider states.\n */\nvar MeterProviderSharedState = /** @class */function () {\n  function MeterProviderSharedState(resource) {\n    this.resource = resource;\n    this.viewRegistry = new ViewRegistry();\n    this.metricCollectors = [];\n    this.meterSharedStates = new Map();\n  }\n  MeterProviderSharedState.prototype.getMeterSharedState = function (instrumentationScope) {\n    var id = instrumentationScopeId(instrumentationScope);\n    var meterSharedState = this.meterSharedStates.get(id);\n    if (meterSharedState == null) {\n      meterSharedState = new MeterSharedState(this, instrumentationScope);\n      this.meterSharedStates.set(id, meterSharedState);\n    }\n    return meterSharedState;\n  };\n  MeterProviderSharedState.prototype.selectAggregations = function (instrumentType) {\n    var e_1, _a;\n    var result = [];\n    try {\n      for (var _b = __values(this.metricCollectors), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var collector = _c.value;\n        result.push([collector, collector.selectAggregation(instrumentType)]);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return result;\n  };\n  return MeterProviderSharedState;\n}();\nexport { MeterProviderSharedState };","map":{"version":3,"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","instrumentationScopeId","ViewRegistry","MeterSharedState","MeterProviderSharedState","resource","viewRegistry","metricCollectors","meterSharedStates","Map","prototype","getMeterSharedState","instrumentationScope","id","meterSharedState","get","set","selectAggregations","instrumentType","e_1","_a","result","_b","_c","collector","push","selectAggregation","e_1_1","error","return"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/sdk-metrics/build/esm/state/MeterProviderSharedState.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { instrumentationScopeId } from '../utils';\nimport { ViewRegistry } from '../view/ViewRegistry';\nimport { MeterSharedState } from './MeterSharedState';\n/**\n * An internal record for shared meter provider states.\n */\nvar MeterProviderSharedState = /** @class */ (function () {\n    function MeterProviderSharedState(resource) {\n        this.resource = resource;\n        this.viewRegistry = new ViewRegistry();\n        this.metricCollectors = [];\n        this.meterSharedStates = new Map();\n    }\n    MeterProviderSharedState.prototype.getMeterSharedState = function (instrumentationScope) {\n        var id = instrumentationScopeId(instrumentationScope);\n        var meterSharedState = this.meterSharedStates.get(id);\n        if (meterSharedState == null) {\n            meterSharedState = new MeterSharedState(this, instrumentationScope);\n            this.meterSharedStates.set(id, meterSharedState);\n        }\n        return meterSharedState;\n    };\n    MeterProviderSharedState.prototype.selectAggregations = function (instrumentType) {\n        var e_1, _a;\n        var result = [];\n        try {\n            for (var _b = __values(this.metricCollectors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var collector = _c.value;\n                result.push([collector, collector.selectAggregation(instrumentType)]);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return result;\n    };\n    return MeterProviderSharedState;\n}());\nexport { MeterProviderSharedState };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}