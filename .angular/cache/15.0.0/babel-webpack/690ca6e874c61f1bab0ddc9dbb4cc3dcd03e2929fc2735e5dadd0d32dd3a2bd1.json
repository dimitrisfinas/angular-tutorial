{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */function () {\n  function NonRecordingSpan(_spanContext) {\n    if (_spanContext === void 0) {\n      _spanContext = INVALID_SPAN_CONTEXT;\n    }\n    this._spanContext = _spanContext;\n  }\n  // Returns a SpanContext.\n  NonRecordingSpan.prototype.spanContext = function () {\n    return this._spanContext;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.setStatus = function (_status) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.updateName = function (_name) {\n    return this;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.end = function (_endTime) {};\n  // isRecording always returns false for NonRecordingSpan.\n  NonRecordingSpan.prototype.isRecording = function () {\n    return false;\n  };\n  // By default does nothing\n  NonRecordingSpan.prototype.recordException = function (_exception, _time) {};\n  return NonRecordingSpan;\n}();\nexport { NonRecordingSpan };","map":{"version":3,"names":["INVALID_SPAN_CONTEXT","NonRecordingSpan","_spanContext","prototype","spanContext","setAttribute","_key","_value","setAttributes","_attributes","addEvent","_name","setStatus","_status","updateName","end","_endTime","isRecording","recordException","_exception","_time"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { INVALID_SPAN_CONTEXT } from './invalid-span-constants';\n/**\n * The NonRecordingSpan is the default {@link Span} that is used when no Span\n * implementation is available. All operations are no-op including context\n * propagation.\n */\nvar NonRecordingSpan = /** @class */ (function () {\n    function NonRecordingSpan(_spanContext) {\n        if (_spanContext === void 0) { _spanContext = INVALID_SPAN_CONTEXT; }\n        this._spanContext = _spanContext;\n    }\n    // Returns a SpanContext.\n    NonRecordingSpan.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttribute = function (_key, _value) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setAttributes = function (_attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.addEvent = function (_name, _attributes) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.setStatus = function (_status) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.updateName = function (_name) {\n        return this;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.end = function (_endTime) { };\n    // isRecording always returns false for NonRecordingSpan.\n    NonRecordingSpan.prototype.isRecording = function () {\n        return false;\n    };\n    // By default does nothing\n    NonRecordingSpan.prototype.recordException = function (_exception, _time) { };\n    return NonRecordingSpan;\n}());\nexport { NonRecordingSpan };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAoB,QAAQ,0BAA0B;AAC/D;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAgB,GAAG,aAAe,YAAY;EAC9C,SAASA,gBAAgB,CAACC,YAAY,EAAE;IACpC,IAAIA,YAAY,KAAK,KAAK,CAAC,EAAE;MAAEA,YAAY,GAAGF,oBAAoB;IAAE;IACpE,IAAI,CAACE,YAAY,GAAGA,YAAY;EACpC;EACA;EACAD,gBAAgB,CAACE,SAAS,CAACC,WAAW,GAAG,YAAY;IACjD,OAAO,IAAI,CAACF,YAAY;EAC5B,CAAC;EACD;EACAD,gBAAgB,CAACE,SAAS,CAACE,YAAY,GAAG,UAAUC,IAAI,EAAEC,MAAM,EAAE;IAC9D,OAAO,IAAI;EACf,CAAC;EACD;EACAN,gBAAgB,CAACE,SAAS,CAACK,aAAa,GAAG,UAAUC,WAAW,EAAE;IAC9D,OAAO,IAAI;EACf,CAAC;EACD;EACAR,gBAAgB,CAACE,SAAS,CAACO,QAAQ,GAAG,UAAUC,KAAK,EAAEF,WAAW,EAAE;IAChE,OAAO,IAAI;EACf,CAAC;EACD;EACAR,gBAAgB,CAACE,SAAS,CAACS,SAAS,GAAG,UAAUC,OAAO,EAAE;IACtD,OAAO,IAAI;EACf,CAAC;EACD;EACAZ,gBAAgB,CAACE,SAAS,CAACW,UAAU,GAAG,UAAUH,KAAK,EAAE;IACrD,OAAO,IAAI;EACf,CAAC;EACD;EACAV,gBAAgB,CAACE,SAAS,CAACY,GAAG,GAAG,UAAUC,QAAQ,EAAE,CAAE,CAAC;EACxD;EACAf,gBAAgB,CAACE,SAAS,CAACc,WAAW,GAAG,YAAY;IACjD,OAAO,KAAK;EAChB,CAAC;EACD;EACAhB,gBAAgB,CAACE,SAAS,CAACe,eAAe,GAAG,UAAUC,UAAU,EAAEC,KAAK,EAAE,CAAE,CAAC;EAC7E,OAAOnB,gBAAgB;AAC3B,CAAC,EAAG;AACJ,SAASA,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}