{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/** Combines multiple propagators into a single propagator. */\nvar CompositePropagator = /** @class */function () {\n  /**\n   * Construct a composite propagator from a list of propagators.\n   *\n   * @param [config] Configuration object for composite propagator\n   */\n  function CompositePropagator(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _a;\n    this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n    this._fields = Array.from(new Set(this._propagators\n    // older propagators may not have fields function, null check to be sure\n    .map(function (p) {\n      return typeof p.fields === 'function' ? p.fields() : [];\n    }).reduce(function (x, y) {\n      return x.concat(y);\n    }, [])));\n  }\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same carrier key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to inject\n   * @param carrier Carrier into which context will be injected\n   */\n  CompositePropagator.prototype.inject = function (context, carrier, setter) {\n    for (var _i = 0, _a = this._propagators; _i < _a.length; _i++) {\n      var propagator = _a[_i];\n      try {\n        propagator.inject(context, carrier, setter);\n      } catch (err) {\n        diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n      }\n    }\n  };\n  /**\n   * Run each of the configured propagators with the given context and carrier.\n   * Propagators are run in the order they are configured, so if multiple\n   * propagators write the same context key, the propagator later in the list\n   * will \"win\".\n   *\n   * @param context Context to add values to\n   * @param carrier Carrier from which to extract context\n   */\n  CompositePropagator.prototype.extract = function (context, carrier, getter) {\n    return this._propagators.reduce(function (ctx, propagator) {\n      try {\n        return propagator.extract(ctx, carrier, getter);\n      } catch (err) {\n        diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n      }\n      return ctx;\n    }, context);\n  };\n  CompositePropagator.prototype.fields = function () {\n    // return a new array so our fields cannot be modified\n    return this._fields.slice();\n  };\n  return CompositePropagator;\n}();\nexport { CompositePropagator };","map":{"version":3,"names":["diag","CompositePropagator","config","_a","_propagators","propagators","_fields","Array","from","Set","map","p","fields","reduce","x","y","concat","prototype","inject","context","carrier","setter","_i","length","propagator","err","warn","constructor","name","message","extract","getter","ctx","slice"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/propagation/composite.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag, } from '@opentelemetry/api';\n/** Combines multiple propagators into a single propagator. */\nvar CompositePropagator = /** @class */ (function () {\n    /**\n     * Construct a composite propagator from a list of propagators.\n     *\n     * @param [config] Configuration object for composite propagator\n     */\n    function CompositePropagator(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n        this._fields = Array.from(new Set(this._propagators\n            // older propagators may not have fields function, null check to be sure\n            .map(function (p) { return (typeof p.fields === 'function' ? p.fields() : []); })\n            .reduce(function (x, y) { return x.concat(y); }, [])));\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same carrier key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to inject\n     * @param carrier Carrier into which context will be injected\n     */\n    CompositePropagator.prototype.inject = function (context, carrier, setter) {\n        for (var _i = 0, _a = this._propagators; _i < _a.length; _i++) {\n            var propagator = _a[_i];\n            try {\n                propagator.inject(context, carrier, setter);\n            }\n            catch (err) {\n                diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n        }\n    };\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same context key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to add values to\n     * @param carrier Carrier from which to extract context\n     */\n    CompositePropagator.prototype.extract = function (context, carrier, getter) {\n        return this._propagators.reduce(function (ctx, propagator) {\n            try {\n                return propagator.extract(ctx, carrier, getter);\n            }\n            catch (err) {\n                diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n            return ctx;\n        }, context);\n    };\n    CompositePropagator.prototype.fields = function () {\n        // return a new array so our fields cannot be modified\n        return this._fields.slice();\n    };\n    return CompositePropagator;\n}());\nexport { CompositePropagator };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAI,QAAS,oBAAoB;AAC1C;AACA,IAAIC,mBAAmB,GAAG,aAAe,YAAY;EACjD;AACJ;AACA;AACA;AACA;EACI,SAASA,mBAAmB,CAACC,MAAM,EAAE;IACjC,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAG,CAAC,CAAC;IAAE;IACtC,IAAIC,EAAE;IACN,IAAI,CAACC,YAAY,GAAG,CAACD,EAAE,GAAGD,MAAM,CAACG,WAAW,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,EAAE;IACjF,IAAI,CAACG,OAAO,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAAC,IAAI,CAACL;IACnC;IAAA,CACCM,GAAG,CAAC,UAAUC,CAAC,EAAE;MAAE,OAAQ,OAAOA,CAAC,CAACC,MAAM,KAAK,UAAU,GAAGD,CAAC,CAACC,MAAM,EAAE,GAAG,EAAE;IAAG,CAAC,CAAC,CAChFC,MAAM,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;MAAE,OAAOD,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC;IAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;EAC9D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACId,mBAAmB,CAACgB,SAAS,CAACC,MAAM,GAAG,UAAUC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAE;IACvE,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEnB,EAAE,GAAG,IAAI,CAACC,YAAY,EAAEkB,EAAE,GAAGnB,EAAE,CAACoB,MAAM,EAAED,EAAE,EAAE,EAAE;MAC3D,IAAIE,UAAU,GAAGrB,EAAE,CAACmB,EAAE,CAAC;MACvB,IAAI;QACAE,UAAU,CAACN,MAAM,CAACC,OAAO,EAAEC,OAAO,EAAEC,MAAM,CAAC;MAC/C,CAAC,CACD,OAAOI,GAAG,EAAE;QACRzB,IAAI,CAAC0B,IAAI,CAAC,wBAAwB,GAAGF,UAAU,CAACG,WAAW,CAACC,IAAI,GAAG,SAAS,GAAGH,GAAG,CAACI,OAAO,CAAC;MAC/F;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI5B,mBAAmB,CAACgB,SAAS,CAACa,OAAO,GAAG,UAAUX,OAAO,EAAEC,OAAO,EAAEW,MAAM,EAAE;IACxE,OAAO,IAAI,CAAC3B,YAAY,CAACS,MAAM,CAAC,UAAUmB,GAAG,EAAER,UAAU,EAAE;MACvD,IAAI;QACA,OAAOA,UAAU,CAACM,OAAO,CAACE,GAAG,EAAEZ,OAAO,EAAEW,MAAM,CAAC;MACnD,CAAC,CACD,OAAON,GAAG,EAAE;QACRzB,IAAI,CAAC0B,IAAI,CAAC,wBAAwB,GAAGF,UAAU,CAACG,WAAW,CAACC,IAAI,GAAG,SAAS,GAAGH,GAAG,CAACI,OAAO,CAAC;MAC/F;MACA,OAAOG,GAAG;IACd,CAAC,EAAEb,OAAO,CAAC;EACf,CAAC;EACDlB,mBAAmB,CAACgB,SAAS,CAACL,MAAM,GAAG,YAAY;IAC/C;IACA,OAAO,IAAI,CAACN,OAAO,CAAC2B,KAAK,EAAE;EAC/B,CAAC;EACD,OAAOhC,mBAAmB;AAC9B,CAAC,EAAG;AACJ,SAASA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}