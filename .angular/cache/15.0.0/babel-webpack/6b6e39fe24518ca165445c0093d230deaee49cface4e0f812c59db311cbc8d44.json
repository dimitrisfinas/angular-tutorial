{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '@opentelemetry/api';\n/** Sampler that samples all traces. */\nvar AlwaysOnSampler = /** @class */function () {\n  function AlwaysOnSampler() {}\n  AlwaysOnSampler.prototype.shouldSample = function () {\n    return {\n      decision: SamplingDecision.RECORD_AND_SAMPLED\n    };\n  };\n  AlwaysOnSampler.prototype.toString = function () {\n    return 'AlwaysOnSampler';\n  };\n  return AlwaysOnSampler;\n}();\nexport { AlwaysOnSampler };","map":{"version":3,"names":["SamplingDecision","AlwaysOnSampler","prototype","shouldSample","decision","RECORD_AND_SAMPLED","toString"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/core/build/esm/trace/sampler/AlwaysOnSampler.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '@opentelemetry/api';\n/** Sampler that samples all traces. */\nvar AlwaysOnSampler = /** @class */ (function () {\n    function AlwaysOnSampler() {\n    }\n    AlwaysOnSampler.prototype.shouldSample = function () {\n        return {\n            decision: SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    };\n    AlwaysOnSampler.prototype.toString = function () {\n        return 'AlwaysOnSampler';\n    };\n    return AlwaysOnSampler;\n}());\nexport { AlwaysOnSampler };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAgB,QAAQ,oBAAoB;AACrD;AACA,IAAIC,eAAe,GAAG,aAAe,YAAY;EAC7C,SAASA,eAAe,GAAG,CAC3B;EACAA,eAAe,CAACC,SAAS,CAACC,YAAY,GAAG,YAAY;IACjD,OAAO;MACHC,QAAQ,EAAEJ,gBAAgB,CAACK;IAC/B,CAAC;EACL,CAAC;EACDJ,eAAe,CAACC,SAAS,CAACI,QAAQ,GAAG,YAAY;IAC7C,OAAO,iBAAiB;EAC5B,CAAC;EACD,OAAOL,eAAe;AAC1B,CAAC,EAAG;AACJ,SAASA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}