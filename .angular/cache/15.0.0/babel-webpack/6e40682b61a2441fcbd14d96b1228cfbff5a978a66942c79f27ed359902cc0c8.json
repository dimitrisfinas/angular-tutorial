{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function getIncompatibilityDetails(existing, otherDescriptor) {\n  var incompatibility = '';\n  if (existing.unit !== otherDescriptor.unit) {\n    incompatibility += \"\\t- Unit '\" + existing.unit + \"' does not match '\" + otherDescriptor.unit + \"'\\n\";\n  }\n  if (existing.type !== otherDescriptor.type) {\n    incompatibility += \"\\t- Type '\" + existing.type + \"' does not match '\" + otherDescriptor.type + \"'\\n\";\n  }\n  if (existing.valueType !== otherDescriptor.valueType) {\n    incompatibility += \"\\t- Value Type '\" + existing.valueType + \"' does not match '\" + otherDescriptor.valueType + \"'\\n\";\n  }\n  if (existing.description !== otherDescriptor.description) {\n    incompatibility += \"\\t- Description '\" + existing.description + \"' does not match '\" + otherDescriptor.description + \"'\\n\";\n  }\n  return incompatibility;\n}\nexport function getValueTypeConflictResolutionRecipe(existing, otherDescriptor) {\n  return \"\\t- use valueType '\" + existing.valueType + \"' on instrument creation or use an instrument name other than '\" + otherDescriptor.name + \"'\";\n}\nexport function getUnitConflictResolutionRecipe(existing, otherDescriptor) {\n  return \"\\t- use unit '\" + existing.unit + \"' on instrument creation or use an instrument name other than '\" + otherDescriptor.name + \"'\";\n}\nexport function getTypeConflictResolutionRecipe(existing, otherDescriptor) {\n  var selector = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type\n  };\n  var selectorString = JSON.stringify(selector);\n  return \"\\t- create a new view with a name other than '\" + existing.name + \"' and InstrumentSelector '\" + selectorString + \"'\";\n}\nexport function getDescriptionResolutionRecipe(existing, otherDescriptor) {\n  var selector = {\n    name: otherDescriptor.name,\n    type: otherDescriptor.type\n  };\n  var selectorString = JSON.stringify(selector);\n  return \"\\t- create a new view with a name other than '\" + existing.name + \"' and InstrumentSelector '\" + selectorString + \"'\\n    \\t- OR - create a new view with the name \" + existing.name + \" and description '\" + existing.description + \"' and InstrumentSelector \" + selectorString + \"\\n    \\t- OR - create a new view with the name \" + otherDescriptor.name + \" and description '\" + existing.description + \"' and InstrumentSelector \" + selectorString;\n}\nexport function getConflictResolutionRecipe(existing, otherDescriptor) {\n  // Conflicts that cannot be solved via views.\n  if (existing.valueType !== otherDescriptor.valueType) {\n    return getValueTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n  if (existing.unit !== otherDescriptor.unit) {\n    return getUnitConflictResolutionRecipe(existing, otherDescriptor);\n  }\n  // Conflicts that can be solved via views.\n  if (existing.type !== otherDescriptor.type) {\n    // this will automatically solve possible description conflicts.\n    return getTypeConflictResolutionRecipe(existing, otherDescriptor);\n  }\n  if (existing.description !== otherDescriptor.description) {\n    return getDescriptionResolutionRecipe(existing, otherDescriptor);\n  }\n  return '';\n}","map":{"version":3,"names":["getIncompatibilityDetails","existing","otherDescriptor","incompatibility","unit","type","valueType","description","getValueTypeConflictResolutionRecipe","name","getUnitConflictResolutionRecipe","getTypeConflictResolutionRecipe","selector","selectorString","JSON","stringify","getDescriptionResolutionRecipe","getConflictResolutionRecipe"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/sdk-metrics/build/esm/view/RegistrationConflicts.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function getIncompatibilityDetails(existing, otherDescriptor) {\n    var incompatibility = '';\n    if (existing.unit !== otherDescriptor.unit) {\n        incompatibility += \"\\t- Unit '\" + existing.unit + \"' does not match '\" + otherDescriptor.unit + \"'\\n\";\n    }\n    if (existing.type !== otherDescriptor.type) {\n        incompatibility += \"\\t- Type '\" + existing.type + \"' does not match '\" + otherDescriptor.type + \"'\\n\";\n    }\n    if (existing.valueType !== otherDescriptor.valueType) {\n        incompatibility += \"\\t- Value Type '\" + existing.valueType + \"' does not match '\" + otherDescriptor.valueType + \"'\\n\";\n    }\n    if (existing.description !== otherDescriptor.description) {\n        incompatibility += \"\\t- Description '\" + existing.description + \"' does not match '\" + otherDescriptor.description + \"'\\n\";\n    }\n    return incompatibility;\n}\nexport function getValueTypeConflictResolutionRecipe(existing, otherDescriptor) {\n    return \"\\t- use valueType '\" + existing.valueType + \"' on instrument creation or use an instrument name other than '\" + otherDescriptor.name + \"'\";\n}\nexport function getUnitConflictResolutionRecipe(existing, otherDescriptor) {\n    return \"\\t- use unit '\" + existing.unit + \"' on instrument creation or use an instrument name other than '\" + otherDescriptor.name + \"'\";\n}\nexport function getTypeConflictResolutionRecipe(existing, otherDescriptor) {\n    var selector = {\n        name: otherDescriptor.name,\n        type: otherDescriptor.type\n    };\n    var selectorString = JSON.stringify(selector);\n    return \"\\t- create a new view with a name other than '\" + existing.name + \"' and InstrumentSelector '\" + selectorString + \"'\";\n}\nexport function getDescriptionResolutionRecipe(existing, otherDescriptor) {\n    var selector = {\n        name: otherDescriptor.name,\n        type: otherDescriptor.type\n    };\n    var selectorString = JSON.stringify(selector);\n    return \"\\t- create a new view with a name other than '\" + existing.name + \"' and InstrumentSelector '\" + selectorString + \"'\\n    \\t- OR - create a new view with the name \" + existing.name + \" and description '\" + existing.description + \"' and InstrumentSelector \" + selectorString + \"\\n    \\t- OR - create a new view with the name \" + otherDescriptor.name + \" and description '\" + existing.description + \"' and InstrumentSelector \" + selectorString;\n}\nexport function getConflictResolutionRecipe(existing, otherDescriptor) {\n    // Conflicts that cannot be solved via views.\n    if (existing.valueType !== otherDescriptor.valueType) {\n        return getValueTypeConflictResolutionRecipe(existing, otherDescriptor);\n    }\n    if (existing.unit !== otherDescriptor.unit) {\n        return getUnitConflictResolutionRecipe(existing, otherDescriptor);\n    }\n    // Conflicts that can be solved via views.\n    if (existing.type !== otherDescriptor.type) {\n        // this will automatically solve possible description conflicts.\n        return getTypeConflictResolutionRecipe(existing, otherDescriptor);\n    }\n    if (existing.description !== otherDescriptor.description) {\n        return getDescriptionResolutionRecipe(existing, otherDescriptor);\n    }\n    return '';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}