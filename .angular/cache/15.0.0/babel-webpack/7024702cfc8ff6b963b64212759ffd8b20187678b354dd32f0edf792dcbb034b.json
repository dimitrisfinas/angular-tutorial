{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport { DiagLogLevel } from '../diag/types';\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */function () {\n  /**\n   * Private internal constructor\n   * @private\n   */\n  function DiagAPI() {\n    function _logProxy(funcName) {\n      return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var logger = getGlobal('diag');\n        // shortcut if logger not set\n        if (!logger) return;\n        return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n      };\n    }\n    // Using self local variable for minification purposes as 'this' cannot be minified\n    var self = this;\n    // DiagAPI specific functions\n    var setLogger = function (logger, optionsOrLogLevel) {\n      var _a, _b, _c;\n      if (optionsOrLogLevel === void 0) {\n        optionsOrLogLevel = {\n          logLevel: DiagLogLevel.INFO\n        };\n      }\n      if (logger === self) {\n        // There isn't much we can do here.\n        // Logging to the console might break the user application.\n        // Try to log to self. If a logger was previously registered it will receive the log.\n        var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n        self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n        return false;\n      }\n      if (typeof optionsOrLogLevel === 'number') {\n        optionsOrLogLevel = {\n          logLevel: optionsOrLogLevel\n        };\n      }\n      var oldLogger = getGlobal('diag');\n      var newLogger = createLogLevelDiagLogger((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : DiagLogLevel.INFO, logger);\n      // There already is an logger registered. We'll let it know before overwriting it.\n      if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n        var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : '<failed to generate stacktrace>';\n        oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n        newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n      }\n      return registerGlobal('diag', newLogger, self, true);\n    };\n    self.setLogger = setLogger;\n    self.disable = function () {\n      unregisterGlobal(API_NAME, self);\n    };\n    self.createComponentLogger = function (options) {\n      return new DiagComponentLogger(options);\n    };\n    self.verbose = _logProxy('verbose');\n    self.debug = _logProxy('debug');\n    self.info = _logProxy('info');\n    self.warn = _logProxy('warn');\n    self.error = _logProxy('error');\n  }\n  /** Get the singleton instance of the DiagAPI API */\n  DiagAPI.instance = function () {\n    if (!this._instance) {\n      this._instance = new DiagAPI();\n    }\n    return this._instance;\n  };\n  return DiagAPI;\n}();\nexport { DiagAPI };","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","__spreadArray","to","from","pack","arguments","length","l","Array","prototype","slice","concat","DiagComponentLogger","createLogLevelDiagLogger","DiagLogLevel","getGlobal","registerGlobal","unregisterGlobal","API_NAME","DiagAPI","_logProxy","funcName","args","_i","logger","apply","self","setLogger","optionsOrLogLevel","_a","_b","_c","logLevel","INFO","err","Error","stack","message","oldLogger","newLogger","suppressOverrideMessage","warn","disable","createComponentLogger","options","verbose","debug","info","instance","_instance"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/api/build/esm/api/diag.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport { DiagLogLevel, } from '../diag/types';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */ (function () {\n    /**\n     * Private internal constructor\n     * @private\n     */\n    function DiagAPI() {\n        function _logProxy(funcName) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var logger = getGlobal('diag');\n                // shortcut if logger not set\n                if (!logger)\n                    return;\n                return logger[funcName].apply(logger, __spreadArray([], __read(args), false));\n            };\n        }\n        // Using self local variable for minification purposes as 'this' cannot be minified\n        var self = this;\n        // DiagAPI specific functions\n        var setLogger = function (logger, optionsOrLogLevel) {\n            var _a, _b, _c;\n            if (optionsOrLogLevel === void 0) { optionsOrLogLevel = { logLevel: DiagLogLevel.INFO }; }\n            if (logger === self) {\n                // There isn't much we can do here.\n                // Logging to the console might break the user application.\n                // Try to log to self. If a logger was previously registered it will receive the log.\n                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n                return false;\n            }\n            if (typeof optionsOrLogLevel === 'number') {\n                optionsOrLogLevel = {\n                    logLevel: optionsOrLogLevel,\n                };\n            }\n            var oldLogger = getGlobal('diag');\n            var newLogger = createLogLevelDiagLogger((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : DiagLogLevel.INFO, logger);\n            // There already is an logger registered. We'll let it know before overwriting it.\n            if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {\n                var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : '<failed to generate stacktrace>';\n                oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n                newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n            }\n            return registerGlobal('diag', newLogger, self, true);\n        };\n        self.setLogger = setLogger;\n        self.disable = function () {\n            unregisterGlobal(API_NAME, self);\n        };\n        self.createComponentLogger = function (options) {\n            return new DiagComponentLogger(options);\n        };\n        self.verbose = _logProxy('verbose');\n        self.debug = _logProxy('debug');\n        self.info = _logProxy('info');\n        self.warn = _logProxy('warn');\n        self.error = _logProxy('error');\n    }\n    /** Get the singleton instance of the DiagAPI API */\n    DiagAPI.instance = function () {\n        if (!this._instance) {\n            this._instance = new DiagAPI();\n        }\n        return this._instance;\n    };\n    return DiagAPI;\n}());\nexport { DiagAPI };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}