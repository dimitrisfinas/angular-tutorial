{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChannelCredentials = void 0;\nconst tls_1 = require(\"tls\");\nconst call_credentials_1 = require(\"./call-credentials\");\nconst tls_helpers_1 = require(\"./tls-helpers\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction verifyIsBufferOrNull(obj, friendlyName) {\n  if (obj && !(obj instanceof Buffer)) {\n    throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);\n  }\n}\nfunction bufferOrNullEqual(buf1, buf2) {\n  if (buf1 === null && buf2 === null) {\n    return true;\n  } else {\n    return buf1 !== null && buf2 !== null && buf1.equals(buf2);\n  }\n}\n/**\n * A class that contains credentials for communicating over a channel, as well\n * as a set of per-call credentials, which are applied to every method call made\n * over a channel initialized with an instance of this class.\n */\nclass ChannelCredentials {\n  constructor(callCredentials) {\n    this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();\n  }\n  /**\n   * Gets the set of per-call credentials associated with this instance.\n   */\n  _getCallCredentials() {\n    return this.callCredentials;\n  }\n  /**\n   * Return a new ChannelCredentials instance with a given set of credentials.\n   * The resulting instance can be used to construct a Channel that communicates\n   * over TLS.\n   * @param rootCerts The root certificate data.\n   * @param privateKey The client certificate private key, if available.\n   * @param certChain The client certificate key chain, if available.\n   * @param verifyOptions Additional options to modify certificate verification\n   */\n  static createSsl(rootCerts, privateKey, certChain, verifyOptions) {\n    var _a;\n    verifyIsBufferOrNull(rootCerts, 'Root certificate');\n    verifyIsBufferOrNull(privateKey, 'Private key');\n    verifyIsBufferOrNull(certChain, 'Certificate chain');\n    if (privateKey && !certChain) {\n      throw new Error('Private key must be given with accompanying certificate chain');\n    }\n    if (!privateKey && certChain) {\n      throw new Error('Certificate chain must be given with accompanying private key');\n    }\n    const secureContext = tls_1.createSecureContext({\n      ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : tls_helpers_1.getDefaultRootsData()) !== null && _a !== void 0 ? _a : undefined,\n      key: privateKey !== null && privateKey !== void 0 ? privateKey : undefined,\n      cert: certChain !== null && certChain !== void 0 ? certChain : undefined,\n      ciphers: tls_helpers_1.CIPHER_SUITES\n    });\n    return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n  }\n  /**\n   * Return a new ChannelCredentials instance with credentials created using\n   * the provided secureContext. The resulting instances can be used to\n   * construct a Channel that communicates over TLS. gRPC will not override\n   * anything in the provided secureContext, so the environment variables\n   * GRPC_SSL_CIPHER_SUITES and GRPC_DEFAULT_SSL_ROOTS_FILE_PATH will\n   * not be applied.\n   * @param secureContext The return value of tls.createSecureContext()\n   * @param verifyOptions Additional options to modify certificate verification\n   */\n  static createFromSecureContext(secureContext, verifyOptions) {\n    return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n  }\n  /**\n   * Return a new ChannelCredentials instance with no credentials.\n   */\n  static createInsecure() {\n    return new InsecureChannelCredentialsImpl();\n  }\n}\nexports.ChannelCredentials = ChannelCredentials;\nclass InsecureChannelCredentialsImpl extends ChannelCredentials {\n  constructor(callCredentials) {\n    super(callCredentials);\n  }\n  compose(callCredentials) {\n    throw new Error('Cannot compose insecure credentials');\n  }\n  _getConnectionOptions() {\n    return null;\n  }\n  _isSecure() {\n    return false;\n  }\n  _equals(other) {\n    return other instanceof InsecureChannelCredentialsImpl;\n  }\n}\nclass SecureChannelCredentialsImpl extends ChannelCredentials {\n  constructor(secureContext, verifyOptions) {\n    super();\n    this.secureContext = secureContext;\n    this.verifyOptions = verifyOptions;\n    this.connectionOptions = {\n      secureContext\n    };\n    // Node asserts that this option is a function, so we cannot pass undefined\n    if (verifyOptions === null || verifyOptions === void 0 ? void 0 : verifyOptions.checkServerIdentity) {\n      this.connectionOptions.checkServerIdentity = verifyOptions.checkServerIdentity;\n    }\n  }\n  compose(callCredentials) {\n    const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n    return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);\n  }\n  _getConnectionOptions() {\n    // Copy to prevent callers from mutating this.connectionOptions\n    return Object.assign({}, this.connectionOptions);\n  }\n  _isSecure() {\n    return true;\n  }\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (other instanceof SecureChannelCredentialsImpl) {\n      return this.secureContext === other.secureContext && this.verifyOptions.checkServerIdentity === other.verifyOptions.checkServerIdentity;\n    } else {\n      return false;\n    }\n  }\n}\nclass ComposedChannelCredentialsImpl extends ChannelCredentials {\n  constructor(channelCredentials, callCreds) {\n    super(callCreds);\n    this.channelCredentials = channelCredentials;\n  }\n  compose(callCredentials) {\n    const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n    return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);\n  }\n  _getConnectionOptions() {\n    return this.channelCredentials._getConnectionOptions();\n  }\n  _isSecure() {\n    return true;\n  }\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (other instanceof ComposedChannelCredentialsImpl) {\n      return this.channelCredentials._equals(other.channelCredentials) && this.callCredentials._equals(other.callCredentials);\n    } else {\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","ChannelCredentials","tls_1","require","call_credentials_1","tls_helpers_1","verifyIsBufferOrNull","obj","friendlyName","Buffer","TypeError","bufferOrNullEqual","buf1","buf2","equals","constructor","callCredentials","CallCredentials","createEmpty","_getCallCredentials","createSsl","rootCerts","privateKey","certChain","verifyOptions","_a","Error","secureContext","createSecureContext","ca","getDefaultRootsData","undefined","key","cert","ciphers","CIPHER_SUITES","SecureChannelCredentialsImpl","createFromSecureContext","createInsecure","InsecureChannelCredentialsImpl","compose","_getConnectionOptions","_isSecure","_equals","other","connectionOptions","checkServerIdentity","combinedCallCredentials","ComposedChannelCredentialsImpl","assign","channelCredentials","callCreds"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@grpc/grpc-js/build/src/channel-credentials.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChannelCredentials = void 0;\nconst tls_1 = require(\"tls\");\nconst call_credentials_1 = require(\"./call-credentials\");\nconst tls_helpers_1 = require(\"./tls-helpers\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction verifyIsBufferOrNull(obj, friendlyName) {\n    if (obj && !(obj instanceof Buffer)) {\n        throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);\n    }\n}\nfunction bufferOrNullEqual(buf1, buf2) {\n    if (buf1 === null && buf2 === null) {\n        return true;\n    }\n    else {\n        return buf1 !== null && buf2 !== null && buf1.equals(buf2);\n    }\n}\n/**\n * A class that contains credentials for communicating over a channel, as well\n * as a set of per-call credentials, which are applied to every method call made\n * over a channel initialized with an instance of this class.\n */\nclass ChannelCredentials {\n    constructor(callCredentials) {\n        this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();\n    }\n    /**\n     * Gets the set of per-call credentials associated with this instance.\n     */\n    _getCallCredentials() {\n        return this.callCredentials;\n    }\n    /**\n     * Return a new ChannelCredentials instance with a given set of credentials.\n     * The resulting instance can be used to construct a Channel that communicates\n     * over TLS.\n     * @param rootCerts The root certificate data.\n     * @param privateKey The client certificate private key, if available.\n     * @param certChain The client certificate key chain, if available.\n     * @param verifyOptions Additional options to modify certificate verification\n     */\n    static createSsl(rootCerts, privateKey, certChain, verifyOptions) {\n        var _a;\n        verifyIsBufferOrNull(rootCerts, 'Root certificate');\n        verifyIsBufferOrNull(privateKey, 'Private key');\n        verifyIsBufferOrNull(certChain, 'Certificate chain');\n        if (privateKey && !certChain) {\n            throw new Error('Private key must be given with accompanying certificate chain');\n        }\n        if (!privateKey && certChain) {\n            throw new Error('Certificate chain must be given with accompanying private key');\n        }\n        const secureContext = tls_1.createSecureContext({\n            ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : tls_helpers_1.getDefaultRootsData()) !== null && _a !== void 0 ? _a : undefined,\n            key: privateKey !== null && privateKey !== void 0 ? privateKey : undefined,\n            cert: certChain !== null && certChain !== void 0 ? certChain : undefined,\n            ciphers: tls_helpers_1.CIPHER_SUITES,\n        });\n        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n    }\n    /**\n     * Return a new ChannelCredentials instance with credentials created using\n     * the provided secureContext. The resulting instances can be used to\n     * construct a Channel that communicates over TLS. gRPC will not override\n     * anything in the provided secureContext, so the environment variables\n     * GRPC_SSL_CIPHER_SUITES and GRPC_DEFAULT_SSL_ROOTS_FILE_PATH will\n     * not be applied.\n     * @param secureContext The return value of tls.createSecureContext()\n     * @param verifyOptions Additional options to modify certificate verification\n     */\n    static createFromSecureContext(secureContext, verifyOptions) {\n        return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n    }\n    /**\n     * Return a new ChannelCredentials instance with no credentials.\n     */\n    static createInsecure() {\n        return new InsecureChannelCredentialsImpl();\n    }\n}\nexports.ChannelCredentials = ChannelCredentials;\nclass InsecureChannelCredentialsImpl extends ChannelCredentials {\n    constructor(callCredentials) {\n        super(callCredentials);\n    }\n    compose(callCredentials) {\n        throw new Error('Cannot compose insecure credentials');\n    }\n    _getConnectionOptions() {\n        return null;\n    }\n    _isSecure() {\n        return false;\n    }\n    _equals(other) {\n        return other instanceof InsecureChannelCredentialsImpl;\n    }\n}\nclass SecureChannelCredentialsImpl extends ChannelCredentials {\n    constructor(secureContext, verifyOptions) {\n        super();\n        this.secureContext = secureContext;\n        this.verifyOptions = verifyOptions;\n        this.connectionOptions = {\n            secureContext\n        };\n        // Node asserts that this option is a function, so we cannot pass undefined\n        if (verifyOptions === null || verifyOptions === void 0 ? void 0 : verifyOptions.checkServerIdentity) {\n            this.connectionOptions.checkServerIdentity = verifyOptions.checkServerIdentity;\n        }\n    }\n    compose(callCredentials) {\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n        return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);\n    }\n    _getConnectionOptions() {\n        // Copy to prevent callers from mutating this.connectionOptions\n        return Object.assign({}, this.connectionOptions);\n    }\n    _isSecure() {\n        return true;\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof SecureChannelCredentialsImpl) {\n            return (this.secureContext === other.secureContext &&\n                this.verifyOptions.checkServerIdentity === other.verifyOptions.checkServerIdentity);\n        }\n        else {\n            return false;\n        }\n    }\n}\nclass ComposedChannelCredentialsImpl extends ChannelCredentials {\n    constructor(channelCredentials, callCreds) {\n        super(callCreds);\n        this.channelCredentials = channelCredentials;\n    }\n    compose(callCredentials) {\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n        return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);\n    }\n    _getConnectionOptions() {\n        return this.channelCredentials._getConnectionOptions();\n    }\n    _isSecure() {\n        return true;\n    }\n    _equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ComposedChannelCredentialsImpl) {\n            return (this.channelCredentials._equals(other.channelCredentials) &&\n                this.callCredentials._equals(other.callCredentials));\n        }\n        else {\n            return false;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}