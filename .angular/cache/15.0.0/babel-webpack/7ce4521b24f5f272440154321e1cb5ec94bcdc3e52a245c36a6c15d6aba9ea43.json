{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTracerEnabled = exports.trace = exports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\nconst constants_1 = require(\"./constants\");\nconst DEFAULT_LOGGER = {\n  error: (message, ...optionalParams) => {\n    console.error('E ' + message, ...optionalParams);\n  },\n  info: (message, ...optionalParams) => {\n    console.error('I ' + message, ...optionalParams);\n  },\n  debug: (message, ...optionalParams) => {\n    console.error('D ' + message, ...optionalParams);\n  }\n};\nlet _logger = DEFAULT_LOGGER;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : '';\nswitch (verbosityString.toUpperCase()) {\n  case 'DEBUG':\n    _logVerbosity = constants_1.LogVerbosity.DEBUG;\n    break;\n  case 'INFO':\n    _logVerbosity = constants_1.LogVerbosity.INFO;\n    break;\n  case 'ERROR':\n    _logVerbosity = constants_1.LogVerbosity.ERROR;\n    break;\n  case 'NONE':\n    _logVerbosity = constants_1.LogVerbosity.NONE;\n    break;\n  default:\n  // Ignore any other values\n}\n\nexports.getLogger = () => {\n  return _logger;\n};\nexports.setLogger = logger => {\n  _logger = logger;\n};\nexports.setLoggerVerbosity = verbosity => {\n  _logVerbosity = verbosity;\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexports.log = (severity, ...args) => {\n  let logFunction;\n  if (severity >= _logVerbosity) {\n    switch (severity) {\n      case constants_1.LogVerbosity.DEBUG:\n        logFunction = _logger.debug;\n        break;\n      case constants_1.LogVerbosity.INFO:\n        logFunction = _logger.info;\n        break;\n      case constants_1.LogVerbosity.ERROR:\n        logFunction = _logger.error;\n        break;\n    }\n    /* Fall back to _logger.error when other methods are not available for\n     * compatiblity with older behavior that always logged to _logger.error */\n    if (!logFunction) {\n      logFunction = _logger.error;\n    }\n    if (logFunction) {\n      logFunction.bind(_logger)(...args);\n    }\n  }\n};\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : '';\nconst enabledTracers = new Set();\nconst disabledTracers = new Set();\nfor (const tracerName of tracersString.split(',')) {\n  if (tracerName.startsWith('-')) {\n    disabledTracers.add(tracerName.substring(1));\n  } else {\n    enabledTracers.add(tracerName);\n  }\n}\nconst allEnabled = enabledTracers.has('all');\nfunction trace(severity, tracer, text) {\n  if (isTracerEnabled(tracer)) {\n    exports.log(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n  }\n}\nexports.trace = trace;\nfunction isTracerEnabled(tracer) {\n  return !disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer));\n}\nexports.isTracerEnabled = isTracerEnabled;\n//# sourceMappingURL=logging.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}