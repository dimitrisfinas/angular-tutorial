{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description) {\n  // The specification states that for the same input, multiple calls should\n  // return different keys. Due to the nature of the JS dependency management\n  // system, this creates problems where multiple versions of some package\n  // could hold different keys for the same property.\n  //\n  // Therefore, we use Symbol.for which returns the same key for the same input.\n  return Symbol.for(description);\n}\nvar BaseContext = /** @class */function () {\n  /**\n   * Construct a new context which inherits values from an optional parent context.\n   *\n   * @param parentContext a context from which to inherit values\n   */\n  function BaseContext(parentContext) {\n    // for minification\n    var self = this;\n    self._currentContext = parentContext ? new Map(parentContext) : new Map();\n    self.getValue = function (key) {\n      return self._currentContext.get(key);\n    };\n    self.setValue = function (key, value) {\n      var context = new BaseContext(self._currentContext);\n      context._currentContext.set(key, value);\n      return context;\n    };\n    self.deleteValue = function (key) {\n      var context = new BaseContext(self._currentContext);\n      context._currentContext.delete(key);\n      return context;\n    };\n  }\n  return BaseContext;\n}();\n/** The root context is used as the default parent context when there is no active context */\nexport var ROOT_CONTEXT = new BaseContext();","map":{"version":3,"names":["createContextKey","description","Symbol","for","BaseContext","parentContext","self","_currentContext","Map","getValue","key","get","setValue","value","context","set","deleteValue","delete","ROOT_CONTEXT"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/api/build/esm/context/context.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Get a key to uniquely identify a context value */\nexport function createContextKey(description) {\n    // The specification states that for the same input, multiple calls should\n    // return different keys. Due to the nature of the JS dependency management\n    // system, this creates problems where multiple versions of some package\n    // could hold different keys for the same property.\n    //\n    // Therefore, we use Symbol.for which returns the same key for the same input.\n    return Symbol.for(description);\n}\nvar BaseContext = /** @class */ (function () {\n    /**\n     * Construct a new context which inherits values from an optional parent context.\n     *\n     * @param parentContext a context from which to inherit values\n     */\n    function BaseContext(parentContext) {\n        // for minification\n        var self = this;\n        self._currentContext = parentContext ? new Map(parentContext) : new Map();\n        self.getValue = function (key) { return self._currentContext.get(key); };\n        self.setValue = function (key, value) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.set(key, value);\n            return context;\n        };\n        self.deleteValue = function (key) {\n            var context = new BaseContext(self._currentContext);\n            context._currentContext.delete(key);\n            return context;\n        };\n    }\n    return BaseContext;\n}());\n/** The root context is used as the default parent context when there is no active context */\nexport var ROOT_CONTEXT = new BaseContext();\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,gBAAgB,CAACC,WAAW,EAAE;EAC1C;EACA;EACA;EACA;EACA;EACA;EACA,OAAOC,MAAM,CAACC,GAAG,CAACF,WAAW,CAAC;AAClC;AACA,IAAIG,WAAW,GAAG,aAAe,YAAY;EACzC;AACJ;AACA;AACA;AACA;EACI,SAASA,WAAW,CAACC,aAAa,EAAE;IAChC;IACA,IAAIC,IAAI,GAAG,IAAI;IACfA,IAAI,CAACC,eAAe,GAAGF,aAAa,GAAG,IAAIG,GAAG,CAACH,aAAa,CAAC,GAAG,IAAIG,GAAG,EAAE;IACzEF,IAAI,CAACG,QAAQ,GAAG,UAAUC,GAAG,EAAE;MAAE,OAAOJ,IAAI,CAACC,eAAe,CAACI,GAAG,CAACD,GAAG,CAAC;IAAE,CAAC;IACxEJ,IAAI,CAACM,QAAQ,GAAG,UAAUF,GAAG,EAAEG,KAAK,EAAE;MAClC,IAAIC,OAAO,GAAG,IAAIV,WAAW,CAACE,IAAI,CAACC,eAAe,CAAC;MACnDO,OAAO,CAACP,eAAe,CAACQ,GAAG,CAACL,GAAG,EAAEG,KAAK,CAAC;MACvC,OAAOC,OAAO;IAClB,CAAC;IACDR,IAAI,CAACU,WAAW,GAAG,UAAUN,GAAG,EAAE;MAC9B,IAAII,OAAO,GAAG,IAAIV,WAAW,CAACE,IAAI,CAACC,eAAe,CAAC;MACnDO,OAAO,CAACP,eAAe,CAACU,MAAM,CAACP,GAAG,CAAC;MACnC,OAAOI,OAAO;IAClB,CAAC;EACL;EACA,OAAOV,WAAW;AACtB,CAAC,EAAG;AACJ;AACA,OAAO,IAAIc,YAAY,GAAG,IAAId,WAAW,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}