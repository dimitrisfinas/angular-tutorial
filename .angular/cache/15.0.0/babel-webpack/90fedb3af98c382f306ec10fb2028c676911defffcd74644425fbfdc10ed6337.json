{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { globalErrorHandler } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */function () {\n  function MultiSpanProcessor(_spanProcessors) {\n    this._spanProcessors = _spanProcessors;\n  }\n  MultiSpanProcessor.prototype.forceFlush = function () {\n    var promises = [];\n    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n      var spanProcessor = _a[_i];\n      promises.push(spanProcessor.forceFlush());\n    }\n    return new Promise(function (resolve) {\n      Promise.all(promises).then(function () {\n        resolve();\n      }).catch(function (error) {\n        globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n        resolve();\n      });\n    });\n  };\n  MultiSpanProcessor.prototype.onStart = function (span, context) {\n    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n      var spanProcessor = _a[_i];\n      spanProcessor.onStart(span, context);\n    }\n  };\n  MultiSpanProcessor.prototype.onEnd = function (span) {\n    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n      var spanProcessor = _a[_i];\n      spanProcessor.onEnd(span);\n    }\n  };\n  MultiSpanProcessor.prototype.shutdown = function () {\n    var promises = [];\n    for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n      var spanProcessor = _a[_i];\n      promises.push(spanProcessor.shutdown());\n    }\n    return new Promise(function (resolve, reject) {\n      Promise.all(promises).then(function () {\n        resolve();\n      }, reject);\n    });\n  };\n  return MultiSpanProcessor;\n}();\nexport { MultiSpanProcessor };","map":{"version":3,"names":["globalErrorHandler","MultiSpanProcessor","_spanProcessors","prototype","forceFlush","promises","_i","_a","length","spanProcessor","push","Promise","resolve","all","then","catch","error","Error","onStart","span","context","onEnd","shutdown","reject"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { globalErrorHandler } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */ (function () {\n    function MultiSpanProcessor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    MultiSpanProcessor.prototype.forceFlush = function () {\n        var promises = [];\n        for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n            var spanProcessor = _a[_i];\n            promises.push(spanProcessor.forceFlush());\n        }\n        return new Promise(function (resolve) {\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(function (error) {\n                globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n                resolve();\n            });\n        });\n    };\n    MultiSpanProcessor.prototype.onStart = function (span, context) {\n        for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n            var spanProcessor = _a[_i];\n            spanProcessor.onStart(span, context);\n        }\n    };\n    MultiSpanProcessor.prototype.onEnd = function (span) {\n        for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n            var spanProcessor = _a[_i];\n            spanProcessor.onEnd(span);\n        }\n    };\n    MultiSpanProcessor.prototype.shutdown = function () {\n        var promises = [];\n        for (var _i = 0, _a = this._spanProcessors; _i < _a.length; _i++) {\n            var spanProcessor = _a[_i];\n            promises.push(spanProcessor.shutdown());\n        }\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises).then(function () {\n                resolve();\n            }, reject);\n        });\n    };\n    return MultiSpanProcessor;\n}());\nexport { MultiSpanProcessor };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,kBAAkB,QAAQ,qBAAqB;AACxD;AACA;AACA;AACA;AACA,IAAIC,kBAAkB,GAAG,aAAe,YAAY;EAChD,SAASA,kBAAkB,CAACC,eAAe,EAAE;IACzC,IAAI,CAACA,eAAe,GAAGA,eAAe;EAC1C;EACAD,kBAAkB,CAACE,SAAS,CAACC,UAAU,GAAG,YAAY;IAClD,IAAIC,QAAQ,GAAG,EAAE;IACjB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAG,IAAI,CAACL,eAAe,EAAEI,EAAE,GAAGC,EAAE,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC9D,IAAIG,aAAa,GAAGF,EAAE,CAACD,EAAE,CAAC;MAC1BD,QAAQ,CAACK,IAAI,CAACD,aAAa,CAACL,UAAU,EAAE,CAAC;IAC7C;IACA,OAAO,IAAIO,OAAO,CAAC,UAAUC,OAAO,EAAE;MAClCD,OAAO,CAACE,GAAG,CAACR,QAAQ,CAAC,CAChBS,IAAI,CAAC,YAAY;QAClBF,OAAO,EAAE;MACb,CAAC,CAAC,CACGG,KAAK,CAAC,UAAUC,KAAK,EAAE;QACxBhB,kBAAkB,CAACgB,KAAK,IAAI,IAAIC,KAAK,CAAC,uCAAuC,CAAC,CAAC;QAC/EL,OAAO,EAAE;MACb,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDX,kBAAkB,CAACE,SAAS,CAACe,OAAO,GAAG,UAAUC,IAAI,EAAEC,OAAO,EAAE;IAC5D,KAAK,IAAId,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAG,IAAI,CAACL,eAAe,EAAEI,EAAE,GAAGC,EAAE,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC9D,IAAIG,aAAa,GAAGF,EAAE,CAACD,EAAE,CAAC;MAC1BG,aAAa,CAACS,OAAO,CAACC,IAAI,EAAEC,OAAO,CAAC;IACxC;EACJ,CAAC;EACDnB,kBAAkB,CAACE,SAAS,CAACkB,KAAK,GAAG,UAAUF,IAAI,EAAE;IACjD,KAAK,IAAIb,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAG,IAAI,CAACL,eAAe,EAAEI,EAAE,GAAGC,EAAE,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC9D,IAAIG,aAAa,GAAGF,EAAE,CAACD,EAAE,CAAC;MAC1BG,aAAa,CAACY,KAAK,CAACF,IAAI,CAAC;IAC7B;EACJ,CAAC;EACDlB,kBAAkB,CAACE,SAAS,CAACmB,QAAQ,GAAG,YAAY;IAChD,IAAIjB,QAAQ,GAAG,EAAE;IACjB,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,EAAE,GAAG,IAAI,CAACL,eAAe,EAAEI,EAAE,GAAGC,EAAE,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC9D,IAAIG,aAAa,GAAGF,EAAE,CAACD,EAAE,CAAC;MAC1BD,QAAQ,CAACK,IAAI,CAACD,aAAa,CAACa,QAAQ,EAAE,CAAC;IAC3C;IACA,OAAO,IAAIX,OAAO,CAAC,UAAUC,OAAO,EAAEW,MAAM,EAAE;MAC1CZ,OAAO,CAACE,GAAG,CAACR,QAAQ,CAAC,CAACS,IAAI,CAAC,YAAY;QACnCF,OAAO,EAAE;MACb,CAAC,EAAEW,MAAM,CAAC;IACd,CAAC,CAAC;EACN,CAAC;EACD,OAAOtB,kBAAkB;AAC7B,CAAC,EAAG;AACJ,SAASA,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}