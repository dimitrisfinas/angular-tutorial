{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var defaultTextMapGetter = {\n  get: function (carrier, key) {\n    if (carrier == null) {\n      return undefined;\n    }\n    return carrier[key];\n  },\n  keys: function (carrier) {\n    if (carrier == null) {\n      return [];\n    }\n    return Object.keys(carrier);\n  }\n};\nexport var defaultTextMapSetter = {\n  set: function (carrier, key, value) {\n    if (carrier == null) {\n      return;\n    }\n    carrier[key] = value;\n  }\n};","map":{"version":3,"names":["defaultTextMapGetter","get","carrier","key","undefined","keys","Object","defaultTextMapSetter","set","value"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var defaultTextMapGetter = {\n    get: function (carrier, key) {\n        if (carrier == null) {\n            return undefined;\n        }\n        return carrier[key];\n    },\n    keys: function (carrier) {\n        if (carrier == null) {\n            return [];\n        }\n        return Object.keys(carrier);\n    },\n};\nexport var defaultTextMapSetter = {\n    set: function (carrier, key, value) {\n        if (carrier == null) {\n            return;\n        }\n        carrier[key] = value;\n    },\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,oBAAoB,GAAG;EAC9BC,GAAG,EAAE,UAAUC,OAAO,EAAEC,GAAG,EAAE;IACzB,IAAID,OAAO,IAAI,IAAI,EAAE;MACjB,OAAOE,SAAS;IACpB;IACA,OAAOF,OAAO,CAACC,GAAG,CAAC;EACvB,CAAC;EACDE,IAAI,EAAE,UAAUH,OAAO,EAAE;IACrB,IAAIA,OAAO,IAAI,IAAI,EAAE;MACjB,OAAO,EAAE;IACb;IACA,OAAOI,MAAM,CAACD,IAAI,CAACH,OAAO,CAAC;EAC/B;AACJ,CAAC;AACD,OAAO,IAAIK,oBAAoB,GAAG;EAC9BC,GAAG,EAAE,UAAUN,OAAO,EAAEC,GAAG,EAAEM,KAAK,EAAE;IAChC,IAAIP,OAAO,IAAI,IAAI,EAAE;MACjB;IACJ;IACAA,OAAO,CAACC,GAAG,CAAC,GAAGM,KAAK;EACxB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}