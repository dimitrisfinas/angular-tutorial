{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT, DEFAULT_ATTRIBUTE_COUNT_LIMIT } from '@opentelemetry/core';\nimport { buildSamplerFromEnv, DEFAULT_CONFIG } from './config';\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig) {\n  var perInstanceDefaults = {\n    sampler: buildSamplerFromEnv()\n  };\n  var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n  target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n  target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n  /**\n   * When span attribute count limit is not defined, but general attribute count limit is defined\n   * Then, span attribute count limit will be same as general one\n   */\n  if (target.spanLimits.attributeCountLimit === DEFAULT_ATTRIBUTE_COUNT_LIMIT && target.generalLimits.attributeCountLimit !== DEFAULT_ATTRIBUTE_COUNT_LIMIT) {\n    target.spanLimits.attributeCountLimit = target.generalLimits.attributeCountLimit;\n  }\n  /**\n   * When span attribute value length limit is not defined, but general attribute value length limit is defined\n   * Then, span attribute value length limit will be same as general one\n   */\n  if (target.spanLimits.attributeValueLengthLimit === DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT && target.generalLimits.attributeValueLengthLimit !== DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT) {\n    target.spanLimits.attributeValueLengthLimit = target.generalLimits.attributeValueLengthLimit;\n  }\n  return target;\n}","map":{"version":3,"names":["DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT","DEFAULT_ATTRIBUTE_COUNT_LIMIT","buildSamplerFromEnv","DEFAULT_CONFIG","mergeConfig","userConfig","perInstanceDefaults","sampler","target","Object","assign","generalLimits","spanLimits","attributeCountLimit","attributeValueLengthLimit"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT, DEFAULT_ATTRIBUTE_COUNT_LIMIT } from '@opentelemetry/core';\nimport { buildSamplerFromEnv, DEFAULT_CONFIG } from './config';\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig) {\n    var perInstanceDefaults = {\n        sampler: buildSamplerFromEnv(),\n    };\n    var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n    /**\n     * When span attribute count limit is not defined, but general attribute count limit is defined\n     * Then, span attribute count limit will be same as general one\n     */\n    if (target.spanLimits.attributeCountLimit === DEFAULT_ATTRIBUTE_COUNT_LIMIT && target.generalLimits.attributeCountLimit !== DEFAULT_ATTRIBUTE_COUNT_LIMIT) {\n        target.spanLimits.attributeCountLimit = target.generalLimits.attributeCountLimit;\n    }\n    /**\n     * When span attribute value length limit is not defined, but general attribute value length limit is defined\n     * Then, span attribute value length limit will be same as general one\n     */\n    if (target.spanLimits.attributeValueLengthLimit === DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT && target.generalLimits.attributeValueLengthLimit !== DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT) {\n        target.spanLimits.attributeValueLengthLimit = target.generalLimits.attributeValueLengthLimit;\n    }\n    return target;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,oCAAoC,EAAEC,6BAA6B,QAAQ,qBAAqB;AACzG,SAASC,mBAAmB,EAAEC,cAAc,QAAQ,UAAU;AAC9D;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAW,CAACC,UAAU,EAAE;EACpC,IAAIC,mBAAmB,GAAG;IACtBC,OAAO,EAAEL,mBAAmB;EAChC,CAAC;EACD,IAAIM,MAAM,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEP,cAAc,EAAEG,mBAAmB,EAAED,UAAU,CAAC;EAC/EG,MAAM,CAACG,aAAa,GAAGF,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEP,cAAc,CAACQ,aAAa,EAAEN,UAAU,CAACM,aAAa,IAAI,CAAC,CAAC,CAAC;EACtGH,MAAM,CAACI,UAAU,GAAGH,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEP,cAAc,CAACS,UAAU,EAAEP,UAAU,CAACO,UAAU,IAAI,CAAC,CAAC,CAAC;EAC7F;AACJ;AACA;AACA;EACI,IAAIJ,MAAM,CAACI,UAAU,CAACC,mBAAmB,KAAKZ,6BAA6B,IAAIO,MAAM,CAACG,aAAa,CAACE,mBAAmB,KAAKZ,6BAA6B,EAAE;IACvJO,MAAM,CAACI,UAAU,CAACC,mBAAmB,GAAGL,MAAM,CAACG,aAAa,CAACE,mBAAmB;EACpF;EACA;AACJ;AACA;AACA;EACI,IAAIL,MAAM,CAACI,UAAU,CAACE,yBAAyB,KAAKd,oCAAoC,IAAIQ,MAAM,CAACG,aAAa,CAACG,yBAAyB,KAAKd,oCAAoC,EAAE;IACjLQ,MAAM,CAACI,UAAU,CAACE,yBAAyB,GAAGN,MAAM,CAACG,aAAa,CAACG,yBAAyB;EAChG;EACA,OAAON,MAAM;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}