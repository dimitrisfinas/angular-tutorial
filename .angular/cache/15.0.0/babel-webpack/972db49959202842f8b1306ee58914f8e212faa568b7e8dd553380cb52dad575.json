{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH } from './constants';\nexport function serializeKeyPairs(keyPairs) {\n  return keyPairs.reduce(function (hValue, current) {\n    var value = \"\" + hValue + (hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : '') + current;\n    return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n  }, '');\n}\nexport function getKeyPairs(baggage) {\n  return baggage.getAllEntries().map(function (_a) {\n    var _b = __read(_a, 2),\n      key = _b[0],\n      value = _b[1];\n    var entry = encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n    // include opaque metadata if provided\n    // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n    if (value.metadata !== undefined) {\n      entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n    }\n    return entry;\n  });\n}\nexport function parsePairKeyValue(entry) {\n  var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n  if (valueProps.length <= 0) return;\n  var keyPairPart = valueProps.shift();\n  if (!keyPairPart) return;\n  var keyPair = keyPairPart.split(BAGGAGE_KEY_PAIR_SEPARATOR);\n  if (keyPair.length !== 2) return;\n  var key = decodeURIComponent(keyPair[0].trim());\n  var value = decodeURIComponent(keyPair[1].trim());\n  var metadata;\n  if (valueProps.length > 0) {\n    metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n  }\n  return {\n    key: key,\n    value: value,\n    metadata: metadata\n  };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(value) {\n  if (typeof value !== 'string' || value.length === 0) return {};\n  return value.split(BAGGAGE_ITEMS_SEPARATOR).map(function (entry) {\n    return parsePairKeyValue(entry);\n  }).filter(function (keyPair) {\n    return keyPair !== undefined && keyPair.value.length > 0;\n  }).reduce(function (headers, keyPair) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    headers[keyPair.key] = keyPair.value;\n    return headers;\n  }, {});\n}","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","baggageEntryMetadataFromString","BAGGAGE_ITEMS_SEPARATOR","BAGGAGE_PROPERTIES_SEPARATOR","BAGGAGE_KEY_PAIR_SEPARATOR","BAGGAGE_MAX_TOTAL_LENGTH","serializeKeyPairs","keyPairs","reduce","hValue","current","length","getKeyPairs","baggage","getAllEntries","map","_a","_b","key","entry","encodeURIComponent","metadata","undefined","toString","parsePairKeyValue","valueProps","split","keyPairPart","shift","keyPair","decodeURIComponent","trim","join","parseKeyPairsIntoRecord","filter","headers"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/core/build/esm/baggage/utils.js"],"sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH, } from './constants';\nexport function serializeKeyPairs(keyPairs) {\n    return keyPairs.reduce(function (hValue, current) {\n        var value = \"\" + hValue + (hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : '') + current;\n        return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n}\nexport function getKeyPairs(baggage) {\n    return baggage.getAllEntries().map(function (_a) {\n        var _b = __read(_a, 2), key = _b[0], value = _b[1];\n        var entry = encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n        // include opaque metadata if provided\n        // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n        if (value.metadata !== undefined) {\n            entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n        }\n        return entry;\n    });\n}\nexport function parsePairKeyValue(entry) {\n    var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    var keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    var keyPair = keyPairPart.split(BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (keyPair.length !== 2)\n        return;\n    var key = decodeURIComponent(keyPair[0].trim());\n    var value = decodeURIComponent(keyPair[1].trim());\n    var metadata;\n    if (valueProps.length > 0) {\n        metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key: key, value: value, metadata: metadata };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(value) {\n    if (typeof value !== 'string' || value.length === 0)\n        return {};\n    return value\n        .split(BAGGAGE_ITEMS_SEPARATOR)\n        .map(function (entry) {\n        return parsePairKeyValue(entry);\n    })\n        .filter(function (keyPair) { return keyPair !== undefined && keyPair.value.length > 0; })\n        .reduce(function (headers, keyPair) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        headers[keyPair.key] = keyPair.value;\n        return headers;\n    }, {});\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}