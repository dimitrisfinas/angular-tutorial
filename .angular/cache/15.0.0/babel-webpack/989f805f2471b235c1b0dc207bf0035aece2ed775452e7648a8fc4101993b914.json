{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, TraceFlags, trace } from '@opentelemetry/api';\nimport { globalErrorHandler } from '../../common/global-error-handler';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */function () {\n  function ParentBasedSampler(config) {\n    var _a, _b, _c, _d;\n    this._root = config.root;\n    if (!this._root) {\n      globalErrorHandler(new Error('ParentBasedSampler must have a root sampler configured'));\n      this._root = new AlwaysOnSampler();\n    }\n    this._remoteParentSampled = (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new AlwaysOnSampler();\n    this._remoteParentNotSampled = (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new AlwaysOffSampler();\n    this._localParentSampled = (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new AlwaysOnSampler();\n    this._localParentNotSampled = (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new AlwaysOffSampler();\n  }\n  ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n    var parentContext = trace.getSpanContext(context);\n    if (!parentContext || !isSpanContextValid(parentContext)) {\n      return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n    if (parentContext.isRemote) {\n      if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n        return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n      }\n      return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n    if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n      return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    }\n    return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n  };\n  ParentBasedSampler.prototype.toString = function () {\n    return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n  };\n  return ParentBasedSampler;\n}();\nexport { ParentBasedSampler };","map":{"version":3,"names":["isSpanContextValid","TraceFlags","trace","globalErrorHandler","AlwaysOffSampler","AlwaysOnSampler","ParentBasedSampler","config","_a","_b","_c","_d","_root","root","Error","_remoteParentSampled","remoteParentSampled","_remoteParentNotSampled","remoteParentNotSampled","_localParentSampled","localParentSampled","_localParentNotSampled","localParentNotSampled","prototype","shouldSample","context","traceId","spanName","spanKind","attributes","links","parentContext","getSpanContext","isRemote","traceFlags","SAMPLED","toString"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/core/build/esm/trace/sampler/ParentBasedSampler.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, TraceFlags, trace, } from '@opentelemetry/api';\nimport { globalErrorHandler } from '../../common/global-error-handler';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */ (function () {\n    function ParentBasedSampler(config) {\n        var _a, _b, _c, _d;\n        this._root = config.root;\n        if (!this._root) {\n            globalErrorHandler(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new AlwaysOffSampler();\n        this._localParentSampled =\n            (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new AlwaysOnSampler();\n        this._localParentNotSampled =\n            (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new AlwaysOffSampler();\n    }\n    ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n        var parentContext = trace.getSpanContext(context);\n        if (!parentContext || !isSpanContextValid(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    };\n    ParentBasedSampler.prototype.toString = function () {\n        return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n    };\n    return ParentBasedSampler;\n}());\nexport { ParentBasedSampler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}