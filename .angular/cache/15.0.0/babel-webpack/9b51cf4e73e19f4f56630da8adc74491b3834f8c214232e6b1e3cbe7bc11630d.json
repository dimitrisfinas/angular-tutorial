{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OTLPTraceExporter = void 0;\nconst core_1 = require(\"@opentelemetry/core\");\nconst grpc_js_1 = require(\"@grpc/grpc-js\");\nconst otlp_grpc_exporter_base_1 = require(\"@opentelemetry/otlp-grpc-exporter-base\");\nconst otlp_transformer_1 = require(\"@opentelemetry/otlp-transformer\");\n/**\n * OTLP Trace Exporter for Node\n */\nclass OTLPTraceExporter extends otlp_grpc_exporter_base_1.OTLPGRPCExporterNodeBase {\n  constructor(config = {}) {\n    super(config);\n    const headers = core_1.baggageUtils.parseKeyPairsIntoRecord((0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_HEADERS);\n    this.metadata || (this.metadata = new grpc_js_1.Metadata());\n    for (const [k, v] of Object.entries(headers)) {\n      this.metadata.set(k, v);\n    }\n  }\n  convert(spans) {\n    return (0, otlp_transformer_1.createExportTraceServiceRequest)(spans);\n  }\n  getDefaultUrl(config) {\n    return (0, otlp_grpc_exporter_base_1.validateAndNormalizeUrl)(this.getUrlFromConfig(config));\n  }\n  getServiceClientType() {\n    return otlp_grpc_exporter_base_1.ServiceClientType.SPANS;\n  }\n  getServiceProtoPath() {\n    return 'opentelemetry/proto/collector/trace/v1/trace_service.proto';\n  }\n  getUrlFromConfig(config) {\n    if (typeof config.url === 'string') {\n      return config.url;\n    }\n    return (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT || (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_ENDPOINT || otlp_grpc_exporter_base_1.DEFAULT_COLLECTOR_URL;\n  }\n}\nexports.OTLPTraceExporter = OTLPTraceExporter;\n//# sourceMappingURL=OTLPTraceExporter.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}