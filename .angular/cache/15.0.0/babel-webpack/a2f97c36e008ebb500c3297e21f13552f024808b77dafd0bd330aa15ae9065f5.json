{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { loggingErrorHandler } from './logging-error-handler';\n/** The global error handler delegate */\nvar delegateHandler = loggingErrorHandler();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler) {\n  delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex) {\n  try {\n    delegateHandler(ex);\n  } catch (_a) {} // eslint-disable-line no-empty\n}","map":{"version":3,"names":["loggingErrorHandler","delegateHandler","setGlobalErrorHandler","handler","globalErrorHandler","ex","_a"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { loggingErrorHandler } from './logging-error-handler';\n/** The global error handler delegate */\nvar delegateHandler = loggingErrorHandler();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler) {\n    delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch (_a) { } // eslint-disable-line no-empty\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,mBAAmB,QAAQ,yBAAyB;AAC7D;AACA,IAAIC,eAAe,GAAGD,mBAAmB,EAAE;AAC3C;AACA;AACA;AACA;AACA,OAAO,SAASE,qBAAqB,CAACC,OAAO,EAAE;EAC3CF,eAAe,GAAGE,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkB,CAACC,EAAE,EAAE;EACnC,IAAI;IACAJ,eAAe,CAACI,EAAE,CAAC;EACvB,CAAC,CACD,OAAOC,EAAE,EAAE,CAAE,CAAC,CAAC;AACnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}