{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _asyncToGenerator = require(\"/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MaxMessageSizeFilterFactory = exports.MaxMessageSizeFilter = void 0;\nconst filter_1 = require(\"./filter\");\nconst constants_1 = require(\"./constants\");\nclass MaxMessageSizeFilter extends filter_1.BaseFilter {\n  constructor(options, callStream) {\n    super();\n    this.options = options;\n    this.callStream = callStream;\n    this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n    this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n    if ('grpc.max_send_message_length' in options) {\n      this.maxSendMessageSize = options['grpc.max_send_message_length'];\n    }\n    if ('grpc.max_receive_message_length' in options) {\n      this.maxReceiveMessageSize = options['grpc.max_receive_message_length'];\n    }\n  }\n  sendMessage(message) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      /* A configured size of -1 means that there is no limit, so skip the check\n       * entirely */\n      if (_this.maxSendMessageSize === -1) {\n        return message;\n      } else {\n        const concreteMessage = yield message;\n        if (concreteMessage.message.length > _this.maxSendMessageSize) {\n          _this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Sent message larger than max (${concreteMessage.message.length} vs. ${_this.maxSendMessageSize})`);\n          return Promise.reject('Message too large');\n        } else {\n          return concreteMessage;\n        }\n      }\n    })();\n  }\n  receiveMessage(message) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      /* A configured size of -1 means that there is no limit, so skip the check\n       * entirely */\n      if (_this2.maxReceiveMessageSize === -1) {\n        return message;\n      } else {\n        const concreteMessage = yield message;\n        if (concreteMessage.length > _this2.maxReceiveMessageSize) {\n          _this2.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Received message larger than max (${concreteMessage.length} vs. ${_this2.maxReceiveMessageSize})`);\n          return Promise.reject('Message too large');\n        } else {\n          return concreteMessage;\n        }\n      }\n    })();\n  }\n}\nexports.MaxMessageSizeFilter = MaxMessageSizeFilter;\nclass MaxMessageSizeFilterFactory {\n  constructor(options) {\n    this.options = options;\n  }\n  createFilter(callStream) {\n    return new MaxMessageSizeFilter(this.options, callStream);\n  }\n}\nexports.MaxMessageSizeFilterFactory = MaxMessageSizeFilterFactory;","map":{"version":3,"names":["Object","defineProperty","exports","value","MaxMessageSizeFilterFactory","MaxMessageSizeFilter","filter_1","require","constants_1","BaseFilter","constructor","options","callStream","maxSendMessageSize","DEFAULT_MAX_SEND_MESSAGE_LENGTH","maxReceiveMessageSize","DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH","sendMessage","message","concreteMessage","length","cancelWithStatus","Status","RESOURCE_EXHAUSTED","Promise","reject","receiveMessage","createFilter"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@grpc/grpc-js/build/src/max-message-size-filter.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MaxMessageSizeFilterFactory = exports.MaxMessageSizeFilter = void 0;\nconst filter_1 = require(\"./filter\");\nconst constants_1 = require(\"./constants\");\nclass MaxMessageSizeFilter extends filter_1.BaseFilter {\n    constructor(options, callStream) {\n        super();\n        this.options = options;\n        this.callStream = callStream;\n        this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n        this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n        if ('grpc.max_send_message_length' in options) {\n            this.maxSendMessageSize = options['grpc.max_send_message_length'];\n        }\n        if ('grpc.max_receive_message_length' in options) {\n            this.maxReceiveMessageSize = options['grpc.max_receive_message_length'];\n        }\n    }\n    async sendMessage(message) {\n        /* A configured size of -1 means that there is no limit, so skip the check\n         * entirely */\n        if (this.maxSendMessageSize === -1) {\n            return message;\n        }\n        else {\n            const concreteMessage = await message;\n            if (concreteMessage.message.length > this.maxSendMessageSize) {\n                this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Sent message larger than max (${concreteMessage.message.length} vs. ${this.maxSendMessageSize})`);\n                return Promise.reject('Message too large');\n            }\n            else {\n                return concreteMessage;\n            }\n        }\n    }\n    async receiveMessage(message) {\n        /* A configured size of -1 means that there is no limit, so skip the check\n         * entirely */\n        if (this.maxReceiveMessageSize === -1) {\n            return message;\n        }\n        else {\n            const concreteMessage = await message;\n            if (concreteMessage.length > this.maxReceiveMessageSize) {\n                this.callStream.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, `Received message larger than max (${concreteMessage.length} vs. ${this.maxReceiveMessageSize})`);\n                return Promise.reject('Message too large');\n            }\n            else {\n                return concreteMessage;\n            }\n        }\n    }\n}\nexports.MaxMessageSizeFilter = MaxMessageSizeFilter;\nclass MaxMessageSizeFilterFactory {\n    constructor(options) {\n        this.options = options;\n    }\n    createFilter(callStream) {\n        return new MaxMessageSizeFilter(this.options, callStream);\n    }\n}\nexports.MaxMessageSizeFilterFactory = MaxMessageSizeFilterFactory;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAgBAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,2BAA2B,GAAGF,OAAO,CAACG,oBAAoB,GAAG,KAAK,CAAC;AAC3E,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAMF,oBAAoB,SAASC,QAAQ,CAACG,UAAU,CAAC;EACnDC,WAAW,CAACC,OAAO,EAAEC,UAAU,EAAE;IAC7B,KAAK,EAAE;IACP,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,kBAAkB,GAAGL,WAAW,CAACM,+BAA+B;IACrE,IAAI,CAACC,qBAAqB,GAAGP,WAAW,CAACQ,kCAAkC;IAC3E,IAAI,8BAA8B,IAAIL,OAAO,EAAE;MAC3C,IAAI,CAACE,kBAAkB,GAAGF,OAAO,CAAC,8BAA8B,CAAC;IACrE;IACA,IAAI,iCAAiC,IAAIA,OAAO,EAAE;MAC9C,IAAI,CAACI,qBAAqB,GAAGJ,OAAO,CAAC,iCAAiC,CAAC;IAC3E;EACJ;EACMM,WAAW,CAACC,OAAO,EAAE;IAAA;IAAA;MACvB;AACR;MACQ,IAAI,KAAI,CAACL,kBAAkB,KAAK,CAAC,CAAC,EAAE;QAChC,OAAOK,OAAO;MAClB,CAAC,MACI;QACD,MAAMC,eAAe,SAASD,OAAO;QACrC,IAAIC,eAAe,CAACD,OAAO,CAACE,MAAM,GAAG,KAAI,CAACP,kBAAkB,EAAE;UAC1D,KAAI,CAACD,UAAU,CAACS,gBAAgB,CAACb,WAAW,CAACc,MAAM,CAACC,kBAAkB,EAAG,iCAAgCJ,eAAe,CAACD,OAAO,CAACE,MAAO,QAAO,KAAI,CAACP,kBAAmB,GAAE,CAAC;UAC1K,OAAOW,OAAO,CAACC,MAAM,CAAC,mBAAmB,CAAC;QAC9C,CAAC,MACI;UACD,OAAON,eAAe;QAC1B;MACJ;IAAC;EACL;EACMO,cAAc,CAACR,OAAO,EAAE;IAAA;IAAA;MAC1B;AACR;MACQ,IAAI,MAAI,CAACH,qBAAqB,KAAK,CAAC,CAAC,EAAE;QACnC,OAAOG,OAAO;MAClB,CAAC,MACI;QACD,MAAMC,eAAe,SAASD,OAAO;QACrC,IAAIC,eAAe,CAACC,MAAM,GAAG,MAAI,CAACL,qBAAqB,EAAE;UACrD,MAAI,CAACH,UAAU,CAACS,gBAAgB,CAACb,WAAW,CAACc,MAAM,CAACC,kBAAkB,EAAG,qCAAoCJ,eAAe,CAACC,MAAO,QAAO,MAAI,CAACL,qBAAsB,GAAE,CAAC;UACzK,OAAOS,OAAO,CAACC,MAAM,CAAC,mBAAmB,CAAC;QAC9C,CAAC,MACI;UACD,OAAON,eAAe;QAC1B;MACJ;IAAC;EACL;AACJ;AACAjB,OAAO,CAACG,oBAAoB,GAAGA,oBAAoB;AACnD,MAAMD,2BAA2B,CAAC;EAC9BM,WAAW,CAACC,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO;EAC1B;EACAgB,YAAY,CAACf,UAAU,EAAE;IACrB,OAAO,IAAIP,oBAAoB,CAAC,IAAI,CAACM,OAAO,EAAEC,UAAU,CAAC;EAC7D;AACJ;AACAV,OAAO,CAACE,2BAA2B,GAAGA,2BAA2B"},"metadata":{},"sourceType":"script","externalDependencies":[]}