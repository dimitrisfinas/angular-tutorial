{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadFileDescriptorSetFromObject = exports.loadFileDescriptorSetFromBuffer = exports.fromJSON = exports.loadSync = exports.load = exports.isAnyExtension = exports.Long = void 0;\nconst camelCase = require(\"lodash.camelcase\");\nconst Protobuf = require(\"protobufjs\");\nconst descriptor = require(\"protobufjs/ext/descriptor\");\nconst util_1 = require(\"./util\");\nconst Long = require(\"long\");\nexports.Long = Long;\nfunction isAnyExtension(obj) {\n  return '@type' in obj && typeof obj['@type'] === 'string';\n}\nexports.isAnyExtension = isAnyExtension;\nconst descriptorOptions = {\n  longs: String,\n  enums: String,\n  bytes: String,\n  defaults: true,\n  oneofs: true,\n  json: true\n};\nfunction joinName(baseName, name) {\n  if (baseName === '') {\n    return name;\n  } else {\n    return baseName + '.' + name;\n  }\n}\nfunction isHandledReflectionObject(obj) {\n  return obj instanceof Protobuf.Service || obj instanceof Protobuf.Type || obj instanceof Protobuf.Enum;\n}\nfunction isNamespaceBase(obj) {\n  return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;\n}\nfunction getAllHandledReflectionObjects(obj, parentName) {\n  const objName = joinName(parentName, obj.name);\n  if (isHandledReflectionObject(obj)) {\n    return [[objName, obj]];\n  } else {\n    if (isNamespaceBase(obj) && typeof obj.nested !== 'undefined') {\n      return Object.keys(obj.nested).map(name => {\n        return getAllHandledReflectionObjects(obj.nested[name], objName);\n      }).reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\n    }\n  }\n  return [];\n}\nfunction createDeserializer(cls, options) {\n  return function deserialize(argBuf) {\n    return cls.toObject(cls.decode(argBuf), options);\n  };\n}\nfunction createSerializer(cls) {\n  return function serialize(arg) {\n    if (Array.isArray(arg)) {\n      throw new Error(`Failed to serialize message: expected object with ${cls.name} structure, got array instead`);\n    }\n    const message = cls.fromObject(arg);\n    return cls.encode(message).finish();\n  };\n}\nfunction createMethodDefinition(method, serviceName, options, fileDescriptors) {\n  /* This is only ever called after the corresponding root.resolveAll(), so we\n   * can assume that the resolved request and response types are non-null */\n  const requestType = method.resolvedRequestType;\n  const responseType = method.resolvedResponseType;\n  return {\n    path: '/' + serviceName + '/' + method.name,\n    requestStream: !!method.requestStream,\n    responseStream: !!method.responseStream,\n    requestSerialize: createSerializer(requestType),\n    requestDeserialize: createDeserializer(requestType, options),\n    responseSerialize: createSerializer(responseType),\n    responseDeserialize: createDeserializer(responseType, options),\n    // TODO(murgatroid99): Find a better way to handle this\n    originalName: camelCase(method.name),\n    requestType: createMessageDefinition(requestType, fileDescriptors),\n    responseType: createMessageDefinition(responseType, fileDescriptors)\n  };\n}\nfunction createServiceDefinition(service, name, options, fileDescriptors) {\n  const def = {};\n  for (const method of service.methodsArray) {\n    def[method.name] = createMethodDefinition(method, name, options, fileDescriptors);\n  }\n  return def;\n}\nfunction createMessageDefinition(message, fileDescriptors) {\n  const messageDescriptor = message.toDescriptor('proto3');\n  return {\n    format: 'Protocol Buffer 3 DescriptorProto',\n    type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),\n    fileDescriptorProtos: fileDescriptors\n  };\n}\nfunction createEnumDefinition(enumType, fileDescriptors) {\n  const enumDescriptor = enumType.toDescriptor('proto3');\n  return {\n    format: 'Protocol Buffer 3 EnumDescriptorProto',\n    type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),\n    fileDescriptorProtos: fileDescriptors\n  };\n}\n/**\n * function createDefinition(obj: Protobuf.Service, name: string, options:\n * Options): ServiceDefinition; function createDefinition(obj: Protobuf.Type,\n * name: string, options: Options): MessageTypeDefinition; function\n * createDefinition(obj: Protobuf.Enum, name: string, options: Options):\n * EnumTypeDefinition;\n */\nfunction createDefinition(obj, name, options, fileDescriptors) {\n  if (obj instanceof Protobuf.Service) {\n    return createServiceDefinition(obj, name, options, fileDescriptors);\n  } else if (obj instanceof Protobuf.Type) {\n    return createMessageDefinition(obj, fileDescriptors);\n  } else if (obj instanceof Protobuf.Enum) {\n    return createEnumDefinition(obj, fileDescriptors);\n  } else {\n    throw new Error('Type mismatch in reflection object handling');\n  }\n}\nfunction createPackageDefinition(root, options) {\n  const def = {};\n  root.resolveAll();\n  const descriptorList = root.toDescriptor('proto3').file;\n  const bufferList = descriptorList.map(value => Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));\n  for (const [name, obj] of getAllHandledReflectionObjects(root, '')) {\n    def[name] = createDefinition(obj, name, options, bufferList);\n  }\n  return def;\n}\nfunction createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options) {\n  options = options || {};\n  const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);\n  root.resolveAll();\n  return createPackageDefinition(root, options);\n}\n/**\n * Load a .proto file with the specified options.\n * @param filename One or multiple file paths to load. Can be an absolute path\n *     or relative to an include path.\n * @param options.keepCase Preserve field names. The default is to change them\n *     to camel case.\n * @param options.longs The type that should be used to represent `long` values.\n *     Valid options are `Number` and `String`. Defaults to a `Long` object type\n *     from a library.\n * @param options.enums The type that should be used to represent `enum` values.\n *     The only valid option is `String`. Defaults to the numeric value.\n * @param options.bytes The type that should be used to represent `bytes`\n *     values. Valid options are `Array` and `String`. The default is to use\n *     `Buffer`.\n * @param options.defaults Set default values on output objects. Defaults to\n *     `false`.\n * @param options.arrays Set empty arrays for missing array values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.objects Set empty objects for missing object values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.oneofs Set virtual oneof properties to the present field's\n *     name\n * @param options.json Represent Infinity and NaN as strings in float fields,\n *     and automatically decode google.protobuf.Any values.\n * @param options.includeDirs Paths to search for imported `.proto` files.\n */\nfunction load(filename, options) {\n  return (0, util_1.loadProtosWithOptions)(filename, options).then(loadedRoot => {\n    return createPackageDefinition(loadedRoot, options);\n  });\n}\nexports.load = load;\nfunction loadSync(filename, options) {\n  const loadedRoot = (0, util_1.loadProtosWithOptionsSync)(filename, options);\n  return createPackageDefinition(loadedRoot, options);\n}\nexports.loadSync = loadSync;\nfunction fromJSON(json, options) {\n  options = options || {};\n  const loadedRoot = Protobuf.Root.fromJSON(json);\n  loadedRoot.resolveAll();\n  return createPackageDefinition(loadedRoot, options);\n}\nexports.fromJSON = fromJSON;\nfunction loadFileDescriptorSetFromBuffer(descriptorSet, options) {\n  const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);\n  return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;\nfunction loadFileDescriptorSetFromObject(descriptorSet, options) {\n  const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);\n  return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;\n(0, util_1.addCommonProtos)();","map":{"version":3,"names":["Object","defineProperty","exports","value","loadFileDescriptorSetFromObject","loadFileDescriptorSetFromBuffer","fromJSON","loadSync","load","isAnyExtension","Long","camelCase","require","Protobuf","descriptor","util_1","obj","descriptorOptions","longs","String","enums","bytes","defaults","oneofs","json","joinName","baseName","name","isHandledReflectionObject","Service","Type","Enum","isNamespaceBase","Namespace","Root","getAllHandledReflectionObjects","parentName","objName","nested","keys","map","reduce","accumulator","currentValue","concat","createDeserializer","cls","options","deserialize","argBuf","toObject","decode","createSerializer","serialize","arg","Array","isArray","Error","message","fromObject","encode","finish","createMethodDefinition","method","serviceName","fileDescriptors","requestType","resolvedRequestType","responseType","resolvedResponseType","path","requestStream","responseStream","requestSerialize","requestDeserialize","responseSerialize","responseDeserialize","originalName","createMessageDefinition","createServiceDefinition","service","def","methodsArray","messageDescriptor","toDescriptor","format","type","$type","fileDescriptorProtos","createEnumDefinition","enumType","enumDescriptor","createDefinition","createPackageDefinition","root","resolveAll","descriptorList","file","bufferList","Buffer","from","FileDescriptorProto","createPackageDefinitionFromDescriptorSet","decodedDescriptorSet","fromDescriptor","filename","loadProtosWithOptions","then","loadedRoot","loadProtosWithOptionsSync","descriptorSet","FileDescriptorSet","addCommonProtos"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@grpc/proto-loader/build/src/index.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadFileDescriptorSetFromObject = exports.loadFileDescriptorSetFromBuffer = exports.fromJSON = exports.loadSync = exports.load = exports.isAnyExtension = exports.Long = void 0;\nconst camelCase = require(\"lodash.camelcase\");\nconst Protobuf = require(\"protobufjs\");\nconst descriptor = require(\"protobufjs/ext/descriptor\");\nconst util_1 = require(\"./util\");\nconst Long = require(\"long\");\nexports.Long = Long;\nfunction isAnyExtension(obj) {\n    return ('@type' in obj) && (typeof obj['@type'] === 'string');\n}\nexports.isAnyExtension = isAnyExtension;\nconst descriptorOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    defaults: true,\n    oneofs: true,\n    json: true,\n};\nfunction joinName(baseName, name) {\n    if (baseName === '') {\n        return name;\n    }\n    else {\n        return baseName + '.' + name;\n    }\n}\nfunction isHandledReflectionObject(obj) {\n    return (obj instanceof Protobuf.Service ||\n        obj instanceof Protobuf.Type ||\n        obj instanceof Protobuf.Enum);\n}\nfunction isNamespaceBase(obj) {\n    return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;\n}\nfunction getAllHandledReflectionObjects(obj, parentName) {\n    const objName = joinName(parentName, obj.name);\n    if (isHandledReflectionObject(obj)) {\n        return [[objName, obj]];\n    }\n    else {\n        if (isNamespaceBase(obj) && typeof obj.nested !== 'undefined') {\n            return Object.keys(obj.nested)\n                .map(name => {\n                return getAllHandledReflectionObjects(obj.nested[name], objName);\n            })\n                .reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\n        }\n    }\n    return [];\n}\nfunction createDeserializer(cls, options) {\n    return function deserialize(argBuf) {\n        return cls.toObject(cls.decode(argBuf), options);\n    };\n}\nfunction createSerializer(cls) {\n    return function serialize(arg) {\n        if (Array.isArray(arg)) {\n            throw new Error(`Failed to serialize message: expected object with ${cls.name} structure, got array instead`);\n        }\n        const message = cls.fromObject(arg);\n        return cls.encode(message).finish();\n    };\n}\nfunction createMethodDefinition(method, serviceName, options, fileDescriptors) {\n    /* This is only ever called after the corresponding root.resolveAll(), so we\n     * can assume that the resolved request and response types are non-null */\n    const requestType = method.resolvedRequestType;\n    const responseType = method.resolvedResponseType;\n    return {\n        path: '/' + serviceName + '/' + method.name,\n        requestStream: !!method.requestStream,\n        responseStream: !!method.responseStream,\n        requestSerialize: createSerializer(requestType),\n        requestDeserialize: createDeserializer(requestType, options),\n        responseSerialize: createSerializer(responseType),\n        responseDeserialize: createDeserializer(responseType, options),\n        // TODO(murgatroid99): Find a better way to handle this\n        originalName: camelCase(method.name),\n        requestType: createMessageDefinition(requestType, fileDescriptors),\n        responseType: createMessageDefinition(responseType, fileDescriptors),\n    };\n}\nfunction createServiceDefinition(service, name, options, fileDescriptors) {\n    const def = {};\n    for (const method of service.methodsArray) {\n        def[method.name] = createMethodDefinition(method, name, options, fileDescriptors);\n    }\n    return def;\n}\nfunction createMessageDefinition(message, fileDescriptors) {\n    const messageDescriptor = message.toDescriptor('proto3');\n    return {\n        format: 'Protocol Buffer 3 DescriptorProto',\n        type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),\n        fileDescriptorProtos: fileDescriptors,\n    };\n}\nfunction createEnumDefinition(enumType, fileDescriptors) {\n    const enumDescriptor = enumType.toDescriptor('proto3');\n    return {\n        format: 'Protocol Buffer 3 EnumDescriptorProto',\n        type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),\n        fileDescriptorProtos: fileDescriptors,\n    };\n}\n/**\n * function createDefinition(obj: Protobuf.Service, name: string, options:\n * Options): ServiceDefinition; function createDefinition(obj: Protobuf.Type,\n * name: string, options: Options): MessageTypeDefinition; function\n * createDefinition(obj: Protobuf.Enum, name: string, options: Options):\n * EnumTypeDefinition;\n */\nfunction createDefinition(obj, name, options, fileDescriptors) {\n    if (obj instanceof Protobuf.Service) {\n        return createServiceDefinition(obj, name, options, fileDescriptors);\n    }\n    else if (obj instanceof Protobuf.Type) {\n        return createMessageDefinition(obj, fileDescriptors);\n    }\n    else if (obj instanceof Protobuf.Enum) {\n        return createEnumDefinition(obj, fileDescriptors);\n    }\n    else {\n        throw new Error('Type mismatch in reflection object handling');\n    }\n}\nfunction createPackageDefinition(root, options) {\n    const def = {};\n    root.resolveAll();\n    const descriptorList = root.toDescriptor('proto3').file;\n    const bufferList = descriptorList.map(value => Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));\n    for (const [name, obj] of getAllHandledReflectionObjects(root, '')) {\n        def[name] = createDefinition(obj, name, options, bufferList);\n    }\n    return def;\n}\nfunction createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options) {\n    options = options || {};\n    const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);\n    root.resolveAll();\n    return createPackageDefinition(root, options);\n}\n/**\n * Load a .proto file with the specified options.\n * @param filename One or multiple file paths to load. Can be an absolute path\n *     or relative to an include path.\n * @param options.keepCase Preserve field names. The default is to change them\n *     to camel case.\n * @param options.longs The type that should be used to represent `long` values.\n *     Valid options are `Number` and `String`. Defaults to a `Long` object type\n *     from a library.\n * @param options.enums The type that should be used to represent `enum` values.\n *     The only valid option is `String`. Defaults to the numeric value.\n * @param options.bytes The type that should be used to represent `bytes`\n *     values. Valid options are `Array` and `String`. The default is to use\n *     `Buffer`.\n * @param options.defaults Set default values on output objects. Defaults to\n *     `false`.\n * @param options.arrays Set empty arrays for missing array values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.objects Set empty objects for missing object values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.oneofs Set virtual oneof properties to the present field's\n *     name\n * @param options.json Represent Infinity and NaN as strings in float fields,\n *     and automatically decode google.protobuf.Any values.\n * @param options.includeDirs Paths to search for imported `.proto` files.\n */\nfunction load(filename, options) {\n    return (0, util_1.loadProtosWithOptions)(filename, options).then(loadedRoot => {\n        return createPackageDefinition(loadedRoot, options);\n    });\n}\nexports.load = load;\nfunction loadSync(filename, options) {\n    const loadedRoot = (0, util_1.loadProtosWithOptionsSync)(filename, options);\n    return createPackageDefinition(loadedRoot, options);\n}\nexports.loadSync = loadSync;\nfunction fromJSON(json, options) {\n    options = options || {};\n    const loadedRoot = Protobuf.Root.fromJSON(json);\n    loadedRoot.resolveAll();\n    return createPackageDefinition(loadedRoot, options);\n}\nexports.fromJSON = fromJSON;\nfunction loadFileDescriptorSetFromBuffer(descriptorSet, options) {\n    const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);\n    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;\nfunction loadFileDescriptorSetFromObject(descriptorSet, options) {\n    const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);\n    return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;\n(0, util_1.addCommonProtos)();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}