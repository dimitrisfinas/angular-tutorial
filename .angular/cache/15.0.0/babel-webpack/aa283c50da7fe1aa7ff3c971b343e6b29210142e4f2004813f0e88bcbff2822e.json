{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { isDescriptorCompatibleWith } from '../InstrumentDescriptor';\nimport * as api from '@opentelemetry/api';\nimport { getConflictResolutionRecipe, getIncompatibilityDetails } from '../view/RegistrationConflicts';\n/**\n * Internal class for storing {@link MetricStorage}\n */\nvar MetricStorageRegistry = /** @class */function () {\n  function MetricStorageRegistry() {\n    this._sharedRegistry = new Map();\n    this._perCollectorRegistry = new Map();\n  }\n  MetricStorageRegistry.create = function () {\n    return new MetricStorageRegistry();\n  };\n  MetricStorageRegistry.prototype.getStorages = function (collector) {\n    var e_1, _a, e_2, _b;\n    var storages = [];\n    try {\n      for (var _c = __values(this._sharedRegistry.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var metricStorages = _d.value;\n        storages = storages.concat(metricStorages);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    var perCollectorStorages = this._perCollectorRegistry.get(collector);\n    if (perCollectorStorages != null) {\n      try {\n        for (var _e = __values(perCollectorStorages.values()), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var metricStorages = _f.value;\n          storages = storages.concat(metricStorages);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n    return storages;\n  };\n  MetricStorageRegistry.prototype.register = function (storage) {\n    this._registerStorage(storage, this._sharedRegistry);\n  };\n  MetricStorageRegistry.prototype.registerForCollector = function (collector, storage) {\n    var storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap == null) {\n      storageMap = new Map();\n      this._perCollectorRegistry.set(collector, storageMap);\n    }\n    this._registerStorage(storage, storageMap);\n  };\n  MetricStorageRegistry.prototype.findOrUpdateCompatibleStorage = function (expectedDescriptor) {\n    var storages = this._sharedRegistry.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage(expectedDescriptor, storages);\n  };\n  MetricStorageRegistry.prototype.findOrUpdateCompatibleCollectorStorage = function (collector, expectedDescriptor) {\n    var storageMap = this._perCollectorRegistry.get(collector);\n    if (storageMap === undefined) {\n      return null;\n    }\n    var storages = this._sharedRegistry.get(expectedDescriptor.name);\n    if (storages === undefined) {\n      return null;\n    }\n    // If the descriptor is compatible, the type of their metric storage\n    // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n    return this._findOrUpdateCompatibleStorage(expectedDescriptor, storages);\n  };\n  MetricStorageRegistry.prototype._registerStorage = function (storage, storageMap) {\n    var descriptor = storage.getInstrumentDescriptor();\n    var storages = storageMap.get(descriptor.name);\n    if (storages === undefined) {\n      storageMap.set(descriptor.name, [storage]);\n      return;\n    }\n    storages.push(storage);\n  };\n  MetricStorageRegistry.prototype._findOrUpdateCompatibleStorage = function (expectedDescriptor, existingStorages) {\n    var e_3, _a;\n    var compatibleStorage = null;\n    try {\n      for (var existingStorages_1 = __values(existingStorages), existingStorages_1_1 = existingStorages_1.next(); !existingStorages_1_1.done; existingStorages_1_1 = existingStorages_1.next()) {\n        var existingStorage = existingStorages_1_1.value;\n        var existingDescriptor = existingStorage.getInstrumentDescriptor();\n        if (isDescriptorCompatibleWith(existingDescriptor, expectedDescriptor)) {\n          // Use the longer description if it does not match.\n          if (existingDescriptor.description !== expectedDescriptor.description) {\n            if (expectedDescriptor.description.length > existingDescriptor.description.length) {\n              existingStorage.updateDescription(expectedDescriptor.description);\n            }\n            api.diag.warn('A view or instrument with the name ', expectedDescriptor.name, ' has already been registered, but has a different description and is incompatible with another registered view.\\n', 'Details:\\n', getIncompatibilityDetails(existingDescriptor, expectedDescriptor), 'The longer description will be used.\\nTo resolve the conflict:', getConflictResolutionRecipe(existingDescriptor, expectedDescriptor));\n          }\n          // Storage is fully compatible. There will never be more than one pre-existing fully compatible storage.\n          compatibleStorage = existingStorage;\n        } else {\n          // The implementation SHOULD warn about duplicate instrument registration\n          // conflicts after applying View configuration.\n          api.diag.warn('A view or instrument with the name ', expectedDescriptor.name, ' has already been registered and is incompatible with another registered view.\\n', 'Details:\\n', getIncompatibilityDetails(existingDescriptor, expectedDescriptor), 'To resolve the conflict:\\n', getConflictResolutionRecipe(existingDescriptor, expectedDescriptor));\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (existingStorages_1_1 && !existingStorages_1_1.done && (_a = existingStorages_1.return)) _a.call(existingStorages_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    return compatibleStorage;\n  };\n  return MetricStorageRegistry;\n}();\nexport { MetricStorageRegistry };","map":{"version":3,"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","isDescriptorCompatibleWith","api","getConflictResolutionRecipe","getIncompatibilityDetails","MetricStorageRegistry","_sharedRegistry","Map","_perCollectorRegistry","create","prototype","getStorages","collector","e_1","_a","e_2","_b","storages","_c","values","_d","metricStorages","concat","e_1_1","error","return","perCollectorStorages","get","_e","_f","e_2_1","register","storage","_registerStorage","registerForCollector","storageMap","set","findOrUpdateCompatibleStorage","expectedDescriptor","name","undefined","_findOrUpdateCompatibleStorage","findOrUpdateCompatibleCollectorStorage","descriptor","getInstrumentDescriptor","push","existingStorages","e_3","compatibleStorage","existingStorages_1","existingStorages_1_1","existingStorage","existingDescriptor","description","updateDescription","diag","warn","e_3_1"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/sdk-metrics/build/esm/state/MetricStorageRegistry.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { isDescriptorCompatibleWith } from '../InstrumentDescriptor';\nimport * as api from '@opentelemetry/api';\nimport { getConflictResolutionRecipe, getIncompatibilityDetails } from '../view/RegistrationConflicts';\n/**\n * Internal class for storing {@link MetricStorage}\n */\nvar MetricStorageRegistry = /** @class */ (function () {\n    function MetricStorageRegistry() {\n        this._sharedRegistry = new Map();\n        this._perCollectorRegistry = new Map();\n    }\n    MetricStorageRegistry.create = function () {\n        return new MetricStorageRegistry();\n    };\n    MetricStorageRegistry.prototype.getStorages = function (collector) {\n        var e_1, _a, e_2, _b;\n        var storages = [];\n        try {\n            for (var _c = __values(this._sharedRegistry.values()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var metricStorages = _d.value;\n                storages = storages.concat(metricStorages);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var perCollectorStorages = this._perCollectorRegistry.get(collector);\n        if (perCollectorStorages != null) {\n            try {\n                for (var _e = __values(perCollectorStorages.values()), _f = _e.next(); !_f.done; _f = _e.next()) {\n                    var metricStorages = _f.value;\n                    storages = storages.concat(metricStorages);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n        return storages;\n    };\n    MetricStorageRegistry.prototype.register = function (storage) {\n        this._registerStorage(storage, this._sharedRegistry);\n    };\n    MetricStorageRegistry.prototype.registerForCollector = function (collector, storage) {\n        var storageMap = this._perCollectorRegistry.get(collector);\n        if (storageMap == null) {\n            storageMap = new Map();\n            this._perCollectorRegistry.set(collector, storageMap);\n        }\n        this._registerStorage(storage, storageMap);\n    };\n    MetricStorageRegistry.prototype.findOrUpdateCompatibleStorage = function (expectedDescriptor) {\n        var storages = this._sharedRegistry.get(expectedDescriptor.name);\n        if (storages === undefined) {\n            return null;\n        }\n        // If the descriptor is compatible, the type of their metric storage\n        // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n        return this._findOrUpdateCompatibleStorage(expectedDescriptor, storages);\n    };\n    MetricStorageRegistry.prototype.findOrUpdateCompatibleCollectorStorage = function (collector, expectedDescriptor) {\n        var storageMap = this._perCollectorRegistry.get(collector);\n        if (storageMap === undefined) {\n            return null;\n        }\n        var storages = this._sharedRegistry.get(expectedDescriptor.name);\n        if (storages === undefined) {\n            return null;\n        }\n        // If the descriptor is compatible, the type of their metric storage\n        // (either SyncMetricStorage or AsyncMetricStorage) must be compatible.\n        return this._findOrUpdateCompatibleStorage(expectedDescriptor, storages);\n    };\n    MetricStorageRegistry.prototype._registerStorage = function (storage, storageMap) {\n        var descriptor = storage.getInstrumentDescriptor();\n        var storages = storageMap.get(descriptor.name);\n        if (storages === undefined) {\n            storageMap.set(descriptor.name, [storage]);\n            return;\n        }\n        storages.push(storage);\n    };\n    MetricStorageRegistry.prototype._findOrUpdateCompatibleStorage = function (expectedDescriptor, existingStorages) {\n        var e_3, _a;\n        var compatibleStorage = null;\n        try {\n            for (var existingStorages_1 = __values(existingStorages), existingStorages_1_1 = existingStorages_1.next(); !existingStorages_1_1.done; existingStorages_1_1 = existingStorages_1.next()) {\n                var existingStorage = existingStorages_1_1.value;\n                var existingDescriptor = existingStorage.getInstrumentDescriptor();\n                if (isDescriptorCompatibleWith(existingDescriptor, expectedDescriptor)) {\n                    // Use the longer description if it does not match.\n                    if (existingDescriptor.description !== expectedDescriptor.description) {\n                        if (expectedDescriptor.description.length > existingDescriptor.description.length) {\n                            existingStorage.updateDescription(expectedDescriptor.description);\n                        }\n                        api.diag.warn('A view or instrument with the name ', expectedDescriptor.name, ' has already been registered, but has a different description and is incompatible with another registered view.\\n', 'Details:\\n', getIncompatibilityDetails(existingDescriptor, expectedDescriptor), 'The longer description will be used.\\nTo resolve the conflict:', getConflictResolutionRecipe(existingDescriptor, expectedDescriptor));\n                    }\n                    // Storage is fully compatible. There will never be more than one pre-existing fully compatible storage.\n                    compatibleStorage = existingStorage;\n                }\n                else {\n                    // The implementation SHOULD warn about duplicate instrument registration\n                    // conflicts after applying View configuration.\n                    api.diag.warn('A view or instrument with the name ', expectedDescriptor.name, ' has already been registered and is incompatible with another registered view.\\n', 'Details:\\n', getIncompatibilityDetails(existingDescriptor, expectedDescriptor), 'To resolve the conflict:\\n', getConflictResolutionRecipe(existingDescriptor, expectedDescriptor));\n                }\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (existingStorages_1_1 && !existingStorages_1_1.done && (_a = existingStorages_1.return)) _a.call(existingStorages_1);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return compatibleStorage;\n    };\n    return MetricStorageRegistry;\n}());\nexport { MetricStorageRegistry };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}