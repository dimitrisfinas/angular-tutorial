{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Parses the options and returns instrumentations, node plugins and\n *   web plugins\n * @param options\n */\nexport function parseInstrumentationOptions(options) {\n  if (options === void 0) {\n    options = [];\n  }\n  var instrumentations = [];\n  for (var i = 0, j = options.length; i < j; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var option = options[i];\n    if (Array.isArray(option)) {\n      var results = parseInstrumentationOptions(option);\n      instrumentations = instrumentations.concat(results.instrumentations);\n    } else if (typeof option === 'function') {\n      instrumentations.push(new option());\n    } else if (option.instrumentationName) {\n      instrumentations.push(option);\n    }\n  }\n  return {\n    instrumentations: instrumentations\n  };\n}\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nexport function enableInstrumentations(instrumentations, tracerProvider, meterProvider) {\n  for (var i = 0, j = instrumentations.length; i < j; i++) {\n    var instrumentation = instrumentations[i];\n    if (tracerProvider) {\n      instrumentation.setTracerProvider(tracerProvider);\n    }\n    if (meterProvider) {\n      instrumentation.setMeterProvider(meterProvider);\n    }\n    // instrumentations have been already enabled during creation\n    // so enable only if user prevented that by setting enabled to false\n    // this is to prevent double enabling but when calling register all\n    // instrumentations should be now enabled\n    if (!instrumentation.getConfig().enabled) {\n      instrumentation.enable();\n    }\n  }\n}\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nexport function disableInstrumentations(instrumentations) {\n  instrumentations.forEach(function (instrumentation) {\n    return instrumentation.disable();\n  });\n}","map":{"version":3,"names":["parseInstrumentationOptions","options","instrumentations","i","j","length","option","Array","isArray","results","concat","push","instrumentationName","enableInstrumentations","tracerProvider","meterProvider","instrumentation","setTracerProvider","setMeterProvider","getConfig","enabled","enable","disableInstrumentations","forEach","disable"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/instrumentation/build/esm/autoLoaderUtils.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Parses the options and returns instrumentations, node plugins and\n *   web plugins\n * @param options\n */\nexport function parseInstrumentationOptions(options) {\n    if (options === void 0) { options = []; }\n    var instrumentations = [];\n    for (var i = 0, j = options.length; i < j; i++) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var option = options[i];\n        if (Array.isArray(option)) {\n            var results = parseInstrumentationOptions(option);\n            instrumentations = instrumentations.concat(results.instrumentations);\n        }\n        else if (typeof option === 'function') {\n            instrumentations.push(new option());\n        }\n        else if (option.instrumentationName) {\n            instrumentations.push(option);\n        }\n    }\n    return { instrumentations: instrumentations };\n}\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nexport function enableInstrumentations(instrumentations, tracerProvider, meterProvider) {\n    for (var i = 0, j = instrumentations.length; i < j; i++) {\n        var instrumentation = instrumentations[i];\n        if (tracerProvider) {\n            instrumentation.setTracerProvider(tracerProvider);\n        }\n        if (meterProvider) {\n            instrumentation.setMeterProvider(meterProvider);\n        }\n        // instrumentations have been already enabled during creation\n        // so enable only if user prevented that by setting enabled to false\n        // this is to prevent double enabling but when calling register all\n        // instrumentations should be now enabled\n        if (!instrumentation.getConfig().enabled) {\n            instrumentation.enable();\n        }\n    }\n}\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nexport function disableInstrumentations(instrumentations) {\n    instrumentations.forEach(function (instrumentation) { return instrumentation.disable(); });\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,2BAA2B,CAACC,OAAO,EAAE;EACjD,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;IAAEA,OAAO,GAAG,EAAE;EAAE;EACxC,IAAIC,gBAAgB,GAAG,EAAE;EACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC5C;IACA,IAAIG,MAAM,GAAGL,OAAO,CAACE,CAAC,CAAC;IACvB,IAAII,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;MACvB,IAAIG,OAAO,GAAGT,2BAA2B,CAACM,MAAM,CAAC;MACjDJ,gBAAgB,GAAGA,gBAAgB,CAACQ,MAAM,CAACD,OAAO,CAACP,gBAAgB,CAAC;IACxE,CAAC,MACI,IAAI,OAAOI,MAAM,KAAK,UAAU,EAAE;MACnCJ,gBAAgB,CAACS,IAAI,CAAC,IAAIL,MAAM,EAAE,CAAC;IACvC,CAAC,MACI,IAAIA,MAAM,CAACM,mBAAmB,EAAE;MACjCV,gBAAgB,CAACS,IAAI,CAACL,MAAM,CAAC;IACjC;EACJ;EACA,OAAO;IAAEJ,gBAAgB,EAAEA;EAAiB,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,sBAAsB,CAACX,gBAAgB,EAAEY,cAAc,EAAEC,aAAa,EAAE;EACpF,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGF,gBAAgB,CAACG,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IACrD,IAAIa,eAAe,GAAGd,gBAAgB,CAACC,CAAC,CAAC;IACzC,IAAIW,cAAc,EAAE;MAChBE,eAAe,CAACC,iBAAiB,CAACH,cAAc,CAAC;IACrD;IACA,IAAIC,aAAa,EAAE;MACfC,eAAe,CAACE,gBAAgB,CAACH,aAAa,CAAC;IACnD;IACA;IACA;IACA;IACA;IACA,IAAI,CAACC,eAAe,CAACG,SAAS,EAAE,CAACC,OAAO,EAAE;MACtCJ,eAAe,CAACK,MAAM,EAAE;IAC5B;EACJ;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuB,CAACpB,gBAAgB,EAAE;EACtDA,gBAAgB,CAACqB,OAAO,CAAC,UAAUP,eAAe,EAAE;IAAE,OAAOA,eAAe,CAACQ,OAAO,EAAE;EAAE,CAAC,CAAC;AAC9F"},"metadata":{},"sourceType":"module","externalDependencies":[]}