{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, diag, propagation, trace } from '@opentelemetry/api';\nimport { CompositePropagator, W3CBaggagePropagator, W3CTraceContextPropagator, getEnv, merge } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { Tracer } from '.';\nimport { loadDefaultConfig } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { NoopSpanProcessor } from './export/NoopSpanProcessor';\nimport { BatchSpanProcessor } from './platform';\nimport { reconfigureLimits } from './utility';\nexport var ForceFlushState;\n(function (ForceFlushState) {\n  ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n  ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n  ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n  ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nvar BasicTracerProvider = /** @class */function () {\n  function BasicTracerProvider(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _a;\n    this._registeredSpanProcessors = [];\n    this._tracers = new Map();\n    var mergedConfig = merge({}, loadDefaultConfig(), reconfigureLimits(config));\n    this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : Resource.empty();\n    this.resource = Resource.default().merge(this.resource);\n    this._config = Object.assign({}, mergedConfig, {\n      resource: this.resource\n    });\n    var defaultExporter = this._buildExporterFromEnv();\n    if (defaultExporter !== undefined) {\n      var batchProcessor = new BatchSpanProcessor(defaultExporter);\n      this.activeSpanProcessor = batchProcessor;\n    } else {\n      this.activeSpanProcessor = new NoopSpanProcessor();\n    }\n  }\n  BasicTracerProvider.prototype.getTracer = function (name, version, options) {\n    var key = name + \"@\" + (version || '') + \":\" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || '');\n    if (!this._tracers.has(key)) {\n      this._tracers.set(key, new Tracer({\n        name: name,\n        version: version,\n        schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl\n      }, this._config, this));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this._tracers.get(key);\n  };\n  /**\n   * Adds a new {@link SpanProcessor} to this tracer.\n   * @param spanProcessor the new SpanProcessor to be added.\n   */\n  BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {\n    if (this._registeredSpanProcessors.length === 0) {\n      // since we might have enabled by default a batchProcessor, we disable it\n      // before adding the new one\n      this.activeSpanProcessor.shutdown().catch(function (err) {\n        return diag.error('Error while trying to shutdown current span processor', err);\n      });\n    }\n    this._registeredSpanProcessors.push(spanProcessor);\n    this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n  };\n  BasicTracerProvider.prototype.getActiveSpanProcessor = function () {\n    return this.activeSpanProcessor;\n  };\n  /**\n   * Register this TracerProvider for use with the OpenTelemetry API.\n   * Undefined values may be replaced with defaults, and\n   * null values will be skipped.\n   *\n   * @param config Configuration object for SDK registration\n   */\n  BasicTracerProvider.prototype.register = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    trace.setGlobalTracerProvider(this);\n    if (config.propagator === undefined) {\n      config.propagator = this._buildPropagatorFromEnv();\n    }\n    if (config.contextManager) {\n      context.setGlobalContextManager(config.contextManager);\n    }\n    if (config.propagator) {\n      propagation.setGlobalPropagator(config.propagator);\n    }\n  };\n  BasicTracerProvider.prototype.forceFlush = function () {\n    var timeout = this._config.forceFlushTimeoutMillis;\n    var promises = this._registeredSpanProcessors.map(function (spanProcessor) {\n      return new Promise(function (resolve) {\n        var state;\n        var timeoutInterval = setTimeout(function () {\n          resolve(new Error(\"Span processor did not completed within timeout period of \" + timeout + \" ms\"));\n          state = ForceFlushState.timeout;\n        }, timeout);\n        spanProcessor.forceFlush().then(function () {\n          clearTimeout(timeoutInterval);\n          if (state !== ForceFlushState.timeout) {\n            state = ForceFlushState.resolved;\n            resolve(state);\n          }\n        }).catch(function (error) {\n          clearTimeout(timeoutInterval);\n          state = ForceFlushState.error;\n          resolve(error);\n        });\n      });\n    });\n    return new Promise(function (resolve, reject) {\n      Promise.all(promises).then(function (results) {\n        var errors = results.filter(function (result) {\n          return result !== ForceFlushState.resolved;\n        });\n        if (errors.length > 0) {\n          reject(errors);\n        } else {\n          resolve();\n        }\n      }).catch(function (error) {\n        return reject([error]);\n      });\n    });\n  };\n  BasicTracerProvider.prototype.shutdown = function () {\n    return this.activeSpanProcessor.shutdown();\n  };\n  /**\n   * TS cannot yet infer the type of this.constructor:\n   * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n   * There is no need to override either of the getters in your child class.\n   * The type of the registered component maps should be the same across all\n   * classes in the inheritance tree.\n   */\n  BasicTracerProvider.prototype._getPropagator = function (name) {\n    var _a;\n    return (_a = this.constructor._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();\n  };\n  BasicTracerProvider.prototype._getSpanExporter = function (name) {\n    var _a;\n    return (_a = this.constructor._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();\n  };\n  BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {\n    var _this = this;\n    // per spec, propagators from env must be deduplicated\n    var uniquePropagatorNames = Array.from(new Set(getEnv().OTEL_PROPAGATORS));\n    var propagators = uniquePropagatorNames.map(function (name) {\n      var propagator = _this._getPropagator(name);\n      if (!propagator) {\n        diag.warn(\"Propagator \\\"\" + name + \"\\\" requested through environment variable is unavailable.\");\n      }\n      return propagator;\n    });\n    var validPropagators = propagators.reduce(function (list, item) {\n      if (item) {\n        list.push(item);\n      }\n      return list;\n    }, []);\n    if (validPropagators.length === 0) {\n      return;\n    } else if (uniquePropagatorNames.length === 1) {\n      return validPropagators[0];\n    } else {\n      return new CompositePropagator({\n        propagators: validPropagators\n      });\n    }\n  };\n  BasicTracerProvider.prototype._buildExporterFromEnv = function () {\n    var exporterName = getEnv().OTEL_TRACES_EXPORTER;\n    if (exporterName === 'none') return;\n    var exporter = this._getSpanExporter(exporterName);\n    if (!exporter) {\n      diag.error(\"Exporter \\\"\" + exporterName + \"\\\" requested through environment variable is unavailable.\");\n    }\n    return exporter;\n  };\n  BasicTracerProvider._registeredPropagators = new Map([['tracecontext', function () {\n    return new W3CTraceContextPropagator();\n  }], ['baggage', function () {\n    return new W3CBaggagePropagator();\n  }]]);\n  BasicTracerProvider._registeredExporters = new Map();\n  return BasicTracerProvider;\n}();\nexport { BasicTracerProvider };","map":{"version":3,"names":["context","diag","propagation","trace","CompositePropagator","W3CBaggagePropagator","W3CTraceContextPropagator","getEnv","merge","Resource","Tracer","loadDefaultConfig","MultiSpanProcessor","NoopSpanProcessor","BatchSpanProcessor","reconfigureLimits","ForceFlushState","BasicTracerProvider","config","_a","_registeredSpanProcessors","_tracers","Map","mergedConfig","resource","empty","default","_config","Object","assign","defaultExporter","_buildExporterFromEnv","undefined","batchProcessor","activeSpanProcessor","prototype","getTracer","name","version","options","key","schemaUrl","has","set","get","addSpanProcessor","spanProcessor","length","shutdown","catch","err","error","push","getActiveSpanProcessor","register","setGlobalTracerProvider","propagator","_buildPropagatorFromEnv","contextManager","setGlobalContextManager","setGlobalPropagator","forceFlush","timeout","forceFlushTimeoutMillis","promises","map","Promise","resolve","state","timeoutInterval","setTimeout","Error","then","clearTimeout","resolved","reject","all","results","errors","filter","result","_getPropagator","constructor","_registeredPropagators","_getSpanExporter","_registeredExporters","_this","uniquePropagatorNames","Array","from","Set","OTEL_PROPAGATORS","propagators","warn","validPropagators","reduce","list","item","exporterName","OTEL_TRACES_EXPORTER","exporter"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, diag, propagation, trace, } from '@opentelemetry/api';\nimport { CompositePropagator, W3CBaggagePropagator, W3CTraceContextPropagator, getEnv, merge, } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { Tracer } from '.';\nimport { loadDefaultConfig } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { NoopSpanProcessor } from './export/NoopSpanProcessor';\nimport { BatchSpanProcessor } from './platform';\nimport { reconfigureLimits } from './utility';\nexport var ForceFlushState;\n(function (ForceFlushState) {\n    ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n    ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n    ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n    ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nvar BasicTracerProvider = /** @class */ (function () {\n    function BasicTracerProvider(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._registeredSpanProcessors = [];\n        this._tracers = new Map();\n        var mergedConfig = merge({}, loadDefaultConfig(), reconfigureLimits(config));\n        this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : Resource.empty();\n        this.resource = Resource.default().merge(this.resource);\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this.resource,\n        });\n        var defaultExporter = this._buildExporterFromEnv();\n        if (defaultExporter !== undefined) {\n            var batchProcessor = new BatchSpanProcessor(defaultExporter);\n            this.activeSpanProcessor = batchProcessor;\n        }\n        else {\n            this.activeSpanProcessor = new NoopSpanProcessor();\n        }\n    }\n    BasicTracerProvider.prototype.getTracer = function (name, version, options) {\n        var key = name + \"@\" + (version || '') + \":\" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || '');\n        if (!this._tracers.has(key)) {\n            this._tracers.set(key, new Tracer({ name: name, version: version, schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl }, this._config, this));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._tracers.get(key);\n    };\n    /**\n     * Adds a new {@link SpanProcessor} to this tracer.\n     * @param spanProcessor the new SpanProcessor to be added.\n     */\n    BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {\n        if (this._registeredSpanProcessors.length === 0) {\n            // since we might have enabled by default a batchProcessor, we disable it\n            // before adding the new one\n            this.activeSpanProcessor\n                .shutdown()\n                .catch(function (err) {\n                return diag.error('Error while trying to shutdown current span processor', err);\n            });\n        }\n        this._registeredSpanProcessors.push(spanProcessor);\n        this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n    };\n    BasicTracerProvider.prototype.getActiveSpanProcessor = function () {\n        return this.activeSpanProcessor;\n    };\n    /**\n     * Register this TracerProvider for use with the OpenTelemetry API.\n     * Undefined values may be replaced with defaults, and\n     * null values will be skipped.\n     *\n     * @param config Configuration object for SDK registration\n     */\n    BasicTracerProvider.prototype.register = function (config) {\n        if (config === void 0) { config = {}; }\n        trace.setGlobalTracerProvider(this);\n        if (config.propagator === undefined) {\n            config.propagator = this._buildPropagatorFromEnv();\n        }\n        if (config.contextManager) {\n            context.setGlobalContextManager(config.contextManager);\n        }\n        if (config.propagator) {\n            propagation.setGlobalPropagator(config.propagator);\n        }\n    };\n    BasicTracerProvider.prototype.forceFlush = function () {\n        var timeout = this._config.forceFlushTimeoutMillis;\n        var promises = this._registeredSpanProcessors.map(function (spanProcessor) {\n            return new Promise(function (resolve) {\n                var state;\n                var timeoutInterval = setTimeout(function () {\n                    resolve(new Error(\"Span processor did not completed within timeout period of \" + timeout + \" ms\"));\n                    state = ForceFlushState.timeout;\n                }, timeout);\n                spanProcessor\n                    .forceFlush()\n                    .then(function () {\n                    clearTimeout(timeoutInterval);\n                    if (state !== ForceFlushState.timeout) {\n                        state = ForceFlushState.resolved;\n                        resolve(state);\n                    }\n                })\n                    .catch(function (error) {\n                    clearTimeout(timeoutInterval);\n                    state = ForceFlushState.error;\n                    resolve(error);\n                });\n            });\n        });\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises)\n                .then(function (results) {\n                var errors = results.filter(function (result) { return result !== ForceFlushState.resolved; });\n                if (errors.length > 0) {\n                    reject(errors);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(function (error) { return reject([error]); });\n        });\n    };\n    BasicTracerProvider.prototype.shutdown = function () {\n        return this.activeSpanProcessor.shutdown();\n    };\n    /**\n     * TS cannot yet infer the type of this.constructor:\n     * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n     * There is no need to override either of the getters in your child class.\n     * The type of the registered component maps should be the same across all\n     * classes in the inheritance tree.\n     */\n    BasicTracerProvider.prototype._getPropagator = function (name) {\n        var _a;\n        return (_a = (this.constructor._registeredPropagators).get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._getSpanExporter = function (name) {\n        var _a;\n        return (_a = (this.constructor._registeredExporters).get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {\n        var _this = this;\n        // per spec, propagators from env must be deduplicated\n        var uniquePropagatorNames = Array.from(new Set(getEnv().OTEL_PROPAGATORS));\n        var propagators = uniquePropagatorNames.map(function (name) {\n            var propagator = _this._getPropagator(name);\n            if (!propagator) {\n                diag.warn(\"Propagator \\\"\" + name + \"\\\" requested through environment variable is unavailable.\");\n            }\n            return propagator;\n        });\n        var validPropagators = propagators.reduce(function (list, item) {\n            if (item) {\n                list.push(item);\n            }\n            return list;\n        }, []);\n        if (validPropagators.length === 0) {\n            return;\n        }\n        else if (uniquePropagatorNames.length === 1) {\n            return validPropagators[0];\n        }\n        else {\n            return new CompositePropagator({\n                propagators: validPropagators,\n            });\n        }\n    };\n    BasicTracerProvider.prototype._buildExporterFromEnv = function () {\n        var exporterName = getEnv().OTEL_TRACES_EXPORTER;\n        if (exporterName === 'none')\n            return;\n        var exporter = this._getSpanExporter(exporterName);\n        if (!exporter) {\n            diag.error(\"Exporter \\\"\" + exporterName + \"\\\" requested through environment variable is unavailable.\");\n        }\n        return exporter;\n    };\n    BasicTracerProvider._registeredPropagators = new Map([\n        ['tracecontext', function () { return new W3CTraceContextPropagator(); }],\n        ['baggage', function () { return new W3CBaggagePropagator(); }],\n    ]);\n    BasicTracerProvider._registeredExporters = new Map();\n    return BasicTracerProvider;\n}());\nexport { BasicTracerProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}