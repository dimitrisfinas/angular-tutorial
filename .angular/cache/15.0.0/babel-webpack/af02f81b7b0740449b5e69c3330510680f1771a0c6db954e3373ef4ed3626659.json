{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, diag, TraceFlags } from '@opentelemetry/api';\nimport { BindOnceFuture, ExportResultCode, getEnv, globalErrorHandler, suppressTracing, unrefTimer } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */function () {\n  function BatchSpanProcessorBase(_exporter, config) {\n    this._exporter = _exporter;\n    this._finishedSpans = [];\n    var env = getEnv();\n    this._maxExportBatchSize = typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number' ? config.maxExportBatchSize : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n    this._maxQueueSize = typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number' ? config.maxQueueSize : env.OTEL_BSP_MAX_QUEUE_SIZE;\n    this._scheduledDelayMillis = typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number' ? config.scheduledDelayMillis : env.OTEL_BSP_SCHEDULE_DELAY;\n    this._exportTimeoutMillis = typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number' ? config.exportTimeoutMillis : env.OTEL_BSP_EXPORT_TIMEOUT;\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    if (this._maxExportBatchSize > this._maxQueueSize) {\n      diag.warn('BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize');\n      this._maxExportBatchSize = this._maxQueueSize;\n    }\n  }\n  BatchSpanProcessorBase.prototype.forceFlush = function () {\n    if (this._shutdownOnce.isCalled) {\n      return this._shutdownOnce.promise;\n    }\n    return this._flushAll();\n  };\n  // does nothing.\n  BatchSpanProcessorBase.prototype.onStart = function (_span, _parentContext) {};\n  BatchSpanProcessorBase.prototype.onEnd = function (span) {\n    if (this._shutdownOnce.isCalled) {\n      return;\n    }\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n    this._addToBuffer(span);\n  };\n  BatchSpanProcessorBase.prototype.shutdown = function () {\n    return this._shutdownOnce.call();\n  };\n  BatchSpanProcessorBase.prototype._shutdown = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.onShutdown();\n    }).then(function () {\n      return _this._flushAll();\n    }).then(function () {\n      return _this._exporter.shutdown();\n    });\n  };\n  /** Add a span in the buffer. */\n  BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n    if (this._finishedSpans.length >= this._maxQueueSize) {\n      // limit reached, drop span\n      return;\n    }\n    this._finishedSpans.push(span);\n    this._maybeStartTimer();\n  };\n  /**\n   * Send all spans to the exporter respecting the batch size limit\n   * This function is used only on forceFlush or shutdown,\n   * for all other cases _flush should be used\n   * */\n  BatchSpanProcessorBase.prototype._flushAll = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var promises = [];\n      // calculate number of batches\n      var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n      for (var i = 0, j = count; i < j; i++) {\n        promises.push(_this._flushOneBatch());\n      }\n      Promise.all(promises).then(function () {\n        resolve();\n      }).catch(reject);\n    });\n  };\n  BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n    var _this = this;\n    this._clearTimer();\n    if (this._finishedSpans.length === 0) {\n      return Promise.resolve();\n    }\n    return new Promise(function (resolve, reject) {\n      var timer = setTimeout(function () {\n        // don't wait anymore for export, this way the next batch can start\n        reject(new Error('Timeout'));\n      }, _this._exportTimeoutMillis);\n      // prevent downstream exporter calls from generating spans\n      context.with(suppressTracing(context.active()), function () {\n        // Reset the finished spans buffer here because the next invocations of the _flush method\n        // could pass the same finished spans to the exporter if the buffer is cleared\n        // outside of the execution of this callback.\n        _this._exporter.export(_this._finishedSpans.splice(0, _this._maxExportBatchSize), function (result) {\n          var _a;\n          clearTimeout(timer);\n          if (result.code === ExportResultCode.SUCCESS) {\n            resolve();\n          } else {\n            reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));\n          }\n        });\n      });\n    });\n  };\n  BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n    var _this = this;\n    if (this._timer !== undefined) return;\n    this._timer = setTimeout(function () {\n      _this._flushOneBatch().then(function () {\n        if (_this._finishedSpans.length > 0) {\n          _this._clearTimer();\n          _this._maybeStartTimer();\n        }\n      }).catch(function (e) {\n        globalErrorHandler(e);\n      });\n    }, this._scheduledDelayMillis);\n    unrefTimer(this._timer);\n  };\n  BatchSpanProcessorBase.prototype._clearTimer = function () {\n    if (this._timer !== undefined) {\n      clearTimeout(this._timer);\n      this._timer = undefined;\n    }\n  };\n  return BatchSpanProcessorBase;\n}();\nexport { BatchSpanProcessorBase };","map":{"version":3,"names":["context","diag","TraceFlags","BindOnceFuture","ExportResultCode","getEnv","globalErrorHandler","suppressTracing","unrefTimer","BatchSpanProcessorBase","_exporter","config","_finishedSpans","env","_maxExportBatchSize","maxExportBatchSize","OTEL_BSP_MAX_EXPORT_BATCH_SIZE","_maxQueueSize","maxQueueSize","OTEL_BSP_MAX_QUEUE_SIZE","_scheduledDelayMillis","scheduledDelayMillis","OTEL_BSP_SCHEDULE_DELAY","_exportTimeoutMillis","exportTimeoutMillis","OTEL_BSP_EXPORT_TIMEOUT","_shutdownOnce","_shutdown","warn","prototype","forceFlush","isCalled","promise","_flushAll","onStart","_span","_parentContext","onEnd","span","spanContext","traceFlags","SAMPLED","_addToBuffer","shutdown","call","_this","Promise","resolve","then","onShutdown","length","push","_maybeStartTimer","reject","promises","count","Math","ceil","i","j","_flushOneBatch","all","catch","_clearTimer","timer","setTimeout","Error","with","active","export","splice","result","_a","clearTimeout","code","SUCCESS","error","_timer","undefined","e"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, diag, TraceFlags } from '@opentelemetry/api';\nimport { BindOnceFuture, ExportResultCode, getEnv, globalErrorHandler, suppressTracing, unrefTimer } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */ (function () {\n    function BatchSpanProcessorBase(_exporter, config) {\n        this._exporter = _exporter;\n        this._finishedSpans = [];\n        var env = getEnv();\n        this._maxExportBatchSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number'\n                ? config.maxExportBatchSize\n                : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n        this._maxQueueSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number'\n                ? config.maxQueueSize\n                : env.OTEL_BSP_MAX_QUEUE_SIZE;\n        this._scheduledDelayMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number'\n                ? config.scheduledDelayMillis\n                : env.OTEL_BSP_SCHEDULE_DELAY;\n        this._exportTimeoutMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number'\n                ? config.exportTimeoutMillis\n                : env.OTEL_BSP_EXPORT_TIMEOUT;\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n        if (this._maxExportBatchSize > this._maxQueueSize) {\n            diag.warn('BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize');\n            this._maxExportBatchSize = this._maxQueueSize;\n        }\n    }\n    BatchSpanProcessorBase.prototype.forceFlush = function () {\n        if (this._shutdownOnce.isCalled) {\n            return this._shutdownOnce.promise;\n        }\n        return this._flushAll();\n    };\n    // does nothing.\n    BatchSpanProcessorBase.prototype.onStart = function (_span, _parentContext) { };\n    BatchSpanProcessorBase.prototype.onEnd = function (span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        this._addToBuffer(span);\n    };\n    BatchSpanProcessorBase.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    BatchSpanProcessorBase.prototype._shutdown = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.onShutdown();\n        })\n            .then(function () {\n            return _this._flushAll();\n        })\n            .then(function () {\n            return _this._exporter.shutdown();\n        });\n    };\n    /** Add a span in the buffer. */\n    BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n            // limit reached, drop span\n            return;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n    };\n    /**\n     * Send all spans to the exporter respecting the batch size limit\n     * This function is used only on forceFlush or shutdown,\n     * for all other cases _flush should be used\n     * */\n    BatchSpanProcessorBase.prototype._flushAll = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var promises = [];\n            // calculate number of batches\n            var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n            for (var i = 0, j = count; i < j; i++) {\n                promises.push(_this._flushOneBatch());\n            }\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(reject);\n        });\n    };\n    BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n        var _this = this;\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n            return Promise.resolve();\n        }\n        return new Promise(function (resolve, reject) {\n            var timer = setTimeout(function () {\n                // don't wait anymore for export, this way the next batch can start\n                reject(new Error('Timeout'));\n            }, _this._exportTimeoutMillis);\n            // prevent downstream exporter calls from generating spans\n            context.with(suppressTracing(context.active()), function () {\n                // Reset the finished spans buffer here because the next invocations of the _flush method\n                // could pass the same finished spans to the exporter if the buffer is cleared\n                // outside of the execution of this callback.\n                _this._exporter.export(_this._finishedSpans.splice(0, _this._maxExportBatchSize), function (result) {\n                    var _a;\n                    clearTimeout(timer);\n                    if (result.code === ExportResultCode.SUCCESS) {\n                        resolve();\n                    }\n                    else {\n                        reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));\n                    }\n                });\n            });\n        });\n    };\n    BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n        var _this = this;\n        if (this._timer !== undefined)\n            return;\n        this._timer = setTimeout(function () {\n            _this._flushOneBatch()\n                .then(function () {\n                if (_this._finishedSpans.length > 0) {\n                    _this._clearTimer();\n                    _this._maybeStartTimer();\n                }\n            })\n                .catch(function (e) {\n                globalErrorHandler(e);\n            });\n        }, this._scheduledDelayMillis);\n        unrefTimer(this._timer);\n    };\n    BatchSpanProcessorBase.prototype._clearTimer = function () {\n        if (this._timer !== undefined) {\n            clearTimeout(this._timer);\n            this._timer = undefined;\n        }\n    };\n    return BatchSpanProcessorBase;\n}());\nexport { BatchSpanProcessorBase };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}