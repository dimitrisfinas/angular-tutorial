{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OTLPGRPCExporterNodeBase = void 0;\nconst api_1 = require(\"@opentelemetry/api\");\nconst grpc_js_1 = require(\"@grpc/grpc-js\");\nconst core_1 = require(\"@opentelemetry/core\");\nconst util_1 = require(\"./util\");\nconst otlp_exporter_base_1 = require(\"@opentelemetry/otlp-exporter-base\");\n/**\n * OTLP Exporter abstract base class\n */\nclass OTLPGRPCExporterNodeBase extends otlp_exporter_base_1.OTLPExporterBase {\n  constructor(config = {}) {\n    super(config);\n    this.grpcQueue = [];\n    this.serviceClient = undefined;\n    if (config.headers) {\n      api_1.diag.warn('Headers cannot be set when using grpc');\n    }\n    const headers = core_1.baggageUtils.parseKeyPairsIntoRecord((0, core_1.getEnv)().OTEL_EXPORTER_OTLP_HEADERS);\n    this.metadata = config.metadata || new grpc_js_1.Metadata();\n    for (const [k, v] of Object.entries(headers)) {\n      this.metadata.set(k, v);\n    }\n    this.compression = (0, util_1.configureCompression)(config.compression);\n  }\n  _sendPromise(objects, onSuccess, onError) {\n    const promise = new Promise((resolve, reject) => {\n      this._send(this, objects, resolve, reject);\n    }).then(onSuccess, onError);\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n  onInit(config) {\n    // defer to next tick and lazy load to avoid loading grpc too early\n    // and making this impossible to be instrumented\n    setImmediate(() => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const {\n        onInit\n      } = require('./util');\n      onInit(this, config);\n    });\n  }\n  send(objects, onSuccess, onError) {\n    if (this._shutdownOnce.isCalled) {\n      api_1.diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    if (!this._send) {\n      // defer to next tick and lazy load to avoid loading grpc too early\n      // and making this impossible to be instrumented\n      setImmediate(() => {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const {\n          send\n        } = require('./util');\n        this._send = send;\n        this._sendPromise(objects, onSuccess, onError);\n      });\n    } else {\n      this._sendPromise(objects, onSuccess, onError);\n    }\n  }\n  onShutdown() {\n    if (this.serviceClient) {\n      this.serviceClient.close();\n    }\n  }\n}\nexports.OTLPGRPCExporterNodeBase = OTLPGRPCExporterNodeBase;\n//# sourceMappingURL=OTLPGRPCExporterNodeBase.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}