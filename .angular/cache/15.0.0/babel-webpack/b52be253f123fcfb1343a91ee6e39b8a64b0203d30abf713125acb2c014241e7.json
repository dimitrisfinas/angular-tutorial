{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function urlMatches(url, urlToMatch) {\n  if (typeof urlToMatch === 'string') {\n    return url === urlToMatch;\n  } else {\n    return !!url.match(urlToMatch);\n  }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nexport function isUrlIgnored(url, ignoredUrls) {\n  if (!ignoredUrls) {\n    return false;\n  }\n  for (var _i = 0, ignoredUrls_1 = ignoredUrls; _i < ignoredUrls_1.length; _i++) {\n    var ignoreUrl = ignoredUrls_1[_i];\n    if (urlMatches(url, ignoreUrl)) {\n      return true;\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["urlMatches","url","urlToMatch","match","isUrlIgnored","ignoredUrls","_i","ignoredUrls_1","length","ignoreUrl"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/utils/url.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function urlMatches(url, urlToMatch) {\n    if (typeof urlToMatch === 'string') {\n        return url === urlToMatch;\n    }\n    else {\n        return !!url.match(urlToMatch);\n    }\n}\n/**\n * Check if {@param url} should be ignored when comparing against {@param ignoredUrls}\n * @param url\n * @param ignoredUrls\n */\nexport function isUrlIgnored(url, ignoredUrls) {\n    if (!ignoredUrls) {\n        return false;\n    }\n    for (var _i = 0, ignoredUrls_1 = ignoredUrls; _i < ignoredUrls_1.length; _i++) {\n        var ignoreUrl = ignoredUrls_1[_i];\n        if (urlMatches(url, ignoreUrl)) {\n            return true;\n        }\n    }\n    return false;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAU,CAACC,GAAG,EAAEC,UAAU,EAAE;EACxC,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAChC,OAAOD,GAAG,KAAKC,UAAU;EAC7B,CAAC,MACI;IACD,OAAO,CAAC,CAACD,GAAG,CAACE,KAAK,CAACD,UAAU,CAAC;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,YAAY,CAACH,GAAG,EAAEI,WAAW,EAAE;EAC3C,IAAI,CAACA,WAAW,EAAE;IACd,OAAO,KAAK;EAChB;EACA,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,aAAa,GAAGF,WAAW,EAAEC,EAAE,GAAGC,aAAa,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;IAC3E,IAAIG,SAAS,GAAGF,aAAa,CAACD,EAAE,CAAC;IACjC,IAAIN,UAAU,CAACC,GAAG,EAAEQ,SAAS,CAAC,EAAE;MAC5B,OAAO,IAAI;IACf;EACJ;EACA,OAAO,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}