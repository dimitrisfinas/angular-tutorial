{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance as performance } from '../platform';\nvar NANOSECOND_DIGITS = 9;\nvar SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number to HrTime, HrTime = [number, number].\n * The first number is UNIX Epoch time in seconds since 00:00:00 UTC on 1 January 1970.\n * The second number represents the partial second elapsed since Unix Epoch time represented by first number in nanoseconds.\n * For example, 2021-01-01T12:30:10.150Z in UNIX Epoch time in milliseconds is represented as 1609504210150.\n * numberToHrtime calculates the first number by converting and truncating the Epoch time in milliseconds to seconds:\n * HrTime[0] = Math.trunc(1609504210150 / 1000) = 1609504210.\n * numberToHrtime calculates the second number by converting the digits after the decimal point of the subtraction, (1609504210150 / 1000) - HrTime[0], to nanoseconds:\n * HrTime[1] = Number((1609504210.150 - HrTime[0]).toFixed(9)) * SECOND_TO_NANOSECONDS = 150000000.\n * This is represented in HrTime format as [1609504210, 150000000].\n * @param epochMillis\n */\nfunction numberToHrtime(epochMillis) {\n  var epochSeconds = epochMillis / 1000;\n  // Decimals only.\n  var seconds = Math.trunc(epochSeconds);\n  // Round sub-nanosecond accuracy to nanosecond.\n  var nanos = Number((epochSeconds - seconds).toFixed(NANOSECOND_DIGITS)) * SECOND_TO_NANOSECONDS;\n  return [seconds, nanos];\n}\nfunction getTimeOrigin() {\n  var timeOrigin = performance.timeOrigin;\n  if (typeof timeOrigin !== 'number') {\n    var perf = performance;\n    timeOrigin = perf.timing && perf.timing.fetchStart;\n  }\n  return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow) {\n  var timeOrigin = numberToHrtime(getTimeOrigin());\n  var now = numberToHrtime(typeof performanceNow === 'number' ? performanceNow : performance.now());\n  var seconds = timeOrigin[0] + now[0];\n  var nanos = timeOrigin[1] + now[1];\n  // Nanoseconds\n  if (nanos > SECOND_TO_NANOSECONDS) {\n    nanos -= SECOND_TO_NANOSECONDS;\n    seconds += 1;\n  }\n  return [seconds, nanos];\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time) {\n  // process.hrtime\n  if (isTimeInputHrTime(time)) {\n    return time;\n  } else if (typeof time === 'number') {\n    // Must be a performance.now() if it's smaller than process start time.\n    if (time < getTimeOrigin()) {\n      return hrTime(time);\n    } else {\n      // epoch milliseconds or performance.timeOrigin\n      return numberToHrtime(time);\n    }\n  } else if (time instanceof Date) {\n    return numberToHrtime(time.getTime());\n  } else {\n    throw TypeError('Invalid input type');\n  }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(startTime, endTime) {\n  var seconds = endTime[0] - startTime[0];\n  var nanos = endTime[1] - startTime[1];\n  // overflow\n  if (nanos < 0) {\n    seconds -= 1;\n    // negate\n    nanos += SECOND_TO_NANOSECONDS;\n  }\n  return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time) {\n  var precision = NANOSECOND_DIGITS;\n  var tmp = \"\" + '0'.repeat(precision) + time[1] + \"Z\";\n  var nanoString = tmp.substr(tmp.length - precision - 1);\n  var date = new Date(time[0] * 1000).toISOString();\n  return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time) {\n  return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time) {\n  return Math.round(time[0] * 1e3 + time[1] / 1e6);\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time) {\n  return Math.round(time[0] * 1e6 + time[1] / 1e3);\n}\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value) {\n  return Array.isArray(value) && value.length === 2 && typeof value[0] === 'number' && typeof value[1] === 'number';\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(value) {\n  return isTimeInputHrTime(value) || typeof value === 'number' || value instanceof Date;\n}","map":{"version":3,"names":["otperformance","performance","NANOSECOND_DIGITS","SECOND_TO_NANOSECONDS","Math","pow","numberToHrtime","epochMillis","epochSeconds","seconds","trunc","nanos","Number","toFixed","getTimeOrigin","timeOrigin","perf","timing","fetchStart","hrTime","performanceNow","now","timeInputToHrTime","time","isTimeInputHrTime","Date","getTime","TypeError","hrTimeDuration","startTime","endTime","hrTimeToTimeStamp","precision","tmp","repeat","nanoString","substr","length","date","toISOString","replace","hrTimeToNanoseconds","hrTimeToMilliseconds","round","hrTimeToMicroseconds","value","Array","isArray","isTimeInput"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/core/build/esm/common/time.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance as performance } from '../platform';\nvar NANOSECOND_DIGITS = 9;\nvar SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number to HrTime, HrTime = [number, number].\n * The first number is UNIX Epoch time in seconds since 00:00:00 UTC on 1 January 1970.\n * The second number represents the partial second elapsed since Unix Epoch time represented by first number in nanoseconds.\n * For example, 2021-01-01T12:30:10.150Z in UNIX Epoch time in milliseconds is represented as 1609504210150.\n * numberToHrtime calculates the first number by converting and truncating the Epoch time in milliseconds to seconds:\n * HrTime[0] = Math.trunc(1609504210150 / 1000) = 1609504210.\n * numberToHrtime calculates the second number by converting the digits after the decimal point of the subtraction, (1609504210150 / 1000) - HrTime[0], to nanoseconds:\n * HrTime[1] = Number((1609504210.150 - HrTime[0]).toFixed(9)) * SECOND_TO_NANOSECONDS = 150000000.\n * This is represented in HrTime format as [1609504210, 150000000].\n * @param epochMillis\n */\nfunction numberToHrtime(epochMillis) {\n    var epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    var seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    var nanos = Number((epochSeconds - seconds).toFixed(NANOSECOND_DIGITS)) *\n        SECOND_TO_NANOSECONDS;\n    return [seconds, nanos];\n}\nfunction getTimeOrigin() {\n    var timeOrigin = performance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        var perf = performance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow) {\n    var timeOrigin = numberToHrtime(getTimeOrigin());\n    var now = numberToHrtime(typeof performanceNow === 'number' ? performanceNow : performance.now());\n    var seconds = timeOrigin[0] + now[0];\n    var nanos = timeOrigin[1] + now[1];\n    // Nanoseconds\n    if (nanos > SECOND_TO_NANOSECONDS) {\n        nanos -= SECOND_TO_NANOSECONDS;\n        seconds += 1;\n    }\n    return [seconds, nanos];\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return numberToHrtime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return numberToHrtime(time.getTime());\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(startTime, endTime) {\n    var seconds = endTime[0] - startTime[0];\n    var nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time) {\n    var precision = NANOSECOND_DIGITS;\n    var tmp = \"\" + '0'.repeat(precision) + time[1] + \"Z\";\n    var nanoString = tmp.substr(tmp.length - precision - 1);\n    var date = new Date(time[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time) {\n    return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time) {\n    return Math.round(time[0] * 1e3 + time[1] / 1e6);\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time) {\n    return Math.round(time[0] * 1e6 + time[1] / 1e3);\n}\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}