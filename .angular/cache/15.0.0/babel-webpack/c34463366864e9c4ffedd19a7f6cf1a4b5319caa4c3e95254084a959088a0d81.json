{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { propagation } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport { BAGGAGE_HEADER, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS } from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nvar W3CBaggagePropagator = /** @class */function () {\n  function W3CBaggagePropagator() {}\n  W3CBaggagePropagator.prototype.inject = function (context, carrier, setter) {\n    var baggage = propagation.getBaggage(context);\n    if (!baggage || isTracingSuppressed(context)) return;\n    var keyPairs = getKeyPairs(baggage).filter(function (pair) {\n      return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n    }).slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n    var headerValue = serializeKeyPairs(keyPairs);\n    if (headerValue.length > 0) {\n      setter.set(carrier, BAGGAGE_HEADER, headerValue);\n    }\n  };\n  W3CBaggagePropagator.prototype.extract = function (context, carrier, getter) {\n    var headerValue = getter.get(carrier, BAGGAGE_HEADER);\n    var baggageString = Array.isArray(headerValue) ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR) : headerValue;\n    if (!baggageString) return context;\n    var baggage = {};\n    if (baggageString.length === 0) {\n      return context;\n    }\n    var pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n    pairs.forEach(function (entry) {\n      var keyPair = parsePairKeyValue(entry);\n      if (keyPair) {\n        var baggageEntry = {\n          value: keyPair.value\n        };\n        if (keyPair.metadata) {\n          baggageEntry.metadata = keyPair.metadata;\n        }\n        baggage[keyPair.key] = baggageEntry;\n      }\n    });\n    if (Object.entries(baggage).length === 0) {\n      return context;\n    }\n    return propagation.setBaggage(context, propagation.createBaggage(baggage));\n  };\n  W3CBaggagePropagator.prototype.fields = function () {\n    return [BAGGAGE_HEADER];\n  };\n  return W3CBaggagePropagator;\n}();\nexport { W3CBaggagePropagator };","map":{"version":3,"names":["propagation","isTracingSuppressed","BAGGAGE_HEADER","BAGGAGE_ITEMS_SEPARATOR","BAGGAGE_MAX_NAME_VALUE_PAIRS","BAGGAGE_MAX_PER_NAME_VALUE_PAIRS","getKeyPairs","parsePairKeyValue","serializeKeyPairs","W3CBaggagePropagator","prototype","inject","context","carrier","setter","baggage","getBaggage","keyPairs","filter","pair","length","slice","headerValue","set","extract","getter","get","baggageString","Array","isArray","join","pairs","split","forEach","entry","keyPair","baggageEntry","value","metadata","key","Object","entries","setBaggage","createBaggage","fields"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { propagation, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport { BAGGAGE_HEADER, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS } from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nvar W3CBaggagePropagator = /** @class */ (function () {\n    function W3CBaggagePropagator() {\n    }\n    W3CBaggagePropagator.prototype.inject = function (context, carrier, setter) {\n        var baggage = propagation.getBaggage(context);\n        if (!baggage || isTracingSuppressed(context))\n            return;\n        var keyPairs = getKeyPairs(baggage)\n            .filter(function (pair) {\n            return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        var headerValue = serializeKeyPairs(keyPairs);\n        if (headerValue.length > 0) {\n            setter.set(carrier, BAGGAGE_HEADER, headerValue);\n        }\n    };\n    W3CBaggagePropagator.prototype.extract = function (context, carrier, getter) {\n        var headerValue = getter.get(carrier, BAGGAGE_HEADER);\n        var baggageString = Array.isArray(headerValue) ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR) : headerValue;\n        if (!baggageString)\n            return context;\n        var baggage = {};\n        if (baggageString.length === 0) {\n            return context;\n        }\n        var pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(function (entry) {\n            var keyPair = parsePairKeyValue(entry);\n            if (keyPair) {\n                var baggageEntry = { value: keyPair.value };\n                if (keyPair.metadata) {\n                    baggageEntry.metadata = keyPair.metadata;\n                }\n                baggage[keyPair.key] = baggageEntry;\n            }\n        });\n        if (Object.entries(baggage).length === 0) {\n            return context;\n        }\n        return propagation.setBaggage(context, propagation.createBaggage(baggage));\n    };\n    W3CBaggagePropagator.prototype.fields = function () {\n        return [BAGGAGE_HEADER];\n    };\n    return W3CBaggagePropagator;\n}());\nexport { W3CBaggagePropagator };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAS,oBAAoB;AACjD,SAASC,mBAAmB,QAAQ,8BAA8B;AAClE,SAASC,cAAc,EAAEC,uBAAuB,EAAEC,4BAA4B,EAAEC,gCAAgC,QAAQ,cAAc;AACtI,SAASC,WAAW,EAAEC,iBAAiB,EAAEC,iBAAiB,QAAQ,UAAU;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,oBAAoB,GAAG,aAAe,YAAY;EAClD,SAASA,oBAAoB,GAAG,CAChC;EACAA,oBAAoB,CAACC,SAAS,CAACC,MAAM,GAAG,UAAUC,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAE;IACxE,IAAIC,OAAO,GAAGf,WAAW,CAACgB,UAAU,CAACJ,OAAO,CAAC;IAC7C,IAAI,CAACG,OAAO,IAAId,mBAAmB,CAACW,OAAO,CAAC,EACxC;IACJ,IAAIK,QAAQ,GAAGX,WAAW,CAACS,OAAO,CAAC,CAC9BG,MAAM,CAAC,UAAUC,IAAI,EAAE;MACxB,OAAOA,IAAI,CAACC,MAAM,IAAIf,gCAAgC;IAC1D,CAAC,CAAC,CACGgB,KAAK,CAAC,CAAC,EAAEjB,4BAA4B,CAAC;IAC3C,IAAIkB,WAAW,GAAGd,iBAAiB,CAACS,QAAQ,CAAC;IAC7C,IAAIK,WAAW,CAACF,MAAM,GAAG,CAAC,EAAE;MACxBN,MAAM,CAACS,GAAG,CAACV,OAAO,EAAEX,cAAc,EAAEoB,WAAW,CAAC;IACpD;EACJ,CAAC;EACDb,oBAAoB,CAACC,SAAS,CAACc,OAAO,GAAG,UAAUZ,OAAO,EAAEC,OAAO,EAAEY,MAAM,EAAE;IACzE,IAAIH,WAAW,GAAGG,MAAM,CAACC,GAAG,CAACb,OAAO,EAAEX,cAAc,CAAC;IACrD,IAAIyB,aAAa,GAAGC,KAAK,CAACC,OAAO,CAACP,WAAW,CAAC,GAAGA,WAAW,CAACQ,IAAI,CAAC3B,uBAAuB,CAAC,GAAGmB,WAAW;IACxG,IAAI,CAACK,aAAa,EACd,OAAOf,OAAO;IAClB,IAAIG,OAAO,GAAG,CAAC,CAAC;IAChB,IAAIY,aAAa,CAACP,MAAM,KAAK,CAAC,EAAE;MAC5B,OAAOR,OAAO;IAClB;IACA,IAAImB,KAAK,GAAGJ,aAAa,CAACK,KAAK,CAAC7B,uBAAuB,CAAC;IACxD4B,KAAK,CAACE,OAAO,CAAC,UAAUC,KAAK,EAAE;MAC3B,IAAIC,OAAO,GAAG5B,iBAAiB,CAAC2B,KAAK,CAAC;MACtC,IAAIC,OAAO,EAAE;QACT,IAAIC,YAAY,GAAG;UAAEC,KAAK,EAAEF,OAAO,CAACE;QAAM,CAAC;QAC3C,IAAIF,OAAO,CAACG,QAAQ,EAAE;UAClBF,YAAY,CAACE,QAAQ,GAAGH,OAAO,CAACG,QAAQ;QAC5C;QACAvB,OAAO,CAACoB,OAAO,CAACI,GAAG,CAAC,GAAGH,YAAY;MACvC;IACJ,CAAC,CAAC;IACF,IAAII,MAAM,CAACC,OAAO,CAAC1B,OAAO,CAAC,CAACK,MAAM,KAAK,CAAC,EAAE;MACtC,OAAOR,OAAO;IAClB;IACA,OAAOZ,WAAW,CAAC0C,UAAU,CAAC9B,OAAO,EAAEZ,WAAW,CAAC2C,aAAa,CAAC5B,OAAO,CAAC,CAAC;EAC9E,CAAC;EACDN,oBAAoB,CAACC,SAAS,CAACkC,MAAM,GAAG,YAAY;IAChD,OAAO,CAAC1C,cAAc,CAAC;EAC3B,CAAC;EACD,OAAOO,oBAAoB;AAC/B,CAAC,EAAG;AACJ,SAASA,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}