{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport { DiagLogLevel } from '../diag/types';\nimport { getGlobal, registerGlobal, unregisterGlobal } from '../internal/global-utils';\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */function () {\n  /**\n   * Private internal constructor\n   * @private\n   */\n  function DiagAPI() {\n    function _logProxy(funcName) {\n      return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var logger = getGlobal('diag');\n        // shortcut if logger not set\n        if (!logger) return;\n        return logger[funcName].apply(logger, args);\n      };\n    }\n    // Using self local variable for minification purposes as 'this' cannot be minified\n    var self = this;\n    // DiagAPI specific functions\n    self.setLogger = function (logger, logLevel) {\n      var _a, _b;\n      if (logLevel === void 0) {\n        logLevel = DiagLogLevel.INFO;\n      }\n      if (logger === self) {\n        // There isn't much we can do here.\n        // Logging to the console might break the user application.\n        // Try to log to self. If a logger was previously registered it will receive the log.\n        var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n        self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n        return false;\n      }\n      var oldLogger = getGlobal('diag');\n      var newLogger = createLogLevelDiagLogger(logLevel, logger);\n      // There already is an logger registered. We'll let it know before overwriting it.\n      if (oldLogger) {\n        var stack = (_b = new Error().stack) !== null && _b !== void 0 ? _b : '<failed to generate stacktrace>';\n        oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n        newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n      }\n      return registerGlobal('diag', newLogger, self, true);\n    };\n    self.disable = function () {\n      unregisterGlobal(API_NAME, self);\n    };\n    self.createComponentLogger = function (options) {\n      return new DiagComponentLogger(options);\n    };\n    self.verbose = _logProxy('verbose');\n    self.debug = _logProxy('debug');\n    self.info = _logProxy('info');\n    self.warn = _logProxy('warn');\n    self.error = _logProxy('error');\n  }\n  /** Get the singleton instance of the DiagAPI API */\n  DiagAPI.instance = function () {\n    if (!this._instance) {\n      this._instance = new DiagAPI();\n    }\n    return this._instance;\n  };\n  return DiagAPI;\n}();\nexport { DiagAPI };","map":{"version":3,"names":["DiagComponentLogger","createLogLevelDiagLogger","DiagLogLevel","getGlobal","registerGlobal","unregisterGlobal","API_NAME","DiagAPI","_logProxy","funcName","args","_i","arguments","length","logger","apply","self","setLogger","logLevel","_a","_b","INFO","err","Error","error","stack","message","oldLogger","newLogger","warn","disable","createComponentLogger","options","verbose","debug","info","instance","_instance"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/api/build/esm/api/diag.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagComponentLogger } from '../diag/ComponentLogger';\nimport { createLogLevelDiagLogger } from '../diag/internal/logLevelLogger';\nimport { DiagLogLevel, } from '../diag/types';\nimport { getGlobal, registerGlobal, unregisterGlobal, } from '../internal/global-utils';\nvar API_NAME = 'diag';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry internal\n * diagnostic API\n */\nvar DiagAPI = /** @class */ (function () {\n    /**\n     * Private internal constructor\n     * @private\n     */\n    function DiagAPI() {\n        function _logProxy(funcName) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var logger = getGlobal('diag');\n                // shortcut if logger not set\n                if (!logger)\n                    return;\n                return logger[funcName].apply(logger, args);\n            };\n        }\n        // Using self local variable for minification purposes as 'this' cannot be minified\n        var self = this;\n        // DiagAPI specific functions\n        self.setLogger = function (logger, logLevel) {\n            var _a, _b;\n            if (logLevel === void 0) { logLevel = DiagLogLevel.INFO; }\n            if (logger === self) {\n                // There isn't much we can do here.\n                // Logging to the console might break the user application.\n                // Try to log to self. If a logger was previously registered it will receive the log.\n                var err = new Error('Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation');\n                self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);\n                return false;\n            }\n            var oldLogger = getGlobal('diag');\n            var newLogger = createLogLevelDiagLogger(logLevel, logger);\n            // There already is an logger registered. We'll let it know before overwriting it.\n            if (oldLogger) {\n                var stack = (_b = new Error().stack) !== null && _b !== void 0 ? _b : '<failed to generate stacktrace>';\n                oldLogger.warn(\"Current logger will be overwritten from \" + stack);\n                newLogger.warn(\"Current logger will overwrite one already registered from \" + stack);\n            }\n            return registerGlobal('diag', newLogger, self, true);\n        };\n        self.disable = function () {\n            unregisterGlobal(API_NAME, self);\n        };\n        self.createComponentLogger = function (options) {\n            return new DiagComponentLogger(options);\n        };\n        self.verbose = _logProxy('verbose');\n        self.debug = _logProxy('debug');\n        self.info = _logProxy('info');\n        self.warn = _logProxy('warn');\n        self.error = _logProxy('error');\n    }\n    /** Get the singleton instance of the DiagAPI API */\n    DiagAPI.instance = function () {\n        if (!this._instance) {\n            this._instance = new DiagAPI();\n        }\n        return this._instance;\n    };\n    return DiagAPI;\n}());\nexport { DiagAPI };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,wBAAwB,QAAQ,iCAAiC;AAC1E,SAASC,YAAY,QAAS,eAAe;AAC7C,SAASC,SAAS,EAAEC,cAAc,EAAEC,gBAAgB,QAAS,0BAA0B;AACvF,IAAIC,QAAQ,GAAG,MAAM;AACrB;AACA;AACA;AACA;AACA,IAAIC,OAAO,GAAG,aAAe,YAAY;EACrC;AACJ;AACA;AACA;EACI,SAASA,OAAO,GAAG;IACf,SAASC,SAAS,CAACC,QAAQ,EAAE;MACzB,OAAO,YAAY;QACf,IAAIC,IAAI,GAAG,EAAE;QACb,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;UAC1CD,IAAI,CAACC,EAAE,CAAC,GAAGC,SAAS,CAACD,EAAE,CAAC;QAC5B;QACA,IAAIG,MAAM,GAAGX,SAAS,CAAC,MAAM,CAAC;QAC9B;QACA,IAAI,CAACW,MAAM,EACP;QACJ,OAAOA,MAAM,CAACL,QAAQ,CAAC,CAACM,KAAK,CAACD,MAAM,EAAEJ,IAAI,CAAC;MAC/C,CAAC;IACL;IACA;IACA,IAAIM,IAAI,GAAG,IAAI;IACf;IACAA,IAAI,CAACC,SAAS,GAAG,UAAUH,MAAM,EAAEI,QAAQ,EAAE;MACzC,IAAIC,EAAE,EAAEC,EAAE;MACV,IAAIF,QAAQ,KAAK,KAAK,CAAC,EAAE;QAAEA,QAAQ,GAAGhB,YAAY,CAACmB,IAAI;MAAE;MACzD,IAAIP,MAAM,KAAKE,IAAI,EAAE;QACjB;QACA;QACA;QACA,IAAIM,GAAG,GAAG,IAAIC,KAAK,CAAC,oIAAoI,CAAC;QACzJP,IAAI,CAACQ,KAAK,CAAC,CAACL,EAAE,GAAGG,GAAG,CAACG,KAAK,MAAM,IAAI,IAAIN,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGG,GAAG,CAACI,OAAO,CAAC;QACzE,OAAO,KAAK;MAChB;MACA,IAAIC,SAAS,GAAGxB,SAAS,CAAC,MAAM,CAAC;MACjC,IAAIyB,SAAS,GAAG3B,wBAAwB,CAACiB,QAAQ,EAAEJ,MAAM,CAAC;MAC1D;MACA,IAAIa,SAAS,EAAE;QACX,IAAIF,KAAK,GAAG,CAACL,EAAE,GAAG,IAAIG,KAAK,EAAE,CAACE,KAAK,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,iCAAiC;QACvGO,SAAS,CAACE,IAAI,CAAC,0CAA0C,GAAGJ,KAAK,CAAC;QAClEG,SAAS,CAACC,IAAI,CAAC,4DAA4D,GAAGJ,KAAK,CAAC;MACxF;MACA,OAAOrB,cAAc,CAAC,MAAM,EAAEwB,SAAS,EAAEZ,IAAI,EAAE,IAAI,CAAC;IACxD,CAAC;IACDA,IAAI,CAACc,OAAO,GAAG,YAAY;MACvBzB,gBAAgB,CAACC,QAAQ,EAAEU,IAAI,CAAC;IACpC,CAAC;IACDA,IAAI,CAACe,qBAAqB,GAAG,UAAUC,OAAO,EAAE;MAC5C,OAAO,IAAIhC,mBAAmB,CAACgC,OAAO,CAAC;IAC3C,CAAC;IACDhB,IAAI,CAACiB,OAAO,GAAGzB,SAAS,CAAC,SAAS,CAAC;IACnCQ,IAAI,CAACkB,KAAK,GAAG1B,SAAS,CAAC,OAAO,CAAC;IAC/BQ,IAAI,CAACmB,IAAI,GAAG3B,SAAS,CAAC,MAAM,CAAC;IAC7BQ,IAAI,CAACa,IAAI,GAAGrB,SAAS,CAAC,MAAM,CAAC;IAC7BQ,IAAI,CAACQ,KAAK,GAAGhB,SAAS,CAAC,OAAO,CAAC;EACnC;EACA;EACAD,OAAO,CAAC6B,QAAQ,GAAG,YAAY;IAC3B,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAG,IAAI9B,OAAO,EAAE;IAClC;IACA,OAAO,IAAI,CAAC8B,SAAS;EACzB,CAAC;EACD,OAAO9B,OAAO;AAClB,CAAC,EAAG;AACJ,SAASA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}