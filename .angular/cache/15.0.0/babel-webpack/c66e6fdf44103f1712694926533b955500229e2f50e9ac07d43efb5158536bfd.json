{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = void 0;\nconst net_1 = require(\"net\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst resolver_1 = require(\"./resolver\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst logging = require(\"./logging\");\nconst TRACER_NAME = 'ip_resolver';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst IPV4_SCHEME = 'ipv4';\nconst IPV6_SCHEME = 'ipv6';\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nconst DEFAULT_PORT = 443;\nclass IpResolver {\n  constructor(target, listener, channelOptions) {\n    var _a;\n    this.target = target;\n    this.listener = listener;\n    this.addresses = [];\n    this.error = null;\n    trace('Resolver constructed for target ' + uri_parser_1.uriToString(target));\n    const addresses = [];\n    if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\n      this.error = {\n        code: constants_1.Status.UNAVAILABLE,\n        details: `Unrecognized scheme ${target.scheme} in IP resolver`,\n        metadata: new metadata_1.Metadata()\n      };\n      return;\n    }\n    const pathList = target.path.split(',');\n    for (const path of pathList) {\n      const hostPort = uri_parser_1.splitHostPort(path);\n      if (hostPort === null) {\n        this.error = {\n          code: constants_1.Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new metadata_1.Metadata()\n        };\n        return;\n      }\n      if (target.scheme === IPV4_SCHEME && !net_1.isIPv4(hostPort.host) || target.scheme === IPV6_SCHEME && !net_1.isIPv6(hostPort.host)) {\n        this.error = {\n          code: constants_1.Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new metadata_1.Metadata()\n        };\n        return;\n      }\n      addresses.push({\n        host: hostPort.host,\n        port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT\n      });\n    }\n    this.addresses = addresses;\n    trace('Parsed ' + target.scheme + ' address list ' + this.addresses);\n  }\n  updateResolution() {\n    process.nextTick(() => {\n      if (this.error) {\n        this.listener.onError(this.error);\n      } else {\n        this.listener.onSuccessfulResolution(this.addresses, null, null, null, {});\n      }\n    });\n  }\n  destroy() {\n    // This resolver owns no resources, so we do nothing here.\n  }\n  static getDefaultAuthority(target) {\n    return target.path.split(',')[0];\n  }\n}\nfunction setup() {\n  resolver_1.registerResolver(IPV4_SCHEME, IpResolver);\n  resolver_1.registerResolver(IPV6_SCHEME, IpResolver);\n}\nexports.setup = setup;","map":{"version":3,"names":["Object","defineProperty","exports","value","setup","net_1","require","constants_1","metadata_1","resolver_1","uri_parser_1","logging","TRACER_NAME","trace","text","LogVerbosity","DEBUG","IPV4_SCHEME","IPV6_SCHEME","DEFAULT_PORT","IpResolver","constructor","target","listener","channelOptions","_a","addresses","error","uriToString","scheme","code","Status","UNAVAILABLE","details","metadata","Metadata","pathList","path","split","hostPort","splitHostPort","isIPv4","host","isIPv6","push","port","updateResolution","process","nextTick","onError","onSuccessfulResolution","destroy","getDefaultAuthority","registerResolver"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@grpc/grpc-js/build/src/resolver-ip.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setup = void 0;\nconst net_1 = require(\"net\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst resolver_1 = require(\"./resolver\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst logging = require(\"./logging\");\nconst TRACER_NAME = 'ip_resolver';\nfunction trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst IPV4_SCHEME = 'ipv4';\nconst IPV6_SCHEME = 'ipv6';\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nconst DEFAULT_PORT = 443;\nclass IpResolver {\n    constructor(target, listener, channelOptions) {\n        var _a;\n        this.target = target;\n        this.listener = listener;\n        this.addresses = [];\n        this.error = null;\n        trace('Resolver constructed for target ' + uri_parser_1.uriToString(target));\n        const addresses = [];\n        if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\n            this.error = {\n                code: constants_1.Status.UNAVAILABLE,\n                details: `Unrecognized scheme ${target.scheme} in IP resolver`,\n                metadata: new metadata_1.Metadata(),\n            };\n            return;\n        }\n        const pathList = target.path.split(',');\n        for (const path of pathList) {\n            const hostPort = uri_parser_1.splitHostPort(path);\n            if (hostPort === null) {\n                this.error = {\n                    code: constants_1.Status.UNAVAILABLE,\n                    details: `Failed to parse ${target.scheme} address ${path}`,\n                    metadata: new metadata_1.Metadata(),\n                };\n                return;\n            }\n            if ((target.scheme === IPV4_SCHEME && !net_1.isIPv4(hostPort.host)) ||\n                (target.scheme === IPV6_SCHEME && !net_1.isIPv6(hostPort.host))) {\n                this.error = {\n                    code: constants_1.Status.UNAVAILABLE,\n                    details: `Failed to parse ${target.scheme} address ${path}`,\n                    metadata: new metadata_1.Metadata(),\n                };\n                return;\n            }\n            addresses.push({\n                host: hostPort.host,\n                port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT,\n            });\n        }\n        this.addresses = addresses;\n        trace('Parsed ' + target.scheme + ' address list ' + this.addresses);\n    }\n    updateResolution() {\n        process.nextTick(() => {\n            if (this.error) {\n                this.listener.onError(this.error);\n            }\n            else {\n                this.listener.onSuccessfulResolution(this.addresses, null, null, null, {});\n            }\n        });\n    }\n    destroy() {\n        // This resolver owns no resources, so we do nothing here.\n    }\n    static getDefaultAuthority(target) {\n        return target.path.split(',')[0];\n    }\n}\nfunction setup() {\n    resolver_1.registerResolver(IPV4_SCHEME, IpResolver);\n    resolver_1.registerResolver(IPV6_SCHEME, IpResolver);\n}\nexports.setup = setup;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}