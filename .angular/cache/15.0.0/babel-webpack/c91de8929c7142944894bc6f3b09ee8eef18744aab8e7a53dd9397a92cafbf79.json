{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, TraceFlags } from '@opentelemetry/api';\nimport { ExportResultCode, getEnv, globalErrorHandler, suppressTracing, unrefTimer } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */function () {\n  function BatchSpanProcessorBase(_exporter, config) {\n    this._exporter = _exporter;\n    this._finishedSpans = [];\n    this._isShutdown = false;\n    this._shuttingDownPromise = Promise.resolve();\n    var env = getEnv();\n    this._maxExportBatchSize = typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number' ? config.maxExportBatchSize : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n    this._maxQueueSize = typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number' ? config.maxQueueSize : env.OTEL_BSP_MAX_QUEUE_SIZE;\n    this._scheduledDelayMillis = typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number' ? config.scheduledDelayMillis : env.OTEL_BSP_SCHEDULE_DELAY;\n    this._exportTimeoutMillis = typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number' ? config.exportTimeoutMillis : env.OTEL_BSP_EXPORT_TIMEOUT;\n  }\n  BatchSpanProcessorBase.prototype.forceFlush = function () {\n    if (this._isShutdown) {\n      return this._shuttingDownPromise;\n    }\n    return this._flushAll();\n  };\n  // does nothing.\n  BatchSpanProcessorBase.prototype.onStart = function (_span) {};\n  BatchSpanProcessorBase.prototype.onEnd = function (span) {\n    if (this._isShutdown) {\n      return;\n    }\n    if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n      return;\n    }\n    this._addToBuffer(span);\n  };\n  BatchSpanProcessorBase.prototype.shutdown = function () {\n    var _this = this;\n    if (this._isShutdown) {\n      return this._shuttingDownPromise;\n    }\n    this._isShutdown = true;\n    this._shuttingDownPromise = new Promise(function (resolve, reject) {\n      Promise.resolve().then(function () {\n        return _this.onShutdown();\n      }).then(function () {\n        return _this._flushAll();\n      }).then(function () {\n        return _this._exporter.shutdown();\n      }).then(resolve).catch(function (e) {\n        reject(e);\n      });\n    });\n    return this._shuttingDownPromise;\n  };\n  /** Add a span in the buffer. */\n  BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n    if (this._finishedSpans.length >= this._maxQueueSize) {\n      // limit reached, drop span\n      return;\n    }\n    this._finishedSpans.push(span);\n    this._maybeStartTimer();\n  };\n  /**\n   * Send all spans to the exporter respecting the batch size limit\n   * This function is used only on forceFlush or shutdown,\n   * for all other cases _flush should be used\n   * */\n  BatchSpanProcessorBase.prototype._flushAll = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var promises = [];\n      // calculate number of batches\n      var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n      for (var i = 0, j = count; i < j; i++) {\n        promises.push(_this._flushOneBatch());\n      }\n      Promise.all(promises).then(function () {\n        resolve();\n      }).catch(reject);\n    });\n  };\n  BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n    var _this = this;\n    this._clearTimer();\n    if (this._finishedSpans.length === 0) {\n      return Promise.resolve();\n    }\n    return new Promise(function (resolve, reject) {\n      var timer = setTimeout(function () {\n        // don't wait anymore for export, this way the next batch can start\n        reject(new Error('Timeout'));\n      }, _this._exportTimeoutMillis);\n      // prevent downstream exporter calls from generating spans\n      context.with(suppressTracing(context.active()), function () {\n        // Reset the finished spans buffer here because the next invocations of the _flush method\n        // could pass the same finished spans to the exporter if the buffer is cleared\n        // outside of the execution of this callback.\n        _this._exporter.export(_this._finishedSpans.splice(0, _this._maxExportBatchSize), function (result) {\n          var _a;\n          clearTimeout(timer);\n          if (result.code === ExportResultCode.SUCCESS) {\n            resolve();\n          } else {\n            reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));\n          }\n        });\n      });\n    });\n  };\n  BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n    var _this = this;\n    if (this._timer !== undefined) return;\n    this._timer = setTimeout(function () {\n      _this._flushOneBatch().then(function () {\n        if (_this._finishedSpans.length > 0) {\n          _this._clearTimer();\n          _this._maybeStartTimer();\n        }\n      }).catch(function (e) {\n        globalErrorHandler(e);\n      });\n    }, this._scheduledDelayMillis);\n    unrefTimer(this._timer);\n  };\n  BatchSpanProcessorBase.prototype._clearTimer = function () {\n    if (this._timer !== undefined) {\n      clearTimeout(this._timer);\n      this._timer = undefined;\n    }\n  };\n  return BatchSpanProcessorBase;\n}();\nexport { BatchSpanProcessorBase };","map":{"version":3,"names":["context","TraceFlags","ExportResultCode","getEnv","globalErrorHandler","suppressTracing","unrefTimer","BatchSpanProcessorBase","_exporter","config","_finishedSpans","_isShutdown","_shuttingDownPromise","Promise","resolve","env","_maxExportBatchSize","maxExportBatchSize","OTEL_BSP_MAX_EXPORT_BATCH_SIZE","_maxQueueSize","maxQueueSize","OTEL_BSP_MAX_QUEUE_SIZE","_scheduledDelayMillis","scheduledDelayMillis","OTEL_BSP_SCHEDULE_DELAY","_exportTimeoutMillis","exportTimeoutMillis","OTEL_BSP_EXPORT_TIMEOUT","prototype","forceFlush","_flushAll","onStart","_span","onEnd","span","spanContext","traceFlags","SAMPLED","_addToBuffer","shutdown","_this","reject","then","onShutdown","catch","e","length","push","_maybeStartTimer","promises","count","Math","ceil","i","j","_flushOneBatch","all","_clearTimer","timer","setTimeout","Error","with","active","export","splice","result","_a","clearTimeout","code","SUCCESS","error","_timer","undefined"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, TraceFlags } from '@opentelemetry/api';\nimport { ExportResultCode, getEnv, globalErrorHandler, suppressTracing, unrefTimer, } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */ (function () {\n    function BatchSpanProcessorBase(_exporter, config) {\n        this._exporter = _exporter;\n        this._finishedSpans = [];\n        this._isShutdown = false;\n        this._shuttingDownPromise = Promise.resolve();\n        var env = getEnv();\n        this._maxExportBatchSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number'\n                ? config.maxExportBatchSize\n                : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n        this._maxQueueSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number'\n                ? config.maxQueueSize\n                : env.OTEL_BSP_MAX_QUEUE_SIZE;\n        this._scheduledDelayMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number'\n                ? config.scheduledDelayMillis\n                : env.OTEL_BSP_SCHEDULE_DELAY;\n        this._exportTimeoutMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number'\n                ? config.exportTimeoutMillis\n                : env.OTEL_BSP_EXPORT_TIMEOUT;\n    }\n    BatchSpanProcessorBase.prototype.forceFlush = function () {\n        if (this._isShutdown) {\n            return this._shuttingDownPromise;\n        }\n        return this._flushAll();\n    };\n    // does nothing.\n    BatchSpanProcessorBase.prototype.onStart = function (_span) { };\n    BatchSpanProcessorBase.prototype.onEnd = function (span) {\n        if (this._isShutdown) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        this._addToBuffer(span);\n    };\n    BatchSpanProcessorBase.prototype.shutdown = function () {\n        var _this = this;\n        if (this._isShutdown) {\n            return this._shuttingDownPromise;\n        }\n        this._isShutdown = true;\n        this._shuttingDownPromise = new Promise(function (resolve, reject) {\n            Promise.resolve()\n                .then(function () {\n                return _this.onShutdown();\n            })\n                .then(function () {\n                return _this._flushAll();\n            })\n                .then(function () {\n                return _this._exporter.shutdown();\n            })\n                .then(resolve)\n                .catch(function (e) {\n                reject(e);\n            });\n        });\n        return this._shuttingDownPromise;\n    };\n    /** Add a span in the buffer. */\n    BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n            // limit reached, drop span\n            return;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n    };\n    /**\n     * Send all spans to the exporter respecting the batch size limit\n     * This function is used only on forceFlush or shutdown,\n     * for all other cases _flush should be used\n     * */\n    BatchSpanProcessorBase.prototype._flushAll = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var promises = [];\n            // calculate number of batches\n            var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n            for (var i = 0, j = count; i < j; i++) {\n                promises.push(_this._flushOneBatch());\n            }\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(reject);\n        });\n    };\n    BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n        var _this = this;\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n            return Promise.resolve();\n        }\n        return new Promise(function (resolve, reject) {\n            var timer = setTimeout(function () {\n                // don't wait anymore for export, this way the next batch can start\n                reject(new Error('Timeout'));\n            }, _this._exportTimeoutMillis);\n            // prevent downstream exporter calls from generating spans\n            context.with(suppressTracing(context.active()), function () {\n                // Reset the finished spans buffer here because the next invocations of the _flush method\n                // could pass the same finished spans to the exporter if the buffer is cleared\n                // outside of the execution of this callback.\n                _this._exporter.export(_this._finishedSpans.splice(0, _this._maxExportBatchSize), function (result) {\n                    var _a;\n                    clearTimeout(timer);\n                    if (result.code === ExportResultCode.SUCCESS) {\n                        resolve();\n                    }\n                    else {\n                        reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));\n                    }\n                });\n            });\n        });\n    };\n    BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n        var _this = this;\n        if (this._timer !== undefined)\n            return;\n        this._timer = setTimeout(function () {\n            _this._flushOneBatch()\n                .then(function () {\n                if (_this._finishedSpans.length > 0) {\n                    _this._clearTimer();\n                    _this._maybeStartTimer();\n                }\n            })\n                .catch(function (e) {\n                globalErrorHandler(e);\n            });\n        }, this._scheduledDelayMillis);\n        unrefTimer(this._timer);\n    };\n    BatchSpanProcessorBase.prototype._clearTimer = function () {\n        if (this._timer !== undefined) {\n            clearTimeout(this._timer);\n            this._timer = undefined;\n        }\n    };\n    return BatchSpanProcessorBase;\n}());\nexport { BatchSpanProcessorBase };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAO,EAAEC,UAAU,QAAQ,oBAAoB;AACxD,SAASC,gBAAgB,EAAEC,MAAM,EAAEC,kBAAkB,EAAEC,eAAe,EAAEC,UAAU,QAAS,qBAAqB;AAChH;AACA;AACA;AACA;AACA,IAAIC,sBAAsB,GAAG,aAAe,YAAY;EACpD,SAASA,sBAAsB,CAACC,SAAS,EAAEC,MAAM,EAAE;IAC/C,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACE,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,oBAAoB,GAAGC,OAAO,CAACC,OAAO,EAAE;IAC7C,IAAIC,GAAG,GAAGZ,MAAM,EAAE;IAClB,IAAI,CAACa,mBAAmB,GACpB,QAAQP,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACQ,kBAAkB,CAAC,KAAK,QAAQ,GACzFR,MAAM,CAACQ,kBAAkB,GACzBF,GAAG,CAACG,8BAA8B;IAC5C,IAAI,CAACC,aAAa,GACd,QAAQV,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACW,YAAY,CAAC,KAAK,QAAQ,GACnFX,MAAM,CAACW,YAAY,GACnBL,GAAG,CAACM,uBAAuB;IACrC,IAAI,CAACC,qBAAqB,GACtB,QAAQb,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACc,oBAAoB,CAAC,KAAK,QAAQ,GAC3Fd,MAAM,CAACc,oBAAoB,GAC3BR,GAAG,CAACS,uBAAuB;IACrC,IAAI,CAACC,oBAAoB,GACrB,QAAQhB,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACiB,mBAAmB,CAAC,KAAK,QAAQ,GAC1FjB,MAAM,CAACiB,mBAAmB,GAC1BX,GAAG,CAACY,uBAAuB;EACzC;EACApB,sBAAsB,CAACqB,SAAS,CAACC,UAAU,GAAG,YAAY;IACtD,IAAI,IAAI,CAAClB,WAAW,EAAE;MAClB,OAAO,IAAI,CAACC,oBAAoB;IACpC;IACA,OAAO,IAAI,CAACkB,SAAS,EAAE;EAC3B,CAAC;EACD;EACAvB,sBAAsB,CAACqB,SAAS,CAACG,OAAO,GAAG,UAAUC,KAAK,EAAE,CAAE,CAAC;EAC/DzB,sBAAsB,CAACqB,SAAS,CAACK,KAAK,GAAG,UAAUC,IAAI,EAAE;IACrD,IAAI,IAAI,CAACvB,WAAW,EAAE;MAClB;IACJ;IACA,IAAI,CAACuB,IAAI,CAACC,WAAW,EAAE,CAACC,UAAU,GAAGnC,UAAU,CAACoC,OAAO,MAAM,CAAC,EAAE;MAC5D;IACJ;IACA,IAAI,CAACC,YAAY,CAACJ,IAAI,CAAC;EAC3B,CAAC;EACD3B,sBAAsB,CAACqB,SAAS,CAACW,QAAQ,GAAG,YAAY;IACpD,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI,IAAI,CAAC7B,WAAW,EAAE;MAClB,OAAO,IAAI,CAACC,oBAAoB;IACpC;IACA,IAAI,CAACD,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,oBAAoB,GAAG,IAAIC,OAAO,CAAC,UAAUC,OAAO,EAAE2B,MAAM,EAAE;MAC/D5B,OAAO,CAACC,OAAO,EAAE,CACZ4B,IAAI,CAAC,YAAY;QAClB,OAAOF,KAAK,CAACG,UAAU,EAAE;MAC7B,CAAC,CAAC,CACGD,IAAI,CAAC,YAAY;QAClB,OAAOF,KAAK,CAACV,SAAS,EAAE;MAC5B,CAAC,CAAC,CACGY,IAAI,CAAC,YAAY;QAClB,OAAOF,KAAK,CAAChC,SAAS,CAAC+B,QAAQ,EAAE;MACrC,CAAC,CAAC,CACGG,IAAI,CAAC5B,OAAO,CAAC,CACb8B,KAAK,CAAC,UAAUC,CAAC,EAAE;QACpBJ,MAAM,CAACI,CAAC,CAAC;MACb,CAAC,CAAC;IACN,CAAC,CAAC;IACF,OAAO,IAAI,CAACjC,oBAAoB;EACpC,CAAC;EACD;EACAL,sBAAsB,CAACqB,SAAS,CAACU,YAAY,GAAG,UAAUJ,IAAI,EAAE;IAC5D,IAAI,IAAI,CAACxB,cAAc,CAACoC,MAAM,IAAI,IAAI,CAAC3B,aAAa,EAAE;MAClD;MACA;IACJ;IACA,IAAI,CAACT,cAAc,CAACqC,IAAI,CAACb,IAAI,CAAC;IAC9B,IAAI,CAACc,gBAAgB,EAAE;EAC3B,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIzC,sBAAsB,CAACqB,SAAS,CAACE,SAAS,GAAG,YAAY;IACrD,IAAIU,KAAK,GAAG,IAAI;IAChB,OAAO,IAAI3B,OAAO,CAAC,UAAUC,OAAO,EAAE2B,MAAM,EAAE;MAC1C,IAAIQ,QAAQ,GAAG,EAAE;MACjB;MACA,IAAIC,KAAK,GAAGC,IAAI,CAACC,IAAI,CAACZ,KAAK,CAAC9B,cAAc,CAACoC,MAAM,GAAGN,KAAK,CAACxB,mBAAmB,CAAC;MAC9E,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGJ,KAAK,EAAEG,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;QACnCJ,QAAQ,CAACF,IAAI,CAACP,KAAK,CAACe,cAAc,EAAE,CAAC;MACzC;MACA1C,OAAO,CAAC2C,GAAG,CAACP,QAAQ,CAAC,CAChBP,IAAI,CAAC,YAAY;QAClB5B,OAAO,EAAE;MACb,CAAC,CAAC,CACG8B,KAAK,CAACH,MAAM,CAAC;IACtB,CAAC,CAAC;EACN,CAAC;EACDlC,sBAAsB,CAACqB,SAAS,CAAC2B,cAAc,GAAG,YAAY;IAC1D,IAAIf,KAAK,GAAG,IAAI;IAChB,IAAI,CAACiB,WAAW,EAAE;IAClB,IAAI,IAAI,CAAC/C,cAAc,CAACoC,MAAM,KAAK,CAAC,EAAE;MAClC,OAAOjC,OAAO,CAACC,OAAO,EAAE;IAC5B;IACA,OAAO,IAAID,OAAO,CAAC,UAAUC,OAAO,EAAE2B,MAAM,EAAE;MAC1C,IAAIiB,KAAK,GAAGC,UAAU,CAAC,YAAY;QAC/B;QACAlB,MAAM,CAAC,IAAImB,KAAK,CAAC,SAAS,CAAC,CAAC;MAChC,CAAC,EAAEpB,KAAK,CAACf,oBAAoB,CAAC;MAC9B;MACAzB,OAAO,CAAC6D,IAAI,CAACxD,eAAe,CAACL,OAAO,CAAC8D,MAAM,EAAE,CAAC,EAAE,YAAY;QACxD;QACA;QACA;QACAtB,KAAK,CAAChC,SAAS,CAACuD,MAAM,CAACvB,KAAK,CAAC9B,cAAc,CAACsD,MAAM,CAAC,CAAC,EAAExB,KAAK,CAACxB,mBAAmB,CAAC,EAAE,UAAUiD,MAAM,EAAE;UAChG,IAAIC,EAAE;UACNC,YAAY,CAACT,KAAK,CAAC;UACnB,IAAIO,MAAM,CAACG,IAAI,KAAKlE,gBAAgB,CAACmE,OAAO,EAAE;YAC1CvD,OAAO,EAAE;UACb,CAAC,MACI;YACD2B,MAAM,CAAC,CAACyB,EAAE,GAAGD,MAAM,CAACK,KAAK,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAIN,KAAK,CAAC,wCAAwC,CAAC,CAAC;UACpH;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDrD,sBAAsB,CAACqB,SAAS,CAACoB,gBAAgB,GAAG,YAAY;IAC5D,IAAIR,KAAK,GAAG,IAAI;IAChB,IAAI,IAAI,CAAC+B,MAAM,KAAKC,SAAS,EACzB;IACJ,IAAI,CAACD,MAAM,GAAGZ,UAAU,CAAC,YAAY;MACjCnB,KAAK,CAACe,cAAc,EAAE,CACjBb,IAAI,CAAC,YAAY;QAClB,IAAIF,KAAK,CAAC9B,cAAc,CAACoC,MAAM,GAAG,CAAC,EAAE;UACjCN,KAAK,CAACiB,WAAW,EAAE;UACnBjB,KAAK,CAACQ,gBAAgB,EAAE;QAC5B;MACJ,CAAC,CAAC,CACGJ,KAAK,CAAC,UAAUC,CAAC,EAAE;QACpBzC,kBAAkB,CAACyC,CAAC,CAAC;MACzB,CAAC,CAAC;IACN,CAAC,EAAE,IAAI,CAACvB,qBAAqB,CAAC;IAC9BhB,UAAU,CAAC,IAAI,CAACiE,MAAM,CAAC;EAC3B,CAAC;EACDhE,sBAAsB,CAACqB,SAAS,CAAC6B,WAAW,GAAG,YAAY;IACvD,IAAI,IAAI,CAACc,MAAM,KAAKC,SAAS,EAAE;MAC3BL,YAAY,CAAC,IAAI,CAACI,MAAM,CAAC;MACzB,IAAI,CAACA,MAAM,GAAGC,SAAS;IAC3B;EACJ,CAAC;EACD,OAAOjE,sBAAsB;AACjC,CAAC,EAAG;AACJ,SAASA,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}