{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { ExportResultCode, BindOnceFuture } from '@opentelemetry/core';\nimport { configureExporterTimeout } from './util';\n/**\n * Collector Exporter abstract base class\n */\nvar OTLPExporterBase = /** @class */function () {\n  /**\n   * @param config\n   */\n  function OTLPExporterBase(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this._sendingPromises = [];\n    this.url = this.getDefaultUrl(config);\n    if (typeof config.hostname === 'string') {\n      this.hostname = config.hostname;\n    }\n    this.shutdown = this.shutdown.bind(this);\n    this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n    this._concurrencyLimit = typeof config.concurrencyLimit === 'number' ? config.concurrencyLimit : Infinity;\n    this.timeoutMillis = configureExporterTimeout(config.timeoutMillis);\n    // platform dependent\n    this.onInit(config);\n  }\n  /**\n   * Export items.\n   * @param items\n   * @param resultCallback\n   */\n  OTLPExporterBase.prototype.export = function (items, resultCallback) {\n    if (this._shutdownOnce.isCalled) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Exporter has been shutdown')\n      });\n      return;\n    }\n    if (this._sendingPromises.length >= this._concurrencyLimit) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: new Error('Concurrent export limit reached')\n      });\n      return;\n    }\n    this._export(items).then(function () {\n      resultCallback({\n        code: ExportResultCode.SUCCESS\n      });\n    }).catch(function (error) {\n      resultCallback({\n        code: ExportResultCode.FAILED,\n        error: error\n      });\n    });\n  };\n  OTLPExporterBase.prototype._export = function (items) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      try {\n        diag.debug('items to be sent', items);\n        _this.send(items, resolve, reject);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  };\n  /**\n   * Shutdown the exporter.\n   */\n  OTLPExporterBase.prototype.shutdown = function () {\n    return this._shutdownOnce.call();\n  };\n  /**\n   * Called by _shutdownOnce with BindOnceFuture\n   */\n  OTLPExporterBase.prototype._shutdown = function () {\n    diag.debug('shutdown started');\n    this.onShutdown();\n    return Promise.all(this._sendingPromises).then(function () {\n      /** ignore resolved values */\n    });\n  };\n  return OTLPExporterBase;\n}();\nexport { OTLPExporterBase };","map":{"version":3,"names":["diag","ExportResultCode","BindOnceFuture","configureExporterTimeout","OTLPExporterBase","config","_sendingPromises","url","getDefaultUrl","hostname","shutdown","bind","_shutdownOnce","_shutdown","_concurrencyLimit","concurrencyLimit","Infinity","timeoutMillis","onInit","prototype","export","items","resultCallback","isCalled","code","FAILED","error","Error","length","_export","then","SUCCESS","catch","_this","Promise","resolve","reject","debug","send","e","call","onShutdown","all"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/otlp-exporter-base/build/esm/OTLPExporterBase.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { ExportResultCode, BindOnceFuture } from '@opentelemetry/core';\nimport { configureExporterTimeout } from './util';\n/**\n * Collector Exporter abstract base class\n */\nvar OTLPExporterBase = /** @class */ (function () {\n    /**\n     * @param config\n     */\n    function OTLPExporterBase(config) {\n        if (config === void 0) { config = {}; }\n        this._sendingPromises = [];\n        this.url = this.getDefaultUrl(config);\n        if (typeof config.hostname === 'string') {\n            this.hostname = config.hostname;\n        }\n        this.shutdown = this.shutdown.bind(this);\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n        this._concurrencyLimit =\n            typeof config.concurrencyLimit === 'number'\n                ? config.concurrencyLimit\n                : Infinity;\n        this.timeoutMillis = configureExporterTimeout(config.timeoutMillis);\n        // platform dependent\n        this.onInit(config);\n    }\n    /**\n     * Export items.\n     * @param items\n     * @param resultCallback\n     */\n    OTLPExporterBase.prototype.export = function (items, resultCallback) {\n        if (this._shutdownOnce.isCalled) {\n            resultCallback({\n                code: ExportResultCode.FAILED,\n                error: new Error('Exporter has been shutdown'),\n            });\n            return;\n        }\n        if (this._sendingPromises.length >= this._concurrencyLimit) {\n            resultCallback({\n                code: ExportResultCode.FAILED,\n                error: new Error('Concurrent export limit reached'),\n            });\n            return;\n        }\n        this._export(items)\n            .then(function () {\n            resultCallback({ code: ExportResultCode.SUCCESS });\n        })\n            .catch(function (error) {\n            resultCallback({ code: ExportResultCode.FAILED, error: error });\n        });\n    };\n    OTLPExporterBase.prototype._export = function (items) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                diag.debug('items to be sent', items);\n                _this.send(items, resolve, reject);\n            }\n            catch (e) {\n                reject(e);\n            }\n        });\n    };\n    /**\n     * Shutdown the exporter.\n     */\n    OTLPExporterBase.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    /**\n     * Called by _shutdownOnce with BindOnceFuture\n     */\n    OTLPExporterBase.prototype._shutdown = function () {\n        diag.debug('shutdown started');\n        this.onShutdown();\n        return Promise.all(this._sendingPromises)\n            .then(function () {\n            /** ignore resolved values */\n        });\n    };\n    return OTLPExporterBase;\n}());\nexport { OTLPExporterBase };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}