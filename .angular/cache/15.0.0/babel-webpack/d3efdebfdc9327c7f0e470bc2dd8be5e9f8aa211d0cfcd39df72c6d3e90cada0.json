{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Parses the options and returns instrumentations, node plugins and\n *   web plugins\n * @param options\n */\nexport function parseInstrumentationOptions(options) {\n  if (options === void 0) {\n    options = [];\n  }\n  var instrumentations = [];\n  for (var i = 0, j = options.length; i < j; i++) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var option = options[i];\n    if (Array.isArray(option)) {\n      var results = parseInstrumentationOptions(option);\n      instrumentations = instrumentations.concat(results.instrumentations);\n    } else if (typeof option === 'function') {\n      instrumentations.push(new option());\n    } else if (option.instrumentationName) {\n      instrumentations.push(option);\n    }\n  }\n  return {\n    instrumentations: instrumentations\n  };\n}\n/**\n * Enable instrumentations\n * @param instrumentations\n * @param tracerProvider\n * @param meterProvider\n */\nexport function enableInstrumentations(instrumentations, tracerProvider, meterProvider) {\n  for (var i = 0, j = instrumentations.length; i < j; i++) {\n    var instrumentation = instrumentations[i];\n    if (tracerProvider) {\n      instrumentation.setTracerProvider(tracerProvider);\n    }\n    if (meterProvider) {\n      instrumentation.setMeterProvider(meterProvider);\n    }\n    // instrumentations have been already enabled during creation\n    // so enable only if user prevented that by setting enabled to false\n    // this is to prevent double enabling but when calling register all\n    // instrumentations should be now enabled\n    if (!instrumentation.getConfig().enabled) {\n      instrumentation.enable();\n    }\n  }\n}\n/**\n * Disable instrumentations\n * @param instrumentations\n */\nexport function disableInstrumentations(instrumentations) {\n  instrumentations.forEach(function (instrumentation) {\n    return instrumentation.disable();\n  });\n}\n//# sourceMappingURL=autoLoaderUtils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}