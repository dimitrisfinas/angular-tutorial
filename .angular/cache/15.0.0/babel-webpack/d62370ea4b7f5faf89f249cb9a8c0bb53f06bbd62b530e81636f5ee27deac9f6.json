{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { diag, metrics, trace } from '@opentelemetry/api';\nimport * as shimmer from 'shimmer';\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nvar InstrumentationAbstract = /** @class */function () {\n  function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this.instrumentationName = instrumentationName;\n    this.instrumentationVersion = instrumentationVersion;\n    /* Api to wrap instrumented method */\n    this._wrap = shimmer.wrap;\n    /* Api to unwrap instrumented methods */\n    this._unwrap = shimmer.unwrap;\n    /* Api to mass wrap instrumented method */\n    this._massWrap = shimmer.massWrap;\n    /* Api to mass unwrap instrumented methods */\n    this._massUnwrap = shimmer.massUnwrap;\n    this._config = __assign({\n      enabled: true\n    }, config);\n    this._diag = diag.createComponentLogger({\n      namespace: instrumentationName\n    });\n    this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n    this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n  }\n  Object.defineProperty(InstrumentationAbstract.prototype, \"meter\", {\n    /* Returns meter */\n    get: function () {\n      return this._meter;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets MeterProvider to this plugin\n   * @param meterProvider\n   */\n  InstrumentationAbstract.prototype.setMeterProvider = function (meterProvider) {\n    this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);\n  };\n  /* Returns InstrumentationConfig */\n  InstrumentationAbstract.prototype.getConfig = function () {\n    return this._config;\n  };\n  /**\n   * Sets InstrumentationConfig to this plugin\n   * @param InstrumentationConfig\n   */\n  InstrumentationAbstract.prototype.setConfig = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this._config = Object.assign({}, config);\n  };\n  /**\n   * Sets TraceProvider to this plugin\n   * @param tracerProvider\n   */\n  InstrumentationAbstract.prototype.setTracerProvider = function (tracerProvider) {\n    this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);\n  };\n  Object.defineProperty(InstrumentationAbstract.prototype, \"tracer\", {\n    /* Returns tracer */\n    get: function () {\n      return this._tracer;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return InstrumentationAbstract;\n}();\nexport { InstrumentationAbstract };\n//# sourceMappingURL=instrumentation.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}