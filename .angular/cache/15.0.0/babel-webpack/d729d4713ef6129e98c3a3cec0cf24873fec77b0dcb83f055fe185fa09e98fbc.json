{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OTLPGRPCExporterNodeBase = void 0;\nconst api_1 = require(\"@opentelemetry/api\");\nconst grpc_js_1 = require(\"@grpc/grpc-js\");\nconst core_1 = require(\"@opentelemetry/core\");\nconst util_1 = require(\"./util\");\nconst otlp_exporter_base_1 = require(\"@opentelemetry/otlp-exporter-base\");\n/**\n * OTLP Exporter abstract base class\n */\nclass OTLPGRPCExporterNodeBase extends otlp_exporter_base_1.OTLPExporterBase {\n  constructor(config = {}) {\n    super(config);\n    this.grpcQueue = [];\n    this.serviceClient = undefined;\n    if (config.headers) {\n      api_1.diag.warn('Headers cannot be set when using grpc');\n    }\n    const headers = core_1.baggageUtils.parseKeyPairsIntoRecord((0, core_1.getEnv)().OTEL_EXPORTER_OTLP_HEADERS);\n    this.metadata = config.metadata || new grpc_js_1.Metadata();\n    for (const [k, v] of Object.entries(headers)) {\n      this.metadata.set(k, v);\n    }\n    this.compression = (0, util_1.configureCompression)(config.compression);\n  }\n  _sendPromise(objects, onSuccess, onError) {\n    const promise = new Promise((resolve, reject) => {\n      this._send(this, objects, resolve, reject);\n    }).then(onSuccess, onError);\n    this._sendingPromises.push(promise);\n    const popPromise = () => {\n      const index = this._sendingPromises.indexOf(promise);\n      this._sendingPromises.splice(index, 1);\n    };\n    promise.then(popPromise, popPromise);\n  }\n  onInit(config) {\n    // defer to next tick and lazy load to avoid loading grpc too early\n    // and making this impossible to be instrumented\n    setImmediate(() => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const {\n        onInit\n      } = require('./util');\n      onInit(this, config);\n    });\n  }\n  send(objects, onSuccess, onError) {\n    if (this._shutdownOnce.isCalled) {\n      api_1.diag.debug('Shutdown already started. Cannot send objects');\n      return;\n    }\n    if (!this._send) {\n      // defer to next tick and lazy load to avoid loading grpc too early\n      // and making this impossible to be instrumented\n      setImmediate(() => {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const {\n          send\n        } = require('./util');\n        this._send = send;\n        this._sendPromise(objects, onSuccess, onError);\n      });\n    } else {\n      this._sendPromise(objects, onSuccess, onError);\n    }\n  }\n  onShutdown() {\n    if (this.serviceClient) {\n      this.serviceClient.close();\n    }\n  }\n}\nexports.OTLPGRPCExporterNodeBase = OTLPGRPCExporterNodeBase;","map":{"version":3,"names":["Object","defineProperty","exports","value","OTLPGRPCExporterNodeBase","api_1","require","grpc_js_1","core_1","util_1","otlp_exporter_base_1","OTLPExporterBase","constructor","config","grpcQueue","serviceClient","undefined","headers","diag","warn","baggageUtils","parseKeyPairsIntoRecord","getEnv","OTEL_EXPORTER_OTLP_HEADERS","metadata","Metadata","k","v","entries","set","compression","configureCompression","_sendPromise","objects","onSuccess","onError","promise","Promise","resolve","reject","_send","then","_sendingPromises","push","popPromise","index","indexOf","splice","onInit","setImmediate","send","_shutdownOnce","isCalled","debug","onShutdown","close"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/otlp-grpc-exporter-base/build/src/OTLPGRPCExporterNodeBase.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OTLPGRPCExporterNodeBase = void 0;\nconst api_1 = require(\"@opentelemetry/api\");\nconst grpc_js_1 = require(\"@grpc/grpc-js\");\nconst core_1 = require(\"@opentelemetry/core\");\nconst util_1 = require(\"./util\");\nconst otlp_exporter_base_1 = require(\"@opentelemetry/otlp-exporter-base\");\n/**\n * OTLP Exporter abstract base class\n */\nclass OTLPGRPCExporterNodeBase extends otlp_exporter_base_1.OTLPExporterBase {\n    constructor(config = {}) {\n        super(config);\n        this.grpcQueue = [];\n        this.serviceClient = undefined;\n        if (config.headers) {\n            api_1.diag.warn('Headers cannot be set when using grpc');\n        }\n        const headers = core_1.baggageUtils.parseKeyPairsIntoRecord((0, core_1.getEnv)().OTEL_EXPORTER_OTLP_HEADERS);\n        this.metadata = config.metadata || new grpc_js_1.Metadata();\n        for (const [k, v] of Object.entries(headers)) {\n            this.metadata.set(k, v);\n        }\n        this.compression = (0, util_1.configureCompression)(config.compression);\n    }\n    _sendPromise(objects, onSuccess, onError) {\n        const promise = new Promise((resolve, reject) => {\n            this._send(this, objects, resolve, reject);\n        })\n            .then(onSuccess, onError);\n        this._sendingPromises.push(promise);\n        const popPromise = () => {\n            const index = this._sendingPromises.indexOf(promise);\n            this._sendingPromises.splice(index, 1);\n        };\n        promise.then(popPromise, popPromise);\n    }\n    onInit(config) {\n        // defer to next tick and lazy load to avoid loading grpc too early\n        // and making this impossible to be instrumented\n        setImmediate(() => {\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\n            const { onInit } = require('./util');\n            onInit(this, config);\n        });\n    }\n    send(objects, onSuccess, onError) {\n        if (this._shutdownOnce.isCalled) {\n            api_1.diag.debug('Shutdown already started. Cannot send objects');\n            return;\n        }\n        if (!this._send) {\n            // defer to next tick and lazy load to avoid loading grpc too early\n            // and making this impossible to be instrumented\n            setImmediate(() => {\n                // eslint-disable-next-line @typescript-eslint/no-var-requires\n                const { send } = require('./util');\n                this._send = send;\n                this._sendPromise(objects, onSuccess, onError);\n            });\n        }\n        else {\n            this._sendPromise(objects, onSuccess, onError);\n        }\n    }\n    onShutdown() {\n        if (this.serviceClient) {\n            this.serviceClient.close();\n        }\n    }\n}\nexports.OTLPGRPCExporterNodeBase = OTLPGRPCExporterNodeBase;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}