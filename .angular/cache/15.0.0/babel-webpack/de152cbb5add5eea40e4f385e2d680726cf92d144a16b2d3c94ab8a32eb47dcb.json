{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport * as api from '@opentelemetry/api';\nimport { hrTimeDuration, isAttributeValue, isTimeInput, otperformance, sanitizeAttributes, timeInputToHrTime } from '@opentelemetry/core';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { ExceptionEventName } from './enums';\n/**\n * This class represents a span.\n */\nvar Span = /** @class */function () {\n  /**\n   * Constructs a new Span instance.\n   *\n   * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n   * */\n  function Span(parentTracer, context, spanName, spanContext, kind, parentSpanId, links, startTime, clock) {\n    if (links === void 0) {\n      links = [];\n    }\n    if (clock === void 0) {\n      clock = otperformance;\n    }\n    this.attributes = {};\n    this.links = [];\n    this.events = [];\n    this.status = {\n      code: api.SpanStatusCode.UNSET\n    };\n    this.endTime = [0, 0];\n    this._ended = false;\n    this._duration = [-1, -1];\n    this._clock = clock;\n    this.name = spanName;\n    this._spanContext = spanContext;\n    this.parentSpanId = parentSpanId;\n    this.kind = kind;\n    this.links = links;\n    this.startTime = timeInputToHrTime(startTime !== null && startTime !== void 0 ? startTime : clock.now());\n    this.resource = parentTracer.resource;\n    this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n    this._spanLimits = parentTracer.getSpanLimits();\n    this._spanProcessor = parentTracer.getActiveSpanProcessor();\n    this._spanProcessor.onStart(this, context);\n    this._attributeValueLengthLimit = this._spanLimits.attributeValueLengthLimit || 0;\n  }\n  Span.prototype.spanContext = function () {\n    return this._spanContext;\n  };\n  Span.prototype.setAttribute = function (key, value) {\n    if (value == null || this._isSpanEnded()) return this;\n    if (key.length === 0) {\n      api.diag.warn(\"Invalid attribute key: \" + key);\n      return this;\n    }\n    if (!isAttributeValue(value)) {\n      api.diag.warn(\"Invalid attribute value set for key: \" + key);\n      return this;\n    }\n    if (Object.keys(this.attributes).length >= this._spanLimits.attributeCountLimit && !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n      return this;\n    }\n    this.attributes[key] = this._truncateToSize(value);\n    return this;\n  };\n  Span.prototype.setAttributes = function (attributes) {\n    var e_1, _a;\n    try {\n      for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n          k = _d[0],\n          v = _d[1];\n        this.setAttribute(k, v);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return this;\n  };\n  /**\n   *\n   * @param name Span Name\n   * @param [attributesOrStartTime] Span attributes or start time\n   *     if type is {@type TimeInput} and 3rd param is undefined\n   * @param [startTime] Specified start time for the event\n   */\n  Span.prototype.addEvent = function (name, attributesOrStartTime, startTime) {\n    if (this._isSpanEnded()) return this;\n    if (this._spanLimits.eventCountLimit === 0) {\n      api.diag.warn('No events allowed.');\n      return this;\n    }\n    if (this.events.length >= this._spanLimits.eventCountLimit) {\n      api.diag.warn('Dropping extra events.');\n      this.events.shift();\n    }\n    if (isTimeInput(attributesOrStartTime)) {\n      if (typeof startTime === 'undefined') {\n        startTime = attributesOrStartTime;\n      }\n      attributesOrStartTime = undefined;\n    }\n    if (typeof startTime === 'undefined') {\n      startTime = this._clock.now();\n    }\n    var attributes = sanitizeAttributes(attributesOrStartTime);\n    this.events.push({\n      name: name,\n      attributes: attributes,\n      time: timeInputToHrTime(startTime)\n    });\n    return this;\n  };\n  Span.prototype.setStatus = function (status) {\n    if (this._isSpanEnded()) return this;\n    this.status = status;\n    return this;\n  };\n  Span.prototype.updateName = function (name) {\n    if (this._isSpanEnded()) return this;\n    this.name = name;\n    return this;\n  };\n  Span.prototype.end = function (endTime) {\n    if (this._isSpanEnded()) {\n      api.diag.error('You can only call end() on a span once.');\n      return;\n    }\n    this._ended = true;\n    this.endTime = timeInputToHrTime(endTime !== null && endTime !== void 0 ? endTime : this._clock.now());\n    this._duration = hrTimeDuration(this.startTime, this.endTime);\n    if (this._duration[0] < 0) {\n      api.diag.warn('Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.', this.startTime, this.endTime);\n      this.endTime = this.startTime.slice();\n      this._duration = [0, 0];\n    }\n    this._spanProcessor.onEnd(this);\n  };\n  Span.prototype.isRecording = function () {\n    return this._ended === false;\n  };\n  Span.prototype.recordException = function (exception, time) {\n    if (time === void 0) {\n      time = this._clock.now();\n    }\n    var attributes = {};\n    if (typeof exception === 'string') {\n      attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception;\n    } else if (exception) {\n      if (exception.code) {\n        attributes[SemanticAttributes.EXCEPTION_TYPE] = exception.code.toString();\n      } else if (exception.name) {\n        attributes[SemanticAttributes.EXCEPTION_TYPE] = exception.name;\n      }\n      if (exception.message) {\n        attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception.message;\n      }\n      if (exception.stack) {\n        attributes[SemanticAttributes.EXCEPTION_STACKTRACE] = exception.stack;\n      }\n    }\n    // these are minimum requirements from spec\n    if (attributes[SemanticAttributes.EXCEPTION_TYPE] || attributes[SemanticAttributes.EXCEPTION_MESSAGE]) {\n      this.addEvent(ExceptionEventName, attributes, time);\n    } else {\n      api.diag.warn(\"Failed to record an exception \" + exception);\n    }\n  };\n  Object.defineProperty(Span.prototype, \"duration\", {\n    get: function () {\n      return this._duration;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Span.prototype, \"ended\", {\n    get: function () {\n      return this._ended;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Span.prototype._isSpanEnded = function () {\n    if (this._ended) {\n      api.diag.warn(\"Can not execute the operation on ended Span {traceId: \" + this._spanContext.traceId + \", spanId: \" + this._spanContext.spanId + \"}\");\n    }\n    return this._ended;\n  };\n  // Utility function to truncate given value within size\n  // for value type of string, will truncate to given limit\n  // for type of non-string, will return same value\n  Span.prototype._truncateToLimitUtil = function (value, limit) {\n    if (value.length <= limit) {\n      return value;\n    }\n    return value.substr(0, limit);\n  };\n  /**\n   * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n   * return string with trucated to {@code attributeValueLengthLimit} characters\n   *\n   * If the given attribute value is array of strings then\n   * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n   *\n   * Otherwise return same Attribute {@code value}\n   *\n   * @param value Attribute value\n   * @returns truncated attribute value if required, otherwise same value\n   */\n  Span.prototype._truncateToSize = function (value) {\n    var _this = this;\n    var limit = this._attributeValueLengthLimit;\n    // Check limit\n    if (limit <= 0) {\n      // Negative values are invalid, so do not truncate\n      api.diag.warn(\"Attribute value limit must be positive, got \" + limit);\n      return value;\n    }\n    // String\n    if (typeof value === 'string') {\n      return this._truncateToLimitUtil(value, limit);\n    }\n    // Array of strings\n    if (Array.isArray(value)) {\n      return value.map(function (val) {\n        return typeof val === 'string' ? _this._truncateToLimitUtil(val, limit) : val;\n      });\n    }\n    // Other types, no need to apply value length limit\n    return value;\n  };\n  return Span;\n}();\nexport { Span };","map":{"version":3,"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","ar","e","push","error","api","hrTimeDuration","isAttributeValue","isTimeInput","otperformance","sanitizeAttributes","timeInputToHrTime","SemanticAttributes","ExceptionEventName","Span","parentTracer","context","spanName","spanContext","kind","parentSpanId","links","startTime","clock","attributes","events","status","code","SpanStatusCode","UNSET","endTime","_ended","_duration","_clock","name","_spanContext","now","resource","instrumentationLibrary","_spanLimits","getSpanLimits","_spanProcessor","getActiveSpanProcessor","onStart","_attributeValueLengthLimit","attributeValueLengthLimit","prototype","setAttribute","key","_isSpanEnded","diag","warn","Object","keys","attributeCountLimit","hasOwnProperty","_truncateToSize","setAttributes","e_1","_a","_b","entries","_c","_d","k","v","e_1_1","return","addEvent","attributesOrStartTime","eventCountLimit","shift","undefined","time","setStatus","updateName","end","slice","onEnd","isRecording","recordException","exception","EXCEPTION_MESSAGE","EXCEPTION_TYPE","toString","message","stack","EXCEPTION_STACKTRACE","defineProperty","get","enumerable","configurable","traceId","spanId","_truncateToLimitUtil","limit","substr","_this","Array","isArray","map","val"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport * as api from '@opentelemetry/api';\nimport { hrTimeDuration, isAttributeValue, isTimeInput, otperformance, sanitizeAttributes, timeInputToHrTime } from '@opentelemetry/core';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { ExceptionEventName } from './enums';\n/**\n * This class represents a span.\n */\nvar Span = /** @class */ (function () {\n    /**\n     * Constructs a new Span instance.\n     *\n     * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n     * */\n    function Span(parentTracer, context, spanName, spanContext, kind, parentSpanId, links, startTime, clock) {\n        if (links === void 0) { links = []; }\n        if (clock === void 0) { clock = otperformance; }\n        this.attributes = {};\n        this.links = [];\n        this.events = [];\n        this.status = {\n            code: api.SpanStatusCode.UNSET,\n        };\n        this.endTime = [0, 0];\n        this._ended = false;\n        this._duration = [-1, -1];\n        this._clock = clock;\n        this.name = spanName;\n        this._spanContext = spanContext;\n        this.parentSpanId = parentSpanId;\n        this.kind = kind;\n        this.links = links;\n        this.startTime = timeInputToHrTime(startTime !== null && startTime !== void 0 ? startTime : clock.now());\n        this.resource = parentTracer.resource;\n        this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n        this._spanLimits = parentTracer.getSpanLimits();\n        this._spanProcessor = parentTracer.getActiveSpanProcessor();\n        this._spanProcessor.onStart(this, context);\n        this._attributeValueLengthLimit = this._spanLimits.attributeValueLengthLimit || 0;\n    }\n    Span.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    Span.prototype.setAttribute = function (key, value) {\n        if (value == null || this._isSpanEnded())\n            return this;\n        if (key.length === 0) {\n            api.diag.warn(\"Invalid attribute key: \" + key);\n            return this;\n        }\n        if (!isAttributeValue(value)) {\n            api.diag.warn(\"Invalid attribute value set for key: \" + key);\n            return this;\n        }\n        if (Object.keys(this.attributes).length >=\n            this._spanLimits.attributeCountLimit &&\n            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n            return this;\n        }\n        this.attributes[key] = this._truncateToSize(value);\n        return this;\n    };\n    Span.prototype.setAttributes = function (attributes) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), k = _d[0], v = _d[1];\n                this.setAttribute(k, v);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return this;\n    };\n    /**\n     *\n     * @param name Span Name\n     * @param [attributesOrStartTime] Span attributes or start time\n     *     if type is {@type TimeInput} and 3rd param is undefined\n     * @param [startTime] Specified start time for the event\n     */\n    Span.prototype.addEvent = function (name, attributesOrStartTime, startTime) {\n        if (this._isSpanEnded())\n            return this;\n        if (this._spanLimits.eventCountLimit === 0) {\n            api.diag.warn('No events allowed.');\n            return this;\n        }\n        if (this.events.length >= this._spanLimits.eventCountLimit) {\n            api.diag.warn('Dropping extra events.');\n            this.events.shift();\n        }\n        if (isTimeInput(attributesOrStartTime)) {\n            if (typeof startTime === 'undefined') {\n                startTime = attributesOrStartTime;\n            }\n            attributesOrStartTime = undefined;\n        }\n        if (typeof startTime === 'undefined') {\n            startTime = this._clock.now();\n        }\n        var attributes = sanitizeAttributes(attributesOrStartTime);\n        this.events.push({\n            name: name,\n            attributes: attributes,\n            time: timeInputToHrTime(startTime),\n        });\n        return this;\n    };\n    Span.prototype.setStatus = function (status) {\n        if (this._isSpanEnded())\n            return this;\n        this.status = status;\n        return this;\n    };\n    Span.prototype.updateName = function (name) {\n        if (this._isSpanEnded())\n            return this;\n        this.name = name;\n        return this;\n    };\n    Span.prototype.end = function (endTime) {\n        if (this._isSpanEnded()) {\n            api.diag.error('You can only call end() on a span once.');\n            return;\n        }\n        this._ended = true;\n        this.endTime = timeInputToHrTime(endTime !== null && endTime !== void 0 ? endTime : this._clock.now());\n        this._duration = hrTimeDuration(this.startTime, this.endTime);\n        if (this._duration[0] < 0) {\n            api.diag.warn('Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.', this.startTime, this.endTime);\n            this.endTime = this.startTime.slice();\n            this._duration = [0, 0];\n        }\n        this._spanProcessor.onEnd(this);\n    };\n    Span.prototype.isRecording = function () {\n        return this._ended === false;\n    };\n    Span.prototype.recordException = function (exception, time) {\n        if (time === void 0) { time = this._clock.now(); }\n        var attributes = {};\n        if (typeof exception === 'string') {\n            attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception;\n        }\n        else if (exception) {\n            if (exception.code) {\n                attributes[SemanticAttributes.EXCEPTION_TYPE] = exception.code.toString();\n            }\n            else if (exception.name) {\n                attributes[SemanticAttributes.EXCEPTION_TYPE] = exception.name;\n            }\n            if (exception.message) {\n                attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception.message;\n            }\n            if (exception.stack) {\n                attributes[SemanticAttributes.EXCEPTION_STACKTRACE] = exception.stack;\n            }\n        }\n        // these are minimum requirements from spec\n        if (attributes[SemanticAttributes.EXCEPTION_TYPE] ||\n            attributes[SemanticAttributes.EXCEPTION_MESSAGE]) {\n            this.addEvent(ExceptionEventName, attributes, time);\n        }\n        else {\n            api.diag.warn(\"Failed to record an exception \" + exception);\n        }\n    };\n    Object.defineProperty(Span.prototype, \"duration\", {\n        get: function () {\n            return this._duration;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"ended\", {\n        get: function () {\n            return this._ended;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Span.prototype._isSpanEnded = function () {\n        if (this._ended) {\n            api.diag.warn(\"Can not execute the operation on ended Span {traceId: \" + this._spanContext.traceId + \", spanId: \" + this._spanContext.spanId + \"}\");\n        }\n        return this._ended;\n    };\n    // Utility function to truncate given value within size\n    // for value type of string, will truncate to given limit\n    // for type of non-string, will return same value\n    Span.prototype._truncateToLimitUtil = function (value, limit) {\n        if (value.length <= limit) {\n            return value;\n        }\n        return value.substr(0, limit);\n    };\n    /**\n     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n     * return string with trucated to {@code attributeValueLengthLimit} characters\n     *\n     * If the given attribute value is array of strings then\n     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n     *\n     * Otherwise return same Attribute {@code value}\n     *\n     * @param value Attribute value\n     * @returns truncated attribute value if required, otherwise same value\n     */\n    Span.prototype._truncateToSize = function (value) {\n        var _this = this;\n        var limit = this._attributeValueLengthLimit;\n        // Check limit\n        if (limit <= 0) {\n            // Negative values are invalid, so do not truncate\n            api.diag.warn(\"Attribute value limit must be positive, got \" + limit);\n            return value;\n        }\n        // String\n        if (typeof value === 'string') {\n            return this._truncateToLimitUtil(value, limit);\n        }\n        // Array of strings\n        if (Array.isArray(value)) {\n            return value.map(function (val) { return typeof val === 'string' ? _this._truncateToLimitUtil(val, limit) : val; });\n        }\n        // Other types, no need to apply value length limit\n        return value;\n    };\n    return Span;\n}());\nexport { Span };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}