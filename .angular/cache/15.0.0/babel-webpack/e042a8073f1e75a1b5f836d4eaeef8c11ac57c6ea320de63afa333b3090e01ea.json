{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.configureCompression = exports.GrpcCompressionAlgorithm = exports.useSecureConnection = exports.configureSecurity = exports.validateAndNormalizeUrl = exports.send = exports.onInit = exports.DEFAULT_COLLECTOR_URL = void 0;\nconst grpc = require(\"@grpc/grpc-js\");\nconst protoLoader = require(\"@grpc/proto-loader\");\nconst api_1 = require(\"@opentelemetry/api\");\nconst core_1 = require(\"@opentelemetry/core\");\nconst path = require(\"path\");\nconst url_1 = require(\"url\");\nconst fs = require(\"fs\");\nconst types_1 = require(\"./types\");\nconst otlp_exporter_base_1 = require(\"@opentelemetry/otlp-exporter-base\");\nexports.DEFAULT_COLLECTOR_URL = 'http://localhost:4317';\nfunction onInit(collector, config) {\n  collector.grpcQueue = [];\n  const credentials = configureSecurity(config.credentials, collector.getUrlFromConfig(config));\n  const includeDirs = [path.resolve(__dirname, '..', 'protos')];\n  protoLoader.load(collector.getServiceProtoPath(), {\n    keepCase: false,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n    includeDirs\n  }).then(packageDefinition => {\n    const packageObject = grpc.loadPackageDefinition(packageDefinition);\n    const options = {\n      'grpc.default_compression_algorithm': collector.compression\n    };\n    if (collector.getServiceClientType() === types_1.ServiceClientType.SPANS) {\n      collector.serviceClient = new packageObject.opentelemetry.proto.collector.trace.v1.TraceService(collector.url, credentials, options);\n    } else {\n      collector.serviceClient = new packageObject.opentelemetry.proto.collector.metrics.v1.MetricsService(collector.url, credentials, options);\n    }\n    if (collector.grpcQueue.length > 0) {\n      const queue = collector.grpcQueue.splice(0);\n      queue.forEach(item => {\n        collector.send(item.objects, item.onSuccess, item.onError);\n      });\n    }\n  }).catch(err => {\n    (0, core_1.globalErrorHandler)(err);\n  });\n}\nexports.onInit = onInit;\nfunction send(collector, objects, onSuccess, onError) {\n  if (collector.serviceClient) {\n    const serviceRequest = collector.convert(objects);\n    const deadline = Date.now() + collector.timeoutMillis;\n    collector.serviceClient.export(serviceRequest, collector.metadata || new grpc.Metadata(), {\n      deadline: deadline\n    }, err => {\n      if (err) {\n        api_1.diag.error('Service request', serviceRequest);\n        onError(err);\n      } else {\n        api_1.diag.debug('Objects sent');\n        onSuccess();\n      }\n    });\n  } else {\n    collector.grpcQueue.push({\n      objects,\n      onSuccess,\n      onError\n    });\n  }\n}\nexports.send = send;\nfunction validateAndNormalizeUrl(url) {\n  var _a;\n  const hasProtocol = url.match(/^([\\w]{1,8}):\\/\\//);\n  if (!hasProtocol) {\n    url = `https://${url}`;\n  }\n  const target = new url_1.URL(url);\n  if (target.pathname && target.pathname !== '/') {\n    api_1.diag.warn('URL path should not be set when using grpc, the path part of the URL will be ignored.');\n  }\n  if (target.protocol !== '' && !((_a = target.protocol) === null || _a === void 0 ? void 0 : _a.match(/^(http)s?:$/))) {\n    api_1.diag.warn('URL protocol should be http(s)://. Using http://.');\n  }\n  return target.host;\n}\nexports.validateAndNormalizeUrl = validateAndNormalizeUrl;\nfunction configureSecurity(credentials, endpoint) {\n  let insecure;\n  if (credentials) {\n    return credentials;\n  } else if (endpoint.startsWith('https://')) {\n    insecure = false;\n  } else if (endpoint.startsWith('http://') || endpoint === exports.DEFAULT_COLLECTOR_URL) {\n    insecure = true;\n  } else {\n    insecure = getSecurityFromEnv();\n  }\n  if (insecure) {\n    return grpc.credentials.createInsecure();\n  } else {\n    return useSecureConnection();\n  }\n}\nexports.configureSecurity = configureSecurity;\nfunction getSecurityFromEnv() {\n  const definedInsecure = (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_INSECURE || (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_INSECURE;\n  if (definedInsecure) {\n    return definedInsecure.toLowerCase() === 'true';\n  } else {\n    return false;\n  }\n}\nfunction useSecureConnection() {\n  const rootCertPath = retrieveRootCert();\n  const privateKeyPath = retrievePrivateKey();\n  const certChainPath = retrieveCertChain();\n  return grpc.credentials.createSsl(rootCertPath, privateKeyPath, certChainPath);\n}\nexports.useSecureConnection = useSecureConnection;\nfunction retrieveRootCert() {\n  const rootCertificate = (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE || (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_CERTIFICATE;\n  if (rootCertificate) {\n    try {\n      return fs.readFileSync(path.resolve(process.cwd(), rootCertificate));\n    } catch (_a) {\n      api_1.diag.warn('Failed to read root certificate file');\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\nfunction retrievePrivateKey() {\n  const clientKey = (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY || (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_CLIENT_KEY;\n  if (clientKey) {\n    try {\n      return fs.readFileSync(path.resolve(process.cwd(), clientKey));\n    } catch (_a) {\n      api_1.diag.warn('Failed to read client certificate private key file');\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\nfunction retrieveCertChain() {\n  const clientChain = (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE || (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE;\n  if (clientChain) {\n    try {\n      return fs.readFileSync(path.resolve(process.cwd(), clientChain));\n    } catch (_a) {\n      api_1.diag.warn('Failed to read client certificate chain file');\n      return undefined;\n    }\n  } else {\n    return undefined;\n  }\n}\nfunction toGrpcCompression(compression) {\n  if (compression === otlp_exporter_base_1.CompressionAlgorithm.NONE) return GrpcCompressionAlgorithm.NONE;else if (compression === otlp_exporter_base_1.CompressionAlgorithm.GZIP) return GrpcCompressionAlgorithm.GZIP;\n  return GrpcCompressionAlgorithm.NONE;\n}\n/**\n * These values are defined by grpc client\n */\nvar GrpcCompressionAlgorithm;\n(function (GrpcCompressionAlgorithm) {\n  GrpcCompressionAlgorithm[GrpcCompressionAlgorithm[\"NONE\"] = 0] = \"NONE\";\n  GrpcCompressionAlgorithm[GrpcCompressionAlgorithm[\"GZIP\"] = 2] = \"GZIP\";\n})(GrpcCompressionAlgorithm = exports.GrpcCompressionAlgorithm || (exports.GrpcCompressionAlgorithm = {}));\nfunction configureCompression(compression) {\n  if (compression) {\n    return toGrpcCompression(compression);\n  } else {\n    const definedCompression = (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_COMPRESSION || (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_COMPRESSION;\n    return definedCompression === 'gzip' ? GrpcCompressionAlgorithm.GZIP : GrpcCompressionAlgorithm.NONE;\n  }\n}\nexports.configureCompression = configureCompression;","map":{"version":3,"names":["Object","defineProperty","exports","value","configureCompression","GrpcCompressionAlgorithm","useSecureConnection","configureSecurity","validateAndNormalizeUrl","send","onInit","DEFAULT_COLLECTOR_URL","grpc","require","protoLoader","api_1","core_1","path","url_1","fs","types_1","otlp_exporter_base_1","collector","config","grpcQueue","credentials","getUrlFromConfig","includeDirs","resolve","__dirname","load","getServiceProtoPath","keepCase","longs","String","enums","defaults","oneofs","then","packageDefinition","packageObject","loadPackageDefinition","options","compression","getServiceClientType","ServiceClientType","SPANS","serviceClient","opentelemetry","proto","trace","v1","TraceService","url","metrics","MetricsService","length","queue","splice","forEach","item","objects","onSuccess","onError","catch","err","globalErrorHandler","serviceRequest","convert","deadline","Date","now","timeoutMillis","export","metadata","Metadata","diag","error","debug","push","_a","hasProtocol","match","target","URL","pathname","warn","protocol","host","endpoint","insecure","startsWith","getSecurityFromEnv","createInsecure","definedInsecure","getEnv","OTEL_EXPORTER_OTLP_TRACES_INSECURE","OTEL_EXPORTER_OTLP_INSECURE","toLowerCase","rootCertPath","retrieveRootCert","privateKeyPath","retrievePrivateKey","certChainPath","retrieveCertChain","createSsl","rootCertificate","OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE","OTEL_EXPORTER_OTLP_CERTIFICATE","readFileSync","process","cwd","undefined","clientKey","OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY","OTEL_EXPORTER_OTLP_CLIENT_KEY","clientChain","OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE","toGrpcCompression","CompressionAlgorithm","NONE","GZIP","definedCompression","OTEL_EXPORTER_OTLP_TRACES_COMPRESSION","OTEL_EXPORTER_OTLP_COMPRESSION"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/otlp-grpc-exporter-base/build/src/util.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.configureCompression = exports.GrpcCompressionAlgorithm = exports.useSecureConnection = exports.configureSecurity = exports.validateAndNormalizeUrl = exports.send = exports.onInit = exports.DEFAULT_COLLECTOR_URL = void 0;\nconst grpc = require(\"@grpc/grpc-js\");\nconst protoLoader = require(\"@grpc/proto-loader\");\nconst api_1 = require(\"@opentelemetry/api\");\nconst core_1 = require(\"@opentelemetry/core\");\nconst path = require(\"path\");\nconst url_1 = require(\"url\");\nconst fs = require(\"fs\");\nconst types_1 = require(\"./types\");\nconst otlp_exporter_base_1 = require(\"@opentelemetry/otlp-exporter-base\");\nexports.DEFAULT_COLLECTOR_URL = 'http://localhost:4317';\nfunction onInit(collector, config) {\n    collector.grpcQueue = [];\n    const credentials = configureSecurity(config.credentials, collector.getUrlFromConfig(config));\n    const includeDirs = [path.resolve(__dirname, '..', 'protos')];\n    protoLoader\n        .load(collector.getServiceProtoPath(), {\n        keepCase: false,\n        longs: String,\n        enums: String,\n        defaults: true,\n        oneofs: true,\n        includeDirs,\n    })\n        .then(packageDefinition => {\n        const packageObject = grpc.loadPackageDefinition(packageDefinition);\n        const options = { 'grpc.default_compression_algorithm': collector.compression };\n        if (collector.getServiceClientType() === types_1.ServiceClientType.SPANS) {\n            collector.serviceClient =\n                new packageObject.opentelemetry.proto.collector.trace.v1.TraceService(collector.url, credentials, options);\n        }\n        else {\n            collector.serviceClient =\n                new packageObject.opentelemetry.proto.collector.metrics.v1.MetricsService(collector.url, credentials, options);\n        }\n        if (collector.grpcQueue.length > 0) {\n            const queue = collector.grpcQueue.splice(0);\n            queue.forEach((item) => {\n                collector.send(item.objects, item.onSuccess, item.onError);\n            });\n        }\n    })\n        .catch(err => {\n        (0, core_1.globalErrorHandler)(err);\n    });\n}\nexports.onInit = onInit;\nfunction send(collector, objects, onSuccess, onError) {\n    if (collector.serviceClient) {\n        const serviceRequest = collector.convert(objects);\n        const deadline = Date.now() + collector.timeoutMillis;\n        collector.serviceClient.export(serviceRequest, collector.metadata || new grpc.Metadata(), { deadline: deadline }, (err) => {\n            if (err) {\n                api_1.diag.error('Service request', serviceRequest);\n                onError(err);\n            }\n            else {\n                api_1.diag.debug('Objects sent');\n                onSuccess();\n            }\n        });\n    }\n    else {\n        collector.grpcQueue.push({\n            objects,\n            onSuccess,\n            onError,\n        });\n    }\n}\nexports.send = send;\nfunction validateAndNormalizeUrl(url) {\n    var _a;\n    const hasProtocol = url.match(/^([\\w]{1,8}):\\/\\//);\n    if (!hasProtocol) {\n        url = `https://${url}`;\n    }\n    const target = new url_1.URL(url);\n    if (target.pathname && target.pathname !== '/') {\n        api_1.diag.warn('URL path should not be set when using grpc, the path part of the URL will be ignored.');\n    }\n    if (target.protocol !== '' && !((_a = target.protocol) === null || _a === void 0 ? void 0 : _a.match(/^(http)s?:$/))) {\n        api_1.diag.warn('URL protocol should be http(s)://. Using http://.');\n    }\n    return target.host;\n}\nexports.validateAndNormalizeUrl = validateAndNormalizeUrl;\nfunction configureSecurity(credentials, endpoint) {\n    let insecure;\n    if (credentials) {\n        return credentials;\n    }\n    else if (endpoint.startsWith('https://')) {\n        insecure = false;\n    }\n    else if (endpoint.startsWith('http://') || endpoint === exports.DEFAULT_COLLECTOR_URL) {\n        insecure = true;\n    }\n    else {\n        insecure = getSecurityFromEnv();\n    }\n    if (insecure) {\n        return grpc.credentials.createInsecure();\n    }\n    else {\n        return useSecureConnection();\n    }\n}\nexports.configureSecurity = configureSecurity;\nfunction getSecurityFromEnv() {\n    const definedInsecure = (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_INSECURE ||\n        (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_INSECURE;\n    if (definedInsecure) {\n        return definedInsecure.toLowerCase() === 'true';\n    }\n    else {\n        return false;\n    }\n}\nfunction useSecureConnection() {\n    const rootCertPath = retrieveRootCert();\n    const privateKeyPath = retrievePrivateKey();\n    const certChainPath = retrieveCertChain();\n    return grpc.credentials.createSsl(rootCertPath, privateKeyPath, certChainPath);\n}\nexports.useSecureConnection = useSecureConnection;\nfunction retrieveRootCert() {\n    const rootCertificate = (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE ||\n        (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_CERTIFICATE;\n    if (rootCertificate) {\n        try {\n            return fs.readFileSync(path.resolve(process.cwd(), rootCertificate));\n        }\n        catch (_a) {\n            api_1.diag.warn('Failed to read root certificate file');\n            return undefined;\n        }\n    }\n    else {\n        return undefined;\n    }\n}\nfunction retrievePrivateKey() {\n    const clientKey = (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY ||\n        (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_CLIENT_KEY;\n    if (clientKey) {\n        try {\n            return fs.readFileSync(path.resolve(process.cwd(), clientKey));\n        }\n        catch (_a) {\n            api_1.diag.warn('Failed to read client certificate private key file');\n            return undefined;\n        }\n    }\n    else {\n        return undefined;\n    }\n}\nfunction retrieveCertChain() {\n    const clientChain = (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE ||\n        (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE;\n    if (clientChain) {\n        try {\n            return fs.readFileSync(path.resolve(process.cwd(), clientChain));\n        }\n        catch (_a) {\n            api_1.diag.warn('Failed to read client certificate chain file');\n            return undefined;\n        }\n    }\n    else {\n        return undefined;\n    }\n}\nfunction toGrpcCompression(compression) {\n    if (compression === otlp_exporter_base_1.CompressionAlgorithm.NONE)\n        return GrpcCompressionAlgorithm.NONE;\n    else if (compression === otlp_exporter_base_1.CompressionAlgorithm.GZIP)\n        return GrpcCompressionAlgorithm.GZIP;\n    return GrpcCompressionAlgorithm.NONE;\n}\n/**\n * These values are defined by grpc client\n */\nvar GrpcCompressionAlgorithm;\n(function (GrpcCompressionAlgorithm) {\n    GrpcCompressionAlgorithm[GrpcCompressionAlgorithm[\"NONE\"] = 0] = \"NONE\";\n    GrpcCompressionAlgorithm[GrpcCompressionAlgorithm[\"GZIP\"] = 2] = \"GZIP\";\n})(GrpcCompressionAlgorithm = exports.GrpcCompressionAlgorithm || (exports.GrpcCompressionAlgorithm = {}));\nfunction configureCompression(compression) {\n    if (compression) {\n        return toGrpcCompression(compression);\n    }\n    else {\n        const definedCompression = (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_TRACES_COMPRESSION || (0, core_1.getEnv)().OTEL_EXPORTER_OTLP_COMPRESSION;\n        return definedCompression === 'gzip' ? GrpcCompressionAlgorithm.GZIP : GrpcCompressionAlgorithm.NONE;\n    }\n}\nexports.configureCompression = configureCompression;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}