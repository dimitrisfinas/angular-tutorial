{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER_PROVIDER } from '../NoopMeterProvider';\nimport { API_BACKWARDS_COMPATIBILITY_VERSION, GLOBAL_METRICS_API_KEY, makeGetter, _global } from './global-utils';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */function () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function MetricsAPI() {}\n  /** Get the singleton instance of the Metrics API */\n  MetricsAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new MetricsAPI();\n    }\n    return this._instance;\n  };\n  /**\n   * Set the current global meter. Returns the initialized global meter provider.\n   */\n  MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n    if (_global[GLOBAL_METRICS_API_KEY]) {\n      // global meter provider has already been set\n      return this.getMeterProvider();\n    }\n    _global[GLOBAL_METRICS_API_KEY] = makeGetter(API_BACKWARDS_COMPATIBILITY_VERSION, provider, NOOP_METER_PROVIDER);\n    return provider;\n  };\n  /**\n   * Returns the global meter provider.\n   */\n  MetricsAPI.prototype.getMeterProvider = function () {\n    var _a, _b;\n    return (_b = (_a = _global[GLOBAL_METRICS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(_global, API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NOOP_METER_PROVIDER;\n  };\n  /**\n   * Returns a meter from the global meter provider.\n   */\n  MetricsAPI.prototype.getMeter = function (name, version, options) {\n    return this.getMeterProvider().getMeter(name, version, options);\n  };\n  /** Remove the global meter provider */\n  MetricsAPI.prototype.disable = function () {\n    delete _global[GLOBAL_METRICS_API_KEY];\n  };\n  return MetricsAPI;\n}();\nexport { MetricsAPI };","map":{"version":3,"names":["NOOP_METER_PROVIDER","API_BACKWARDS_COMPATIBILITY_VERSION","GLOBAL_METRICS_API_KEY","makeGetter","_global","MetricsAPI","getInstance","_instance","prototype","setGlobalMeterProvider","provider","getMeterProvider","_a","_b","call","getMeter","name","version","options","disable"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/api-metrics/build/esm/api/metrics.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NOOP_METER_PROVIDER } from '../NoopMeterProvider';\nimport { API_BACKWARDS_COMPATIBILITY_VERSION, GLOBAL_METRICS_API_KEY, makeGetter, _global, } from './global-utils';\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Metrics API\n */\nvar MetricsAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function MetricsAPI() {\n    }\n    /** Get the singleton instance of the Metrics API */\n    MetricsAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new MetricsAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current global meter. Returns the initialized global meter provider.\n     */\n    MetricsAPI.prototype.setGlobalMeterProvider = function (provider) {\n        if (_global[GLOBAL_METRICS_API_KEY]) {\n            // global meter provider has already been set\n            return this.getMeterProvider();\n        }\n        _global[GLOBAL_METRICS_API_KEY] = makeGetter(API_BACKWARDS_COMPATIBILITY_VERSION, provider, NOOP_METER_PROVIDER);\n        return provider;\n    };\n    /**\n     * Returns the global meter provider.\n     */\n    MetricsAPI.prototype.getMeterProvider = function () {\n        var _a, _b;\n        return ((_b = (_a = _global[GLOBAL_METRICS_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(_global, API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NOOP_METER_PROVIDER);\n    };\n    /**\n     * Returns a meter from the global meter provider.\n     */\n    MetricsAPI.prototype.getMeter = function (name, version, options) {\n        return this.getMeterProvider().getMeter(name, version, options);\n    };\n    /** Remove the global meter provider */\n    MetricsAPI.prototype.disable = function () {\n        delete _global[GLOBAL_METRICS_API_KEY];\n    };\n    return MetricsAPI;\n}());\nexport { MetricsAPI };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,mCAAmC,EAAEC,sBAAsB,EAAEC,UAAU,EAAEC,OAAO,QAAS,gBAAgB;AAClH;AACA;AACA;AACA,IAAIC,UAAU,GAAG,aAAe,YAAY;EACxC;EACA,SAASA,UAAU,GAAG,CACtB;EACA;EACAA,UAAU,CAACC,WAAW,GAAG,YAAY;IACjC,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACjB,IAAI,CAACA,SAAS,GAAG,IAAIF,UAAU,EAAE;IACrC;IACA,OAAO,IAAI,CAACE,SAAS;EACzB,CAAC;EACD;AACJ;AACA;EACIF,UAAU,CAACG,SAAS,CAACC,sBAAsB,GAAG,UAAUC,QAAQ,EAAE;IAC9D,IAAIN,OAAO,CAACF,sBAAsB,CAAC,EAAE;MACjC;MACA,OAAO,IAAI,CAACS,gBAAgB,EAAE;IAClC;IACAP,OAAO,CAACF,sBAAsB,CAAC,GAAGC,UAAU,CAACF,mCAAmC,EAAES,QAAQ,EAAEV,mBAAmB,CAAC;IAChH,OAAOU,QAAQ;EACnB,CAAC;EACD;AACJ;AACA;EACIL,UAAU,CAACG,SAAS,CAACG,gBAAgB,GAAG,YAAY;IAChD,IAAIC,EAAE,EAAEC,EAAE;IACV,OAAQ,CAACA,EAAE,GAAG,CAACD,EAAE,GAAGR,OAAO,CAACF,sBAAsB,CAAC,MAAM,IAAI,IAAIU,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,IAAI,CAACV,OAAO,EAAEH,mCAAmC,CAAC,MAAM,IAAI,IAAIY,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGb,mBAAmB;EACzM,CAAC;EACD;AACJ;AACA;EACIK,UAAU,CAACG,SAAS,CAACO,QAAQ,GAAG,UAAUC,IAAI,EAAEC,OAAO,EAAEC,OAAO,EAAE;IAC9D,OAAO,IAAI,CAACP,gBAAgB,EAAE,CAACI,QAAQ,CAACC,IAAI,EAAEC,OAAO,EAAEC,OAAO,CAAC;EACnE,CAAC;EACD;EACAb,UAAU,CAACG,SAAS,CAACW,OAAO,GAAG,YAAY;IACvC,OAAOf,OAAO,CAACF,sBAAsB,CAAC;EAC1C,CAAC;EACD,OAAOG,UAAU;AACrB,CAAC,EAAG;AACJ,SAASA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}