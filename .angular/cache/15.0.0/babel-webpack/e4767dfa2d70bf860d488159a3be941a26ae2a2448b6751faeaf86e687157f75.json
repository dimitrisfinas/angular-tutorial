{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision, isValidTraceId } from '@opentelemetry/api';\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nvar TraceIdRatioBasedSampler = /** @class */function () {\n  function TraceIdRatioBasedSampler(_ratio) {\n    if (_ratio === void 0) {\n      _ratio = 0;\n    }\n    this._ratio = _ratio;\n    this._ratio = this._normalize(_ratio);\n    this._upperBound = Math.floor(this._ratio * 0xffffffff);\n  }\n  TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n    return {\n      decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD\n    };\n  };\n  TraceIdRatioBasedSampler.prototype.toString = function () {\n    return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n  };\n  TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n    if (typeof ratio !== 'number' || isNaN(ratio)) return 0;\n    return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n  };\n  TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n    var accumulation = 0;\n    for (var i = 0; i < traceId.length / 8; i++) {\n      var pos = i * 8;\n      var part = parseInt(traceId.slice(pos, pos + 8), 16);\n      accumulation = (accumulation ^ part) >>> 0;\n    }\n    return accumulation;\n  };\n  return TraceIdRatioBasedSampler;\n}();\nexport { TraceIdRatioBasedSampler };","map":{"version":3,"names":["SamplingDecision","isValidTraceId","TraceIdRatioBasedSampler","_ratio","_normalize","_upperBound","Math","floor","prototype","shouldSample","context","traceId","decision","_accumulate","RECORD_AND_SAMPLED","NOT_RECORD","toString","ratio","isNaN","accumulation","i","length","pos","part","parseInt","slice"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/core/build/esm/trace/sampler/TraceIdRatioBasedSampler.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision, isValidTraceId, } from '@opentelemetry/api';\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nvar TraceIdRatioBasedSampler = /** @class */ (function () {\n    function TraceIdRatioBasedSampler(_ratio) {\n        if (_ratio === void 0) { _ratio = 0; }\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n        return {\n            decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n                ? SamplingDecision.RECORD_AND_SAMPLED\n                : SamplingDecision.NOT_RECORD,\n        };\n    };\n    TraceIdRatioBasedSampler.prototype.toString = function () {\n        return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n    };\n    TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    };\n    TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n        var accumulation = 0;\n        for (var i = 0; i < traceId.length / 8; i++) {\n            var pos = i * 8;\n            var part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    };\n    return TraceIdRatioBasedSampler;\n}());\nexport { TraceIdRatioBasedSampler };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,gBAAgB,EAAEC,cAAc,QAAS,oBAAoB;AACtE;AACA,IAAIC,wBAAwB,GAAG,aAAe,YAAY;EACtD,SAASA,wBAAwB,CAACC,MAAM,EAAE;IACtC,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAG,CAAC;IAAE;IACrC,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACA,MAAM,GAAG,IAAI,CAACC,UAAU,CAACD,MAAM,CAAC;IACrC,IAAI,CAACE,WAAW,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,CAACJ,MAAM,GAAG,UAAU,CAAC;EAC3D;EACAD,wBAAwB,CAACM,SAAS,CAACC,YAAY,GAAG,UAAUC,OAAO,EAAEC,OAAO,EAAE;IAC1E,OAAO;MACHC,QAAQ,EAAEX,cAAc,CAACU,OAAO,CAAC,IAAI,IAAI,CAACE,WAAW,CAACF,OAAO,CAAC,GAAG,IAAI,CAACN,WAAW,GAC3EL,gBAAgB,CAACc,kBAAkB,GACnCd,gBAAgB,CAACe;IAC3B,CAAC;EACL,CAAC;EACDb,wBAAwB,CAACM,SAAS,CAACQ,QAAQ,GAAG,YAAY;IACtD,OAAO,oBAAoB,GAAG,IAAI,CAACb,MAAM,GAAG,GAAG;EACnD,CAAC;EACDD,wBAAwB,CAACM,SAAS,CAACJ,UAAU,GAAG,UAAUa,KAAK,EAAE;IAC7D,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIC,KAAK,CAACD,KAAK,CAAC,EACzC,OAAO,CAAC;IACZ,OAAOA,KAAK,IAAI,CAAC,GAAG,CAAC,GAAGA,KAAK,IAAI,CAAC,GAAG,CAAC,GAAGA,KAAK;EAClD,CAAC;EACDf,wBAAwB,CAACM,SAAS,CAACK,WAAW,GAAG,UAAUF,OAAO,EAAE;IAChE,IAAIQ,YAAY,GAAG,CAAC;IACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,OAAO,CAACU,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;MACzC,IAAIE,GAAG,GAAGF,CAAC,GAAG,CAAC;MACf,IAAIG,IAAI,GAAGC,QAAQ,CAACb,OAAO,CAACc,KAAK,CAACH,GAAG,EAAEA,GAAG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;MACpDH,YAAY,GAAG,CAACA,YAAY,GAAGI,IAAI,MAAM,CAAC;IAC9C;IACA,OAAOJ,YAAY;EACvB,CAAC;EACD,OAAOjB,wBAAwB;AACnC,CAAC,EAAG;AACJ,SAASA,wBAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}