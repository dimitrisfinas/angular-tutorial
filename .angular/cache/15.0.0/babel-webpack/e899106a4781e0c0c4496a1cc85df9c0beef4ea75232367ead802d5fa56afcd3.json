{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { DocumentLoadInstrumentation } from '@opentelemetry/instrumentation-document-load';\nimport { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch';\nimport { UserInteractionInstrumentation } from '@opentelemetry/instrumentation-user-interaction';\nimport { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';\nvar InstrumentationMap = {\n  '@opentelemetry/instrumentation-document-load': DocumentLoadInstrumentation,\n  '@opentelemetry/instrumentation-fetch': FetchInstrumentation,\n  '@opentelemetry/instrumentation-user-interaction': UserInteractionInstrumentation,\n  '@opentelemetry/instrumentation-xml-http-request': XMLHttpRequestInstrumentation\n};\nexport function getWebAutoInstrumentations(inputConfigs) {\n  var _a;\n  if (inputConfigs === void 0) {\n    inputConfigs = {};\n  }\n  for (var _i = 0, _b = Object.keys(inputConfigs); _i < _b.length; _i++) {\n    var name_1 = _b[_i];\n    if (!Object.prototype.hasOwnProperty.call(InstrumentationMap, name_1)) {\n      diag.error(\"Provided instrumentation name \\\"\" + name_1 + \"\\\" not found\");\n      continue;\n    }\n  }\n  var instrumentations = [];\n  for (var _c = 0, _d = Object.keys(InstrumentationMap); _c < _d.length; _c++) {\n    var name_2 = _d[_c];\n    var Instance = InstrumentationMap[name_2];\n    // Defaults are defined by the instrumentation itself\n    var userConfig = (_a = inputConfigs[name_2]) !== null && _a !== void 0 ? _a : {};\n    if (userConfig.enabled === false) {\n      diag.debug(\"Disabling instrumentation for \" + name_2);\n      continue;\n    }\n    try {\n      diag.debug(\"Loading instrumentation for \" + name_2);\n      instrumentations.push(new Instance(userConfig));\n    } catch (e) {\n      diag.error(e);\n    }\n  }\n  return instrumentations;\n}\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}