{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api';\nimport { RandomIdGenerator, sanitizeAttributes, isTracingSuppressed } from '@opentelemetry/core';\nimport { Span } from './Span';\nimport { mergeConfig } from './utility';\n/**\n * This class represents a basic tracer.\n */\nvar Tracer = /** @class */function () {\n  /**\n   * Constructs a new Tracer instance.\n   */\n  function Tracer(instrumentationLibrary, config, _tracerProvider) {\n    this._tracerProvider = _tracerProvider;\n    var localConfig = mergeConfig(config);\n    this._sampler = localConfig.sampler;\n    this._generalLimits = localConfig.generalLimits;\n    this._spanLimits = localConfig.spanLimits;\n    this._idGenerator = config.idGenerator || new RandomIdGenerator();\n    this.resource = _tracerProvider.resource;\n    this.instrumentationLibrary = instrumentationLibrary;\n  }\n  /**\n   * Starts a new Span or returns the default NoopSpan based on the sampling\n   * decision.\n   */\n  Tracer.prototype.startSpan = function (name, options, context) {\n    var _a, _b;\n    if (options === void 0) {\n      options = {};\n    }\n    if (context === void 0) {\n      context = api.context.active();\n    }\n    if (isTracingSuppressed(context)) {\n      api.diag.debug('Instrumentation suppressed, returning Noop Span');\n      return api.trace.wrapSpanContext(api.INVALID_SPAN_CONTEXT);\n    }\n    var parentContext = getParent(options, context);\n    var spanId = this._idGenerator.generateSpanId();\n    var traceId;\n    var traceState;\n    var parentSpanId;\n    if (!parentContext || !api.trace.isSpanContextValid(parentContext)) {\n      // New root span.\n      traceId = this._idGenerator.generateTraceId();\n    } else {\n      // New child span.\n      traceId = parentContext.traceId;\n      traceState = parentContext.traceState;\n      parentSpanId = parentContext.spanId;\n    }\n    var spanKind = (_a = options.kind) !== null && _a !== void 0 ? _a : api.SpanKind.INTERNAL;\n    var links = (_b = options.links) !== null && _b !== void 0 ? _b : [];\n    var attributes = sanitizeAttributes(options.attributes);\n    // make sampling decision\n    var samplingResult = this._sampler.shouldSample(options.root ? api.trace.setSpanContext(context, api.INVALID_SPAN_CONTEXT) : context, traceId, name, spanKind, attributes, links);\n    var traceFlags = samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED ? api.TraceFlags.SAMPLED : api.TraceFlags.NONE;\n    var spanContext = {\n      traceId: traceId,\n      spanId: spanId,\n      traceFlags: traceFlags,\n      traceState: traceState\n    };\n    if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n      api.diag.debug('Recording is off, propagating context in a non-recording span');\n      return api.trace.wrapSpanContext(spanContext);\n    }\n    var span = new Span(this, context, name, spanContext, spanKind, parentSpanId, links, options.startTime);\n    // Set default attributes\n    span.setAttributes(Object.assign(attributes, samplingResult.attributes));\n    return span;\n  };\n  Tracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n    var opts;\n    var ctx;\n    var fn;\n    if (arguments.length < 2) {\n      return;\n    } else if (arguments.length === 2) {\n      fn = arg2;\n    } else if (arguments.length === 3) {\n      opts = arg2;\n      fn = arg3;\n    } else {\n      opts = arg2;\n      ctx = arg3;\n      fn = arg4;\n    }\n    var parentContext = ctx !== null && ctx !== void 0 ? ctx : api.context.active();\n    var span = this.startSpan(name, opts, parentContext);\n    var contextWithSpanSet = api.trace.setSpan(parentContext, span);\n    return api.context.with(contextWithSpanSet, fn, undefined, span);\n  };\n  /** Returns the active {@link GeneralLimits}. */\n  Tracer.prototype.getGeneralLimits = function () {\n    return this._generalLimits;\n  };\n  /** Returns the active {@link SpanLimits}. */\n  Tracer.prototype.getSpanLimits = function () {\n    return this._spanLimits;\n  };\n  Tracer.prototype.getActiveSpanProcessor = function () {\n    return this._tracerProvider.getActiveSpanProcessor();\n  };\n  return Tracer;\n}();\nexport { Tracer };\n/**\n * Get the parent to assign to a started span. If options.parent is null,\n * do not assign a parent.\n *\n * @param options span options\n * @param context context to check for parent\n */\nfunction getParent(options, context) {\n  if (options.root) return undefined;\n  return api.trace.getSpanContext(context);\n}","map":{"version":3,"names":["api","RandomIdGenerator","sanitizeAttributes","isTracingSuppressed","Span","mergeConfig","Tracer","instrumentationLibrary","config","_tracerProvider","localConfig","_sampler","sampler","_generalLimits","generalLimits","_spanLimits","spanLimits","_idGenerator","idGenerator","resource","prototype","startSpan","name","options","context","_a","_b","active","diag","debug","trace","wrapSpanContext","INVALID_SPAN_CONTEXT","parentContext","getParent","spanId","generateSpanId","traceId","traceState","parentSpanId","isSpanContextValid","generateTraceId","spanKind","kind","SpanKind","INTERNAL","links","attributes","samplingResult","shouldSample","root","setSpanContext","traceFlags","decision","SamplingDecision","RECORD_AND_SAMPLED","TraceFlags","SAMPLED","NONE","spanContext","NOT_RECORD","span","startTime","setAttributes","Object","assign","startActiveSpan","arg2","arg3","arg4","opts","ctx","fn","arguments","length","contextWithSpanSet","setSpan","with","undefined","getGeneralLimits","getSpanLimits","getActiveSpanProcessor","getSpanContext"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api';\nimport { RandomIdGenerator, sanitizeAttributes, isTracingSuppressed, } from '@opentelemetry/core';\nimport { Span } from './Span';\nimport { mergeConfig } from './utility';\n/**\n * This class represents a basic tracer.\n */\nvar Tracer = /** @class */ (function () {\n    /**\n     * Constructs a new Tracer instance.\n     */\n    function Tracer(instrumentationLibrary, config, _tracerProvider) {\n        this._tracerProvider = _tracerProvider;\n        var localConfig = mergeConfig(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new RandomIdGenerator();\n        this.resource = _tracerProvider.resource;\n        this.instrumentationLibrary = instrumentationLibrary;\n    }\n    /**\n     * Starts a new Span or returns the default NoopSpan based on the sampling\n     * decision.\n     */\n    Tracer.prototype.startSpan = function (name, options, context) {\n        var _a, _b;\n        if (options === void 0) { options = {}; }\n        if (context === void 0) { context = api.context.active(); }\n        if (isTracingSuppressed(context)) {\n            api.diag.debug('Instrumentation suppressed, returning Noop Span');\n            return api.trace.wrapSpanContext(api.INVALID_SPAN_CONTEXT);\n        }\n        var parentContext = getParent(options, context);\n        var spanId = this._idGenerator.generateSpanId();\n        var traceId;\n        var traceState;\n        var parentSpanId;\n        if (!parentContext || !api.trace.isSpanContextValid(parentContext)) {\n            // New root span.\n            traceId = this._idGenerator.generateTraceId();\n        }\n        else {\n            // New child span.\n            traceId = parentContext.traceId;\n            traceState = parentContext.traceState;\n            parentSpanId = parentContext.spanId;\n        }\n        var spanKind = (_a = options.kind) !== null && _a !== void 0 ? _a : api.SpanKind.INTERNAL;\n        var links = (_b = options.links) !== null && _b !== void 0 ? _b : [];\n        var attributes = sanitizeAttributes(options.attributes);\n        // make sampling decision\n        var samplingResult = this._sampler.shouldSample(options.root\n            ? api.trace.setSpanContext(context, api.INVALID_SPAN_CONTEXT)\n            : context, traceId, name, spanKind, attributes, links);\n        var traceFlags = samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n            ? api.TraceFlags.SAMPLED\n            : api.TraceFlags.NONE;\n        var spanContext = { traceId: traceId, spanId: spanId, traceFlags: traceFlags, traceState: traceState };\n        if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n            api.diag.debug('Recording is off, propagating context in a non-recording span');\n            return api.trace.wrapSpanContext(spanContext);\n        }\n        var span = new Span(this, context, name, spanContext, spanKind, parentSpanId, links, options.startTime);\n        // Set default attributes\n        span.setAttributes(Object.assign(attributes, samplingResult.attributes));\n        return span;\n    };\n    Tracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : api.context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = api.trace.setSpan(parentContext, span);\n        return api.context.with(contextWithSpanSet, fn, undefined, span);\n    };\n    /** Returns the active {@link GeneralLimits}. */\n    Tracer.prototype.getGeneralLimits = function () {\n        return this._generalLimits;\n    };\n    /** Returns the active {@link SpanLimits}. */\n    Tracer.prototype.getSpanLimits = function () {\n        return this._spanLimits;\n    };\n    Tracer.prototype.getActiveSpanProcessor = function () {\n        return this._tracerProvider.getActiveSpanProcessor();\n    };\n    return Tracer;\n}());\nexport { Tracer };\n/**\n * Get the parent to assign to a started span. If options.parent is null,\n * do not assign a parent.\n *\n * @param options span options\n * @param context context to check for parent\n */\nfunction getParent(options, context) {\n    if (options.root)\n        return undefined;\n    return api.trace.getSpanContext(context);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}