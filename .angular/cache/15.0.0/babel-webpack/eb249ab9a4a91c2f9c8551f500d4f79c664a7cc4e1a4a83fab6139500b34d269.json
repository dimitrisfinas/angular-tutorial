{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { globalErrorHandler } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */function () {\n  function MultiSpanProcessor(_spanProcessors) {\n    this._spanProcessors = _spanProcessors;\n  }\n  MultiSpanProcessor.prototype.forceFlush = function () {\n    var e_1, _a;\n    var promises = [];\n    try {\n      for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var spanProcessor = _c.value;\n        promises.push(spanProcessor.forceFlush());\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return new Promise(function (resolve) {\n      Promise.all(promises).then(function () {\n        resolve();\n      }).catch(function (error) {\n        globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n        resolve();\n      });\n    });\n  };\n  MultiSpanProcessor.prototype.onStart = function (span, context) {\n    var e_2, _a;\n    try {\n      for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var spanProcessor = _c.value;\n        spanProcessor.onStart(span, context);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n  MultiSpanProcessor.prototype.onEnd = function (span) {\n    var e_3, _a;\n    try {\n      for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var spanProcessor = _c.value;\n        spanProcessor.onEnd(span);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  MultiSpanProcessor.prototype.shutdown = function () {\n    var e_4, _a;\n    var promises = [];\n    try {\n      for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var spanProcessor = _c.value;\n        promises.push(spanProcessor.shutdown());\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n    return new Promise(function (resolve, reject) {\n      Promise.all(promises).then(function () {\n        resolve();\n      }, reject);\n    });\n  };\n  return MultiSpanProcessor;\n}();\nexport { MultiSpanProcessor };","map":{"version":3,"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","globalErrorHandler","MultiSpanProcessor","_spanProcessors","prototype","forceFlush","e_1","_a","promises","_b","_c","spanProcessor","push","e_1_1","error","return","Promise","resolve","all","then","catch","Error","onStart","span","context","e_2","e_2_1","onEnd","e_3","e_3_1","shutdown","e_4","e_4_1","reject"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { globalErrorHandler } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */ (function () {\n    function MultiSpanProcessor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    MultiSpanProcessor.prototype.forceFlush = function () {\n        var e_1, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.forceFlush());\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return new Promise(function (resolve) {\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(function (error) {\n                globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n                resolve();\n            });\n        });\n    };\n    MultiSpanProcessor.prototype.onStart = function (span, context) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onStart(span, context);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.onEnd = function (span) {\n        var e_3, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onEnd(span);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.shutdown = function () {\n        var e_4, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.shutdown());\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises).then(function () {\n                resolve();\n            }, reject);\n        });\n    };\n    return MultiSpanProcessor;\n}());\nexport { MultiSpanProcessor };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}