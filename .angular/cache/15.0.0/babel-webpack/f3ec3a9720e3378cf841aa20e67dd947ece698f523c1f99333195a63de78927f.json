{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { defaultServiceName } from './platform';\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */function () {\n  function Resource(\n  /**\n   * A dictionary of attributes with string keys and values that provide\n   * information about the entity as numbers, strings or booleans\n   * TODO: Consider to add check/validation on attributes.\n   */\n  attributes) {\n    this.attributes = attributes;\n  }\n  /**\n   * Returns an empty Resource\n   */\n  Resource.empty = function () {\n    return Resource.EMPTY;\n  };\n  /**\n   * Returns a Resource that indentifies the SDK in use.\n   */\n  Resource.default = function () {\n    var _a;\n    return new Resource((_a = {}, _a[SemanticResourceAttributes.SERVICE_NAME] = defaultServiceName(), _a[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE], _a[SemanticResourceAttributes.TELEMETRY_SDK_NAME] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME], _a[SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION], _a));\n  };\n  /**\n   * Returns a new, merged {@link Resource} by merging the current Resource\n   * with the other Resource. In case of a collision, other Resource takes\n   * precedence.\n   *\n   * @param other the Resource that will be merged with this.\n   * @returns the newly merged Resource.\n   */\n  Resource.prototype.merge = function (other) {\n    if (!other || !Object.keys(other.attributes).length) return this;\n    // SpanAttributes from resource overwrite attributes from other resource.\n    var mergedAttributes = Object.assign({}, this.attributes, other.attributes);\n    return new Resource(mergedAttributes);\n  };\n  Resource.EMPTY = new Resource({});\n  return Resource;\n}();\nexport { Resource };","map":{"version":3,"names":["SemanticResourceAttributes","SDK_INFO","defaultServiceName","Resource","attributes","empty","EMPTY","default","_a","SERVICE_NAME","TELEMETRY_SDK_LANGUAGE","TELEMETRY_SDK_NAME","TELEMETRY_SDK_VERSION","prototype","merge","other","Object","keys","length","mergedAttributes","assign"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/resources/build/esm/Resource.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { defaultServiceName } from './platform';\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */ (function () {\n    function Resource(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes) {\n        this.attributes = attributes;\n    }\n    /**\n     * Returns an empty Resource\n     */\n    Resource.empty = function () {\n        return Resource.EMPTY;\n    };\n    /**\n     * Returns a Resource that indentifies the SDK in use.\n     */\n    Resource.default = function () {\n        var _a;\n        return new Resource((_a = {},\n            _a[SemanticResourceAttributes.SERVICE_NAME] = defaultServiceName(),\n            _a[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE],\n            _a[SemanticResourceAttributes.TELEMETRY_SDK_NAME] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME],\n            _a[SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION],\n            _a));\n    };\n    /**\n     * Returns a new, merged {@link Resource} by merging the current Resource\n     * with the other Resource. In case of a collision, other Resource takes\n     * precedence.\n     *\n     * @param other the Resource that will be merged with this.\n     * @returns the newly merged Resource.\n     */\n    Resource.prototype.merge = function (other) {\n        if (!other || !Object.keys(other.attributes).length)\n            return this;\n        // SpanAttributes from resource overwrite attributes from other resource.\n        var mergedAttributes = Object.assign({}, this.attributes, other.attributes);\n        return new Resource(mergedAttributes);\n    };\n    Resource.EMPTY = new Resource({});\n    return Resource;\n}());\nexport { Resource };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,0BAA0B,QAAQ,qCAAqC;AAChF,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,kBAAkB,QAAQ,YAAY;AAC/C;AACA;AACA;AACA;AACA,IAAIC,QAAQ,GAAG,aAAe,YAAY;EACtC,SAASA,QAAQ;EACjB;AACJ;AACA;AACA;AACA;EACIC,UAAU,EAAE;IACR,IAAI,CAACA,UAAU,GAAGA,UAAU;EAChC;EACA;AACJ;AACA;EACID,QAAQ,CAACE,KAAK,GAAG,YAAY;IACzB,OAAOF,QAAQ,CAACG,KAAK;EACzB,CAAC;EACD;AACJ;AACA;EACIH,QAAQ,CAACI,OAAO,GAAG,YAAY;IAC3B,IAAIC,EAAE;IACN,OAAO,IAAIL,QAAQ,EAAEK,EAAE,GAAG,CAAC,CAAC,EACxBA,EAAE,CAACR,0BAA0B,CAACS,YAAY,CAAC,GAAGP,kBAAkB,EAAE,EAClEM,EAAE,CAACR,0BAA0B,CAACU,sBAAsB,CAAC,GAAGT,QAAQ,CAACD,0BAA0B,CAACU,sBAAsB,CAAC,EACnHF,EAAE,CAACR,0BAA0B,CAACW,kBAAkB,CAAC,GAAGV,QAAQ,CAACD,0BAA0B,CAACW,kBAAkB,CAAC,EAC3GH,EAAE,CAACR,0BAA0B,CAACY,qBAAqB,CAAC,GAAGX,QAAQ,CAACD,0BAA0B,CAACY,qBAAqB,CAAC,EACjHJ,EAAE,EAAE;EACZ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIL,QAAQ,CAACU,SAAS,CAACC,KAAK,GAAG,UAAUC,KAAK,EAAE;IACxC,IAAI,CAACA,KAAK,IAAI,CAACC,MAAM,CAACC,IAAI,CAACF,KAAK,CAACX,UAAU,CAAC,CAACc,MAAM,EAC/C,OAAO,IAAI;IACf;IACA,IAAIC,gBAAgB,GAAGH,MAAM,CAACI,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAChB,UAAU,EAAEW,KAAK,CAACX,UAAU,CAAC;IAC3E,OAAO,IAAID,QAAQ,CAACgB,gBAAgB,CAAC;EACzC,CAAC;EACDhB,QAAQ,CAACG,KAAK,GAAG,IAAIH,QAAQ,CAAC,CAAC,CAAC,CAAC;EACjC,OAAOA,QAAQ;AACnB,CAAC,EAAG;AACJ,SAASA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}