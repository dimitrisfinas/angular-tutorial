{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar consoleMap = [{\n  n: 'error',\n  c: 'error'\n}, {\n  n: 'warn',\n  c: 'warn'\n}, {\n  n: 'info',\n  c: 'info'\n}, {\n  n: 'debug',\n  c: 'debug'\n}, {\n  n: 'verbose',\n  c: 'trace'\n}];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = /** @class */function () {\n  function DiagConsoleLogger() {\n    function _consoleFunc(funcName) {\n      return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        if (console) {\n          // Some environments only expose the console when the F12 developer console is open\n          // eslint-disable-next-line no-console\n          var theFunc = console[funcName];\n          if (typeof theFunc !== 'function') {\n            // Not all environments support all functions\n            // eslint-disable-next-line no-console\n            theFunc = console.log;\n          }\n          // One last final check\n          if (typeof theFunc === 'function') {\n            return theFunc.apply(console, args);\n          }\n        }\n      };\n    }\n    for (var i = 0; i < consoleMap.length; i++) {\n      this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n    }\n  }\n  return DiagConsoleLogger;\n}();\nexport { DiagConsoleLogger };","map":{"version":3,"names":["consoleMap","n","c","DiagConsoleLogger","_consoleFunc","funcName","args","_i","arguments","length","console","theFunc","log","apply","i"],"sources":["/Users/dimitris.finas/node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar consoleMap = [\n    { n: 'error', c: 'error' },\n    { n: 'warn', c: 'warn' },\n    { n: 'info', c: 'info' },\n    { n: 'debug', c: 'debug' },\n    { n: 'verbose', c: 'trace' },\n];\n/**\n * A simple Immutable Console based diagnostic logger which will output any messages to the Console.\n * If you want to limit the amount of logging to a specific level or lower use the\n * {@link createLogLevelDiagLogger}\n */\nvar DiagConsoleLogger = /** @class */ (function () {\n    function DiagConsoleLogger() {\n        function _consoleFunc(funcName) {\n            return function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                if (console) {\n                    // Some environments only expose the console when the F12 developer console is open\n                    // eslint-disable-next-line no-console\n                    var theFunc = console[funcName];\n                    if (typeof theFunc !== 'function') {\n                        // Not all environments support all functions\n                        // eslint-disable-next-line no-console\n                        theFunc = console.log;\n                    }\n                    // One last final check\n                    if (typeof theFunc === 'function') {\n                        return theFunc.apply(console, args);\n                    }\n                }\n            };\n        }\n        for (var i = 0; i < consoleMap.length; i++) {\n            this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);\n        }\n    }\n    return DiagConsoleLogger;\n}());\nexport { DiagConsoleLogger };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAG,CACb;EAAEC,CAAC,EAAE,OAAO;EAAEC,CAAC,EAAE;AAAQ,CAAC,EAC1B;EAAED,CAAC,EAAE,MAAM;EAAEC,CAAC,EAAE;AAAO,CAAC,EACxB;EAAED,CAAC,EAAE,MAAM;EAAEC,CAAC,EAAE;AAAO,CAAC,EACxB;EAAED,CAAC,EAAE,OAAO;EAAEC,CAAC,EAAE;AAAQ,CAAC,EAC1B;EAAED,CAAC,EAAE,SAAS;EAAEC,CAAC,EAAE;AAAQ,CAAC,CAC/B;AACD;AACA;AACA;AACA;AACA;AACA,IAAIC,iBAAiB,GAAG,aAAe,YAAY;EAC/C,SAASA,iBAAiB,GAAG;IACzB,SAASC,YAAY,CAACC,QAAQ,EAAE;MAC5B,OAAO,YAAY;QACf,IAAIC,IAAI,GAAG,EAAE;QACb,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;UAC1CD,IAAI,CAACC,EAAE,CAAC,GAAGC,SAAS,CAACD,EAAE,CAAC;QAC5B;QACA,IAAIG,OAAO,EAAE;UACT;UACA;UACA,IAAIC,OAAO,GAAGD,OAAO,CAACL,QAAQ,CAAC;UAC/B,IAAI,OAAOM,OAAO,KAAK,UAAU,EAAE;YAC/B;YACA;YACAA,OAAO,GAAGD,OAAO,CAACE,GAAG;UACzB;UACA;UACA,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;YAC/B,OAAOA,OAAO,CAACE,KAAK,CAACH,OAAO,EAAEJ,IAAI,CAAC;UACvC;QACJ;MACJ,CAAC;IACL;IACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,UAAU,CAACS,MAAM,EAAEK,CAAC,EAAE,EAAE;MACxC,IAAI,CAACd,UAAU,CAACc,CAAC,CAAC,CAACb,CAAC,CAAC,GAAGG,YAAY,CAACJ,UAAU,CAACc,CAAC,CAAC,CAACZ,CAAC,CAAC;IACzD;EACJ;EACA,OAAOC,iBAAiB;AAC5B,CAAC,EAAG;AACJ,SAASA,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}