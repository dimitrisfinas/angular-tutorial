{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadPackageDefinition = exports.makeClientConstructor = void 0;\nconst client_1 = require(\"./client\");\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */\nconst requesterFuncs = {\n  unary: client_1.Client.prototype.makeUnaryRequest,\n  server_stream: client_1.Client.prototype.makeServerStreamRequest,\n  client_stream: client_1.Client.prototype.makeClientStreamRequest,\n  bidi: client_1.Client.prototype.makeBidiStreamRequest\n};\n/**\n * Returns true, if given key is included in the blacklisted\n * keys.\n * @param key key for check, string.\n */\nfunction isPrototypePolluted(key) {\n  return ['__proto__', 'prototype', 'constructor'].includes(key);\n}\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @param methods An object mapping method names to\n *     method attributes\n * @param serviceName The fully qualified name of the service\n * @param classOptions An options object.\n * @return New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */\nfunction makeClientConstructor(methods, serviceName, classOptions) {\n  if (!classOptions) {\n    classOptions = {};\n  }\n  class ServiceClientImpl extends client_1.Client {}\n  Object.keys(methods).forEach(name => {\n    if (isPrototypePolluted(name)) {\n      return;\n    }\n    const attrs = methods[name];\n    let methodType;\n    // TODO(murgatroid99): Verify that we don't need this anymore\n    if (typeof name === 'string' && name.charAt(0) === '$') {\n      throw new Error('Method names cannot start with $');\n    }\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        methodType = 'bidi';\n      } else {\n        methodType = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        methodType = 'server_stream';\n      } else {\n        methodType = 'unary';\n      }\n    }\n    const serialize = attrs.requestSerialize;\n    const deserialize = attrs.responseDeserialize;\n    const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);\n    ServiceClientImpl.prototype[name] = methodFunc;\n    // Associate all provided attributes with the method\n    Object.assign(ServiceClientImpl.prototype[name], attrs);\n    if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {\n      ServiceClientImpl.prototype[attrs.originalName] = ServiceClientImpl.prototype[name];\n    }\n  });\n  ServiceClientImpl.service = methods;\n  ServiceClientImpl.serviceName = serviceName;\n  return ServiceClientImpl;\n}\nexports.makeClientConstructor = makeClientConstructor;\nfunction partial(fn, path, serialize, deserialize) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (...args) {\n    return fn.call(this, path, serialize, deserialize, ...args);\n  };\n}\nfunction isProtobufTypeDefinition(obj) {\n  return 'format' in obj;\n}\n/**\n * Load a gRPC package definition as a gRPC object hierarchy.\n * @param packageDef The package definition object.\n * @return The resulting gRPC object.\n */\nfunction loadPackageDefinition(packageDef) {\n  const result = {};\n  for (const serviceFqn in packageDef) {\n    if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {\n      const service = packageDef[serviceFqn];\n      const nameComponents = serviceFqn.split('.');\n      if (nameComponents.some(comp => isPrototypePolluted(comp))) {\n        continue;\n      }\n      const serviceName = nameComponents[nameComponents.length - 1];\n      let current = result;\n      for (const packageName of nameComponents.slice(0, -1)) {\n        if (!current[packageName]) {\n          current[packageName] = {};\n        }\n        current = current[packageName];\n      }\n      if (isProtobufTypeDefinition(service)) {\n        current[serviceName] = service;\n      } else {\n        current[serviceName] = makeClientConstructor(service, serviceName, {});\n      }\n    }\n  }\n  return result;\n}\nexports.loadPackageDefinition = loadPackageDefinition;","map":{"version":3,"names":["Object","defineProperty","exports","value","loadPackageDefinition","makeClientConstructor","client_1","require","requesterFuncs","unary","Client","prototype","makeUnaryRequest","server_stream","makeServerStreamRequest","client_stream","makeClientStreamRequest","bidi","makeBidiStreamRequest","isPrototypePolluted","key","includes","methods","serviceName","classOptions","ServiceClientImpl","keys","forEach","name","attrs","methodType","charAt","Error","requestStream","responseStream","serialize","requestSerialize","deserialize","responseDeserialize","methodFunc","partial","path","assign","originalName","service","fn","args","call","isProtobufTypeDefinition","obj","packageDef","result","serviceFqn","hasOwnProperty","nameComponents","split","some","comp","length","current","packageName","slice"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@grpc/grpc-js/build/src/make-client.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadPackageDefinition = exports.makeClientConstructor = void 0;\nconst client_1 = require(\"./client\");\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */\nconst requesterFuncs = {\n    unary: client_1.Client.prototype.makeUnaryRequest,\n    server_stream: client_1.Client.prototype.makeServerStreamRequest,\n    client_stream: client_1.Client.prototype.makeClientStreamRequest,\n    bidi: client_1.Client.prototype.makeBidiStreamRequest,\n};\n/**\n * Returns true, if given key is included in the blacklisted\n * keys.\n * @param key key for check, string.\n */\nfunction isPrototypePolluted(key) {\n    return ['__proto__', 'prototype', 'constructor'].includes(key);\n}\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @param methods An object mapping method names to\n *     method attributes\n * @param serviceName The fully qualified name of the service\n * @param classOptions An options object.\n * @return New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */\nfunction makeClientConstructor(methods, serviceName, classOptions) {\n    if (!classOptions) {\n        classOptions = {};\n    }\n    class ServiceClientImpl extends client_1.Client {\n    }\n    Object.keys(methods).forEach((name) => {\n        if (isPrototypePolluted(name)) {\n            return;\n        }\n        const attrs = methods[name];\n        let methodType;\n        // TODO(murgatroid99): Verify that we don't need this anymore\n        if (typeof name === 'string' && name.charAt(0) === '$') {\n            throw new Error('Method names cannot start with $');\n        }\n        if (attrs.requestStream) {\n            if (attrs.responseStream) {\n                methodType = 'bidi';\n            }\n            else {\n                methodType = 'client_stream';\n            }\n        }\n        else {\n            if (attrs.responseStream) {\n                methodType = 'server_stream';\n            }\n            else {\n                methodType = 'unary';\n            }\n        }\n        const serialize = attrs.requestSerialize;\n        const deserialize = attrs.responseDeserialize;\n        const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);\n        ServiceClientImpl.prototype[name] = methodFunc;\n        // Associate all provided attributes with the method\n        Object.assign(ServiceClientImpl.prototype[name], attrs);\n        if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {\n            ServiceClientImpl.prototype[attrs.originalName] =\n                ServiceClientImpl.prototype[name];\n        }\n    });\n    ServiceClientImpl.service = methods;\n    ServiceClientImpl.serviceName = serviceName;\n    return ServiceClientImpl;\n}\nexports.makeClientConstructor = makeClientConstructor;\nfunction partial(fn, path, serialize, deserialize) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (...args) {\n        return fn.call(this, path, serialize, deserialize, ...args);\n    };\n}\nfunction isProtobufTypeDefinition(obj) {\n    return 'format' in obj;\n}\n/**\n * Load a gRPC package definition as a gRPC object hierarchy.\n * @param packageDef The package definition object.\n * @return The resulting gRPC object.\n */\nfunction loadPackageDefinition(packageDef) {\n    const result = {};\n    for (const serviceFqn in packageDef) {\n        if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {\n            const service = packageDef[serviceFqn];\n            const nameComponents = serviceFqn.split('.');\n            if (nameComponents.some((comp) => isPrototypePolluted(comp))) {\n                continue;\n            }\n            const serviceName = nameComponents[nameComponents.length - 1];\n            let current = result;\n            for (const packageName of nameComponents.slice(0, -1)) {\n                if (!current[packageName]) {\n                    current[packageName] = {};\n                }\n                current = current[packageName];\n            }\n            if (isProtobufTypeDefinition(service)) {\n                current[serviceName] = service;\n            }\n            else {\n                current[serviceName] = makeClientConstructor(service, serviceName, {});\n            }\n        }\n    }\n    return result;\n}\nexports.loadPackageDefinition = loadPackageDefinition;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}