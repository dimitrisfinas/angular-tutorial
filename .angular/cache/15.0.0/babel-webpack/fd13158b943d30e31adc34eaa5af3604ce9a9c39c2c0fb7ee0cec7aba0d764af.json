{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { trace, metrics } from '@opentelemetry/api';\nimport { disableInstrumentations, enableInstrumentations, parseInstrumentationOptions } from './autoLoaderUtils';\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nexport function registerInstrumentations(options) {\n  var instrumentations = parseInstrumentationOptions(options.instrumentations).instrumentations;\n  var tracerProvider = options.tracerProvider || trace.getTracerProvider();\n  var meterProvider = options.meterProvider || metrics.getMeterProvider();\n  enableInstrumentations(instrumentations, tracerProvider, meterProvider);\n  return function () {\n    disableInstrumentations(instrumentations);\n  };\n}","map":{"version":3,"names":["trace","metrics","disableInstrumentations","enableInstrumentations","parseInstrumentationOptions","registerInstrumentations","options","instrumentations","tracerProvider","getTracerProvider","meterProvider","getMeterProvider"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@opentelemetry/instrumentation/build/esm/autoLoader.js"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { trace, metrics } from '@opentelemetry/api';\nimport { disableInstrumentations, enableInstrumentations, parseInstrumentationOptions, } from './autoLoaderUtils';\n/**\n * It will register instrumentations and plugins\n * @param options\n * @return returns function to unload instrumentation and plugins that were\n *   registered\n */\nexport function registerInstrumentations(options) {\n    var instrumentations = parseInstrumentationOptions(options.instrumentations).instrumentations;\n    var tracerProvider = options.tracerProvider || trace.getTracerProvider();\n    var meterProvider = options.meterProvider || metrics.getMeterProvider();\n    enableInstrumentations(instrumentations, tracerProvider, meterProvider);\n    return function () {\n        disableInstrumentations(instrumentations);\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAK,EAAEC,OAAO,QAAQ,oBAAoB;AACnD,SAASC,uBAAuB,EAAEC,sBAAsB,EAAEC,2BAA2B,QAAS,mBAAmB;AACjH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwB,CAACC,OAAO,EAAE;EAC9C,IAAIC,gBAAgB,GAAGH,2BAA2B,CAACE,OAAO,CAACC,gBAAgB,CAAC,CAACA,gBAAgB;EAC7F,IAAIC,cAAc,GAAGF,OAAO,CAACE,cAAc,IAAIR,KAAK,CAACS,iBAAiB,EAAE;EACxE,IAAIC,aAAa,GAAGJ,OAAO,CAACI,aAAa,IAAIT,OAAO,CAACU,gBAAgB,EAAE;EACvER,sBAAsB,CAACI,gBAAgB,EAAEC,cAAc,EAAEE,aAAa,CAAC;EACvE,OAAO,YAAY;IACfR,uBAAuB,CAACK,gBAAgB,CAAC;EAC7C,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}