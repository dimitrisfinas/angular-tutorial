{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uriToString = exports.splitHostPort = exports.parseUri = void 0;\n/*\n * The groups correspond to URI parts as follows:\n * 1. scheme\n * 2. authority\n * 3. path\n */\nconst URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\\/\\/([^/]*)\\/)?(.+)$/;\nfunction parseUri(uriString) {\n  const parsedUri = URI_REGEX.exec(uriString);\n  if (parsedUri === null) {\n    return null;\n  }\n  return {\n    scheme: parsedUri[1],\n    authority: parsedUri[2],\n    path: parsedUri[3]\n  };\n}\nexports.parseUri = parseUri;\nconst NUMBER_REGEX = /^\\d+$/;\nfunction splitHostPort(path) {\n  if (path.startsWith('[')) {\n    const hostEnd = path.indexOf(']');\n    if (hostEnd === -1) {\n      return null;\n    }\n    const host = path.substring(1, hostEnd);\n    /* Only an IPv6 address should be in bracketed notation, and an IPv6\n     * address should have at least one colon */\n    if (host.indexOf(':') === -1) {\n      return null;\n    }\n    if (path.length > hostEnd + 1) {\n      if (path[hostEnd + 1] === ':') {\n        const portString = path.substring(hostEnd + 2);\n        if (NUMBER_REGEX.test(portString)) {\n          return {\n            host: host,\n            port: +portString\n          };\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else {\n      return {\n        host\n      };\n    }\n  } else {\n    const splitPath = path.split(':');\n    /* Exactly one colon means that this is host:port. Zero colons means that\n     * there is no port. And multiple colons means that this is a bare IPv6\n     * address with no port */\n    if (splitPath.length === 2) {\n      if (NUMBER_REGEX.test(splitPath[1])) {\n        return {\n          host: splitPath[0],\n          port: +splitPath[1]\n        };\n      } else {\n        return null;\n      }\n    } else {\n      return {\n        host: path\n      };\n    }\n  }\n}\nexports.splitHostPort = splitHostPort;\nfunction uriToString(uri) {\n  let result = '';\n  if (uri.scheme !== undefined) {\n    result += uri.scheme + ':';\n  }\n  if (uri.authority !== undefined) {\n    result += '//' + uri.authority + '/';\n  }\n  result += uri.path;\n  return result;\n}\nexports.uriToString = uriToString;","map":{"version":3,"names":["Object","defineProperty","exports","value","uriToString","splitHostPort","parseUri","URI_REGEX","uriString","parsedUri","exec","scheme","authority","path","NUMBER_REGEX","startsWith","hostEnd","indexOf","host","substring","length","portString","test","port","splitPath","split","uri","result","undefined"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@grpc/grpc-js/build/src/uri-parser.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uriToString = exports.splitHostPort = exports.parseUri = void 0;\n/*\n * The groups correspond to URI parts as follows:\n * 1. scheme\n * 2. authority\n * 3. path\n */\nconst URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\\/\\/([^/]*)\\/)?(.+)$/;\nfunction parseUri(uriString) {\n    const parsedUri = URI_REGEX.exec(uriString);\n    if (parsedUri === null) {\n        return null;\n    }\n    return {\n        scheme: parsedUri[1],\n        authority: parsedUri[2],\n        path: parsedUri[3],\n    };\n}\nexports.parseUri = parseUri;\nconst NUMBER_REGEX = /^\\d+$/;\nfunction splitHostPort(path) {\n    if (path.startsWith('[')) {\n        const hostEnd = path.indexOf(']');\n        if (hostEnd === -1) {\n            return null;\n        }\n        const host = path.substring(1, hostEnd);\n        /* Only an IPv6 address should be in bracketed notation, and an IPv6\n         * address should have at least one colon */\n        if (host.indexOf(':') === -1) {\n            return null;\n        }\n        if (path.length > hostEnd + 1) {\n            if (path[hostEnd + 1] === ':') {\n                const portString = path.substring(hostEnd + 2);\n                if (NUMBER_REGEX.test(portString)) {\n                    return {\n                        host: host,\n                        port: +portString,\n                    };\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return {\n                host,\n            };\n        }\n    }\n    else {\n        const splitPath = path.split(':');\n        /* Exactly one colon means that this is host:port. Zero colons means that\n         * there is no port. And multiple colons means that this is a bare IPv6\n         * address with no port */\n        if (splitPath.length === 2) {\n            if (NUMBER_REGEX.test(splitPath[1])) {\n                return {\n                    host: splitPath[0],\n                    port: +splitPath[1],\n                };\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return {\n                host: path,\n            };\n        }\n    }\n}\nexports.splitHostPort = splitHostPort;\nfunction uriToString(uri) {\n    let result = '';\n    if (uri.scheme !== undefined) {\n        result += uri.scheme + ':';\n    }\n    if (uri.authority !== undefined) {\n        result += '//' + uri.authority + '/';\n    }\n    result += uri.path;\n    return result;\n}\nexports.uriToString = uriToString;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}