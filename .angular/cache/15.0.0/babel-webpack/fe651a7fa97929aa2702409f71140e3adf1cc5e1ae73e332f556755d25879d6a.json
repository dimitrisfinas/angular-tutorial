{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.experimental = exports.StatusBuilder = exports.getClientChannel = exports.ServerCredentials = exports.Server = exports.setLogVerbosity = exports.setLogger = exports.load = exports.loadObject = exports.CallCredentials = exports.ChannelCredentials = exports.waitForClientReady = exports.closeClient = exports.Channel = exports.makeGenericClientConstructor = exports.makeClientConstructor = exports.loadPackageDefinition = exports.Client = exports.compressionAlgorithms = exports.propagate = exports.connectivityState = exports.status = exports.logVerbosity = exports.Metadata = exports.credentials = void 0;\nconst call_credentials_1 = require(\"./call-credentials\");\nObject.defineProperty(exports, \"CallCredentials\", {\n  enumerable: true,\n  get: function () {\n    return call_credentials_1.CallCredentials;\n  }\n});\nconst channel_1 = require(\"./channel\");\nObject.defineProperty(exports, \"Channel\", {\n  enumerable: true,\n  get: function () {\n    return channel_1.ChannelImplementation;\n  }\n});\nconst compression_algorithms_1 = require(\"./compression-algorithms\");\nObject.defineProperty(exports, \"compressionAlgorithms\", {\n  enumerable: true,\n  get: function () {\n    return compression_algorithms_1.CompressionAlgorithms;\n  }\n});\nconst connectivity_state_1 = require(\"./connectivity-state\");\nObject.defineProperty(exports, \"connectivityState\", {\n  enumerable: true,\n  get: function () {\n    return connectivity_state_1.ConnectivityState;\n  }\n});\nconst channel_credentials_1 = require(\"./channel-credentials\");\nObject.defineProperty(exports, \"ChannelCredentials\", {\n  enumerable: true,\n  get: function () {\n    return channel_credentials_1.ChannelCredentials;\n  }\n});\nconst client_1 = require(\"./client\");\nObject.defineProperty(exports, \"Client\", {\n  enumerable: true,\n  get: function () {\n    return client_1.Client;\n  }\n});\nconst constants_1 = require(\"./constants\");\nObject.defineProperty(exports, \"logVerbosity\", {\n  enumerable: true,\n  get: function () {\n    return constants_1.LogVerbosity;\n  }\n});\nObject.defineProperty(exports, \"status\", {\n  enumerable: true,\n  get: function () {\n    return constants_1.Status;\n  }\n});\nObject.defineProperty(exports, \"propagate\", {\n  enumerable: true,\n  get: function () {\n    return constants_1.Propagate;\n  }\n});\nconst logging = require(\"./logging\");\nconst make_client_1 = require(\"./make-client\");\nObject.defineProperty(exports, \"loadPackageDefinition\", {\n  enumerable: true,\n  get: function () {\n    return make_client_1.loadPackageDefinition;\n  }\n});\nObject.defineProperty(exports, \"makeClientConstructor\", {\n  enumerable: true,\n  get: function () {\n    return make_client_1.makeClientConstructor;\n  }\n});\nObject.defineProperty(exports, \"makeGenericClientConstructor\", {\n  enumerable: true,\n  get: function () {\n    return make_client_1.makeClientConstructor;\n  }\n});\nconst metadata_1 = require(\"./metadata\");\nObject.defineProperty(exports, \"Metadata\", {\n  enumerable: true,\n  get: function () {\n    return metadata_1.Metadata;\n  }\n});\nconst server_1 = require(\"./server\");\nObject.defineProperty(exports, \"Server\", {\n  enumerable: true,\n  get: function () {\n    return server_1.Server;\n  }\n});\nconst server_credentials_1 = require(\"./server-credentials\");\nObject.defineProperty(exports, \"ServerCredentials\", {\n  enumerable: true,\n  get: function () {\n    return server_credentials_1.ServerCredentials;\n  }\n});\nconst status_builder_1 = require(\"./status-builder\");\nObject.defineProperty(exports, \"StatusBuilder\", {\n  enumerable: true,\n  get: function () {\n    return status_builder_1.StatusBuilder;\n  }\n});\n/**** Client Credentials ****/\n// Using assign only copies enumerable properties, which is what we want\nexports.credentials = {\n  /**\n   * Combine a ChannelCredentials with any number of CallCredentials into a\n   * single ChannelCredentials object.\n   * @param channelCredentials The ChannelCredentials object.\n   * @param callCredentials Any number of CallCredentials objects.\n   * @return The resulting ChannelCredentials object.\n   */\n  combineChannelCredentials: (channelCredentials, ...callCredentials) => {\n    return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);\n  },\n  /**\n   * Combine any number of CallCredentials into a single CallCredentials\n   * object.\n   * @param first The first CallCredentials object.\n   * @param additional Any number of additional CallCredentials objects.\n   * @return The resulting CallCredentials object.\n   */\n  combineCallCredentials: (first, ...additional) => {\n    return additional.reduce((acc, other) => acc.compose(other), first);\n  },\n  // from channel-credentials.ts\n  createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,\n  createSsl: channel_credentials_1.ChannelCredentials.createSsl,\n  createFromSecureContext: channel_credentials_1.ChannelCredentials.createFromSecureContext,\n  // from call-credentials.ts\n  createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,\n  createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,\n  createEmpty: call_credentials_1.CallCredentials.createEmpty\n};\n/**\n * Close a Client object.\n * @param client The client to close.\n */\nexports.closeClient = client => client.close();\nexports.waitForClientReady = (client, deadline, callback) => client.waitForReady(deadline, callback);\n/* eslint-enable @typescript-eslint/no-explicit-any */\n/**** Unimplemented function stubs ****/\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexports.loadObject = (value, options) => {\n  throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\nexports.load = (filename, format, options) => {\n  throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\nexports.setLogger = logger => {\n  logging.setLogger(logger);\n};\nexports.setLogVerbosity = verbosity => {\n  logging.setLoggerVerbosity(verbosity);\n};\nexports.getClientChannel = client => {\n  return client_1.Client.prototype.getChannel.call(client);\n};\nvar client_interceptors_1 = require(\"./client-interceptors\");\nObject.defineProperty(exports, \"ListenerBuilder\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.ListenerBuilder;\n  }\n});\nObject.defineProperty(exports, \"RequesterBuilder\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.RequesterBuilder;\n  }\n});\nObject.defineProperty(exports, \"InterceptingCall\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.InterceptingCall;\n  }\n});\nObject.defineProperty(exports, \"InterceptorConfigurationError\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.InterceptorConfigurationError;\n  }\n});\nvar channelz_1 = require(\"./channelz\");\nObject.defineProperty(exports, \"getChannelzServiceDefinition\", {\n  enumerable: true,\n  get: function () {\n    return channelz_1.getChannelzServiceDefinition;\n  }\n});\nObject.defineProperty(exports, \"getChannelzHandlers\", {\n  enumerable: true,\n  get: function () {\n    return channelz_1.getChannelzHandlers;\n  }\n});\nvar admin_1 = require(\"./admin\");\nObject.defineProperty(exports, \"addAdminServicesToServer\", {\n  enumerable: true,\n  get: function () {\n    return admin_1.addAdminServicesToServer;\n  }\n});\nconst experimental = require(\"./experimental\");\nexports.experimental = experimental;\nconst resolver_dns = require(\"./resolver-dns\");\nconst resolver_uds = require(\"./resolver-uds\");\nconst resolver_ip = require(\"./resolver-ip\");\nconst load_balancer_pick_first = require(\"./load-balancer-pick-first\");\nconst load_balancer_round_robin = require(\"./load-balancer-round-robin\");\nconst load_balancer_outlier_detection = require(\"./load-balancer-outlier-detection\");\nconst channelz = require(\"./channelz\");\nconst clientVersion = require('../../package.json').version;\n(() => {\n  logging.trace(constants_1.LogVerbosity.DEBUG, 'index', 'Loading @grpc/grpc-js version ' + clientVersion);\n  resolver_dns.setup();\n  resolver_uds.setup();\n  resolver_ip.setup();\n  load_balancer_pick_first.setup();\n  load_balancer_round_robin.setup();\n  load_balancer_outlier_detection.setup();\n  channelz.setup();\n})();\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}