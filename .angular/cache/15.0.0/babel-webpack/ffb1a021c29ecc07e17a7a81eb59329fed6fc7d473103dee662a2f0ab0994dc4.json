{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTracerEnabled = exports.trace = exports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\nconst constants_1 = require(\"./constants\");\nconst DEFAULT_LOGGER = {\n  error: (message, ...optionalParams) => {\n    console.error('E ' + message, ...optionalParams);\n  },\n  info: (message, ...optionalParams) => {\n    console.error('I ' + message, ...optionalParams);\n  },\n  debug: (message, ...optionalParams) => {\n    console.error('D ' + message, ...optionalParams);\n  }\n};\nlet _logger = DEFAULT_LOGGER;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : '';\nswitch (verbosityString.toUpperCase()) {\n  case 'DEBUG':\n    _logVerbosity = constants_1.LogVerbosity.DEBUG;\n    break;\n  case 'INFO':\n    _logVerbosity = constants_1.LogVerbosity.INFO;\n    break;\n  case 'ERROR':\n    _logVerbosity = constants_1.LogVerbosity.ERROR;\n    break;\n  case 'NONE':\n    _logVerbosity = constants_1.LogVerbosity.NONE;\n    break;\n  default:\n  // Ignore any other values\n}\n\nexports.getLogger = () => {\n  return _logger;\n};\nexports.setLogger = logger => {\n  _logger = logger;\n};\nexports.setLoggerVerbosity = verbosity => {\n  _logVerbosity = verbosity;\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexports.log = (severity, ...args) => {\n  let logFunction;\n  if (severity >= _logVerbosity) {\n    switch (severity) {\n      case constants_1.LogVerbosity.DEBUG:\n        logFunction = _logger.debug;\n        break;\n      case constants_1.LogVerbosity.INFO:\n        logFunction = _logger.info;\n        break;\n      case constants_1.LogVerbosity.ERROR:\n        logFunction = _logger.error;\n        break;\n    }\n    /* Fall back to _logger.error when other methods are not available for\n     * compatiblity with older behavior that always logged to _logger.error */\n    if (!logFunction) {\n      logFunction = _logger.error;\n    }\n    if (logFunction) {\n      logFunction.bind(_logger)(...args);\n    }\n  }\n};\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : '';\nconst enabledTracers = new Set();\nconst disabledTracers = new Set();\nfor (const tracerName of tracersString.split(',')) {\n  if (tracerName.startsWith('-')) {\n    disabledTracers.add(tracerName.substring(1));\n  } else {\n    enabledTracers.add(tracerName);\n  }\n}\nconst allEnabled = enabledTracers.has('all');\nfunction trace(severity, tracer, text) {\n  if (isTracerEnabled(tracer)) {\n    exports.log(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n  }\n}\nexports.trace = trace;\nfunction isTracerEnabled(tracer) {\n  return !disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer));\n}\nexports.isTracerEnabled = isTracerEnabled;","map":{"version":3,"names":["_a","_b","_c","_d","Object","defineProperty","exports","value","isTracerEnabled","trace","log","setLoggerVerbosity","setLogger","getLogger","constants_1","require","DEFAULT_LOGGER","error","message","optionalParams","console","info","debug","_logger","_logVerbosity","LogVerbosity","ERROR","verbosityString","process","env","GRPC_NODE_VERBOSITY","GRPC_VERBOSITY","toUpperCase","DEBUG","INFO","NONE","logger","verbosity","severity","args","logFunction","bind","tracersString","GRPC_NODE_TRACE","GRPC_TRACE","enabledTracers","Set","disabledTracers","tracerName","split","startsWith","add","substring","allEnabled","has","tracer","text","Date","toISOString"],"sources":["/Users/dimitris.finas/git/lightstep/cloud/aws/angular/angular-tutorial/node_modules/@grpc/grpc-js/build/src/logging.js"],"sourcesContent":["\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTracerEnabled = exports.trace = exports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\nconst constants_1 = require(\"./constants\");\nconst DEFAULT_LOGGER = {\n    error: (message, ...optionalParams) => {\n        console.error('E ' + message, ...optionalParams);\n    },\n    info: (message, ...optionalParams) => {\n        console.error('I ' + message, ...optionalParams);\n    },\n    debug: (message, ...optionalParams) => {\n        console.error('D ' + message, ...optionalParams);\n    },\n};\nlet _logger = DEFAULT_LOGGER;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : '';\nswitch (verbosityString.toUpperCase()) {\n    case 'DEBUG':\n        _logVerbosity = constants_1.LogVerbosity.DEBUG;\n        break;\n    case 'INFO':\n        _logVerbosity = constants_1.LogVerbosity.INFO;\n        break;\n    case 'ERROR':\n        _logVerbosity = constants_1.LogVerbosity.ERROR;\n        break;\n    case 'NONE':\n        _logVerbosity = constants_1.LogVerbosity.NONE;\n        break;\n    default:\n    // Ignore any other values\n}\nexports.getLogger = () => {\n    return _logger;\n};\nexports.setLogger = (logger) => {\n    _logger = logger;\n};\nexports.setLoggerVerbosity = (verbosity) => {\n    _logVerbosity = verbosity;\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexports.log = (severity, ...args) => {\n    let logFunction;\n    if (severity >= _logVerbosity) {\n        switch (severity) {\n            case constants_1.LogVerbosity.DEBUG:\n                logFunction = _logger.debug;\n                break;\n            case constants_1.LogVerbosity.INFO:\n                logFunction = _logger.info;\n                break;\n            case constants_1.LogVerbosity.ERROR:\n                logFunction = _logger.error;\n                break;\n        }\n        /* Fall back to _logger.error when other methods are not available for\n         * compatiblity with older behavior that always logged to _logger.error */\n        if (!logFunction) {\n            logFunction = _logger.error;\n        }\n        if (logFunction) {\n            logFunction.bind(_logger)(...args);\n        }\n    }\n};\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : '';\nconst enabledTracers = new Set();\nconst disabledTracers = new Set();\nfor (const tracerName of tracersString.split(',')) {\n    if (tracerName.startsWith('-')) {\n        disabledTracers.add(tracerName.substring(1));\n    }\n    else {\n        enabledTracers.add(tracerName);\n    }\n}\nconst allEnabled = enabledTracers.has('all');\nfunction trace(severity, tracer, text) {\n    if (isTracerEnabled(tracer)) {\n        exports.log(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n    }\n}\nexports.trace = trace;\nfunction isTracerEnabled(tracer) {\n    return !disabledTracers.has(tracer) &&\n        (allEnabled || enabledTracers.has(tracer));\n}\nexports.isTracerEnabled = isTracerEnabled;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}